/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.controllers;

import com.saburi.common.controllers.EditController;
import static com.saburi.common.utils.FXUIUtils.addRow;
import static com.saburi.common.utils.FXUIUtils.formatValue;
import static com.saburi.common.utils.FXUIUtils.getDouble;
import static com.saburi.common.utils.FXUIUtils.getSelectedValue;
import java.net.URL;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import com.saburi.common.utils.Utilities.FormMode;
import static com.saburi.common.utils.FXUIUtils.warningOk;
import com.saburi.finance.dbaccess.CreditNoteApprovalDA;
import javafx.scene.control.TextField;
import javafx.scene.control.ComboBox;
import javafx.scene.control.MenuItem;
import com.saburi.finance.dbaccess.CreditNoteRequestDA;
import com.saburi.finance.entities.CreditNoteRequest;
import com.saburi.finance.utils.FinanceNavigate;
import javafx.scene.control.DatePicker;
import java.time.LocalDate;
import javafx.scene.control.TextArea;
import com.saburi.common.dbaccess.StaffDA;
import com.saburi.common.entities.Staff;
import static com.saburi.common.utils.FXUIUtils.errorMessage;
import static com.saburi.common.utils.FXUIUtils.getDate;
import static com.saburi.common.utils.FXUIUtils.getEntity;
import static com.saburi.common.utils.FXUIUtils.getSelectedItem;
import static com.saburi.common.utils.FXUIUtils.getText;
import static com.saburi.common.utils.FXUIUtils.loadDBEntities;
import static com.saburi.common.utils.FXUIUtils.message;
import static com.saburi.common.utils.FXUIUtils.selectItem;
import static com.saburi.common.utils.FXUIUtils.setTableEditable;
import static com.saburi.common.utils.FXUIUtils.validateNumber;
import com.saburi.finance.dbaccess.InvoiceDA;
import static com.saburi.common.utils.Utilities.formatNumber;
import com.saburi.finance.utils.FinanceEnums.RequestStatus;
import javafx.collections.FXCollections;
import javafx.scene.control.TableView;
import java.util.List;
import com.saburi.finance.dbaccess.CreditNoteRequestDetailsDA;
import java.util.Arrays;
import javafx.application.Platform;
import javafx.collections.ObservableList;
import javafx.scene.control.TableColumn;

public class CreditNoteApprovalController extends EditController {

    private final CreditNoteApprovalDA oCreditNoteApprovalDA = new CreditNoteApprovalDA();
    @FXML
    private TextField txtCreditNoteRequestID;
    @FXML
    private MenuItem cmiSelectCreditNoteRequest;
    @FXML
    private DatePicker dtpApprovalDate;
    @FXML
    private TextArea txaNotes;
    @FXML
    private ComboBox cboApprovedBy;
    @FXML
    private MenuItem cmiSelectApprovedBy, cmiPendingLoad;
    @FXML
    private TextField txtInvoice;
    @FXML
    private MenuItem cmiSelectInvoice;
    @FXML
    private DatePicker dtpRequestDate;
    @FXML
    private TextArea txaRequestNotes;
    @FXML
    private TextField txtAmount;
    @FXML
    private TextArea txaAmountWords;
    @FXML
    private TextField txtCustomerName;
    @FXML
    private TextField txtInvoiceAmount;
    @FXML
    private ComboBox cboRequestStatus;
    @FXML
    private TableView<CreditNoteRequestDetailsDA> tblCreditNoteRequestDetails;

    private final CreditNoteRequestDA oCreditNoteRequestDA = new CreditNoteRequestDA();
    private final StaffDA oStaffDA = new StaffDA();
    private final InvoiceDA oInvoiceDA = new InvoiceDA();
    @FXML
    private TableColumn<CreditNoteRequestDetailsDA, String> tbcCreditNoteRequestDetailsItemID, tbcCreditNoteRequestDetailsItemName;
    @FXML
    private TableColumn<CreditNoteRequestDetailsDA, Integer> tbcCreditNoteRequestDetailsBaseQuantity;
    @FXML
    private TableColumn<CreditNoteRequestDetailsDA, String> tbcCreditNoteRequestDetailsUnitMeasure;
    @FXML
    private TableColumn<CreditNoteRequestDetailsDA, Integer> tbcCreditNoteRequestDetailsMeasureSize;
    @FXML
    private TableColumn<CreditNoteRequestDetailsDA, Integer> tbcCreditNoteRequestDetailsQuantity;
    @FXML
    private TableColumn<CreditNoteRequestDetailsDA, String> tbcCreditNoteRequestDetailsUnitPrice;
    @FXML
    private TableColumn<CreditNoteRequestDetailsDA, String> tbcCreditNoteRequestDetailsAmount;
    private CreditNoteRequest creditNoteRequest;

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            loadDBEntities(oStaffDA.getStaffs(), cboApprovedBy);
            ObservableList requestStatuses = FXCollections.observableArrayList(RequestStatus.values());
            requestStatuses.removeAll(Arrays.asList(RequestStatus.Pending, RequestStatus.Concluded, RequestStatus.Processing));
            cboRequestStatus.setItems(requestStatuses);
            validateNumber(txtAmount);
            validateNumber(txtInvoiceAmount);
            formatValue(txtAmount);
            formatValue(txtInvoiceAmount);
            tblCreditNoteRequestDetails.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
            setTableEditable(tblCreditNoteRequestDetails);
            addRow(tblCreditNoteRequestDetails, new CreditNoteRequestDetailsDA());
            this.primaryKeyControl = txtCreditNoteRequestID;
            this.dbAccess = oCreditNoteApprovalDA;
            this.restrainColumnConstraint = false;
            //this.minSize = 360;

//            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectCreditNoteRequest, oCreditNoteRequestDA, "CreditNoteRequest", "Credit Note Request", cboCreditNoteRequest, true);
            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectApprovedBy, oStaffDA, "Staff", "Approved By", cboApprovedBy, true);
            txtCreditNoteRequestID.focusedProperty().addListener((ov, t, t1) -> {
                if (t) {
                    this.loadCreditNoteRequest();
                }
            });
            dtpRequestDate.disableProperty().set(true);
            dtpApprovalDate.setValue(LocalDate.now());
            cmiPendingLoad.visibleProperty().set(btnSave.getText().equalsIgnoreCase(FormMode.Save.name()));
           cmiPendingLoad.setOnAction(e->selectCreditNoteRequest());
            selectItem(FinanceNavigate.MAIN_CLASS, cmiPendingLoad, oCreditNoteRequestDA,
                    CreditNoteRequestDA.getCreditNoteRequestDAs(oCreditNoteRequestDA.getPendingCreditNoteRequests()),
                    "CreditNoteRequest", "Credit Note Request", txtCreditNoteRequestID, true);
           
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void save() {
        try {
            this.editSuccessful = false;
            String creditNoteRequestID = getText(txtCreditNoteRequestID, "Credit Note Request ID");
            LocalDate approvalDate = getDate(dtpApprovalDate, "Approval Date");
            String notes = getText(txaNotes, "Notes");
            Staff approvedBy = (Staff) getEntity(cboApprovedBy, "Approved By");
            LocalDate requestDate = getDate(dtpRequestDate, "Request Date");
            String requestNotes = getText(txaRequestNotes, "Request Notes");
            double amount = getDouble(txtAmount, "Amount");
            String amountWords = getText(txaAmountWords, "AmountWords");
            String customerName = getText(txtCustomerName, "Customer Name");
            double invoiceAmount = getDouble(txtInvoiceAmount, "Invoice Amount");
            RequestStatus requestStatus = (RequestStatus) getSelectedValue(cboRequestStatus, "Request Status");
            List<CreditNoteRequestDetailsDA> creditNoteRequestDetailsDAs = tblCreditNoteRequestDetails.getItems();
            creditNoteRequestDetailsDAs.removeIf((p) -> p.getCreditNoteRequestDetails() == null);

            CreditNoteApprovalDA creditNoteApprovalDA = new CreditNoteApprovalDA(creditNoteRequest, approvalDate, notes, requestStatus, approvedBy);

            String buttonText = btnSave.getText();
            if (buttonText.equalsIgnoreCase(FormMode.Save.name())) {
                creditNoteApprovalDA.save();
                message("Saved Successfully");
                clear();
                addRow(tblCreditNoteRequestDetails, new CreditNoteRequestDetailsDA());
            } else if (buttonText.equalsIgnoreCase(FormMode.Update.name())) {
                creditNoteApprovalDA.update();
                message("Updated Successfully");
            }
            this.dbAccess = creditNoteApprovalDA;
            this.editSuccessful = true;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void delete() {
        try {
            String creditNoteApprovalID = getText(txtCreditNoteRequestID, "Credit Note Request ID");
            CreditNoteApprovalDA creditNoteApprovalDA = oCreditNoteApprovalDA.get(creditNoteApprovalID);
            if (!warningOk("Confirm Delete", "You are about to delete a record with ID: " + creditNoteApprovalID + " Are you sure you want to continue?", "Remember this action cannot be un done")) {
                return;
            }
            if (creditNoteApprovalDA.delete()) {
                message("Deleted Successfully");
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    @Override
    public void loadData() {
        try {
            String creditNoteApprovalID = getText(txtCreditNoteRequestID, "Credit Note Approval ID");

            CreditNoteApprovalDA creditNoteApprovalDA = oCreditNoteApprovalDA.get(creditNoteApprovalID);
            RequestStatus rStatus = (RequestStatus) creditNoteApprovalDA.getRequestStatus();
            txtCreditNoteRequestID.setText(creditNoteApprovalDA.getCreditNoteApprovalID());
            dtpApprovalDate.setValue((LocalDate) creditNoteApprovalDA.getApprovalDate());
            txaNotes.setText(creditNoteApprovalDA.getNotes());
            cboApprovedBy.setValue(creditNoteApprovalDA.getApprovedBy());
            cboRequestStatus.setValue(rStatus);
            txtInvoice.setText(creditNoteApprovalDA.getInvoiceDisplay());
            dtpRequestDate.setValue((LocalDate) creditNoteApprovalDA.getRequestDate());
            txaRequestNotes.setText(creditNoteApprovalDA.getRequestNotes());
            txtAmount.setText(formatNumber(creditNoteApprovalDA.getAmount()));
            txaAmountWords.setText(creditNoteApprovalDA.getAmountWords());
            txtCustomerName.setText(creditNoteApprovalDA.getCustomerName());
            txtInvoiceAmount.setText(formatNumber(creditNoteApprovalDA.getInvoiceAmount()));
            this.creditNoteRequest = creditNoteApprovalDA.getCreditNoteRequest();
            tblCreditNoteRequestDetails.setItems(FXCollections.observableArrayList(creditNoteApprovalDA.getCreditNoteRequestDetailsDAs()));
             
            this.btnDelete.disableProperty().set(!rStatus.equals(RequestStatus.Approved)||rStatus.equals(RequestStatus.Cancelled));
        } catch (Exception e) {
            errorMessage(e);
        }

    }

    public void loadCreditNoteRequest() {
        try {
            String creditNoteRequestlID = getText(txtCreditNoteRequestID);
            if(creditNoteRequestlID.isBlank())return;
            CreditNoteRequestDA creditNoteRequestDA = oCreditNoteRequestDA.get(creditNoteRequestlID);
            this.loadCreditNoteRequestData(creditNoteRequestDA);
           
        } catch (Exception e) {
            Platform.runLater(()->errorMessage(e));
        }
    }
        private void loadCreditNoteRequestData(CreditNoteRequestDA creditNoteRequestDA) {
        try {
           
            txtInvoice.setText(creditNoteRequestDA.getInvoiceDisplay());
            dtpRequestDate.setValue((LocalDate) creditNoteRequestDA.getRequestDate());
            txaRequestNotes.setText(creditNoteRequestDA.getNotes());
            txtAmount.setText(formatNumber(creditNoteRequestDA.getAmount()));
            txaAmountWords.setText(creditNoteRequestDA.getAmountWords());
            txtCustomerName.setText(creditNoteRequestDA.getInvoice().getBillTo().getCustomerName());
            txtInvoiceAmount.setText(formatNumber(creditNoteRequestDA.getInvoice().getAmount()));
            cboRequestStatus.setValue(creditNoteRequestDA.getRequestStatus());
            tblCreditNoteRequestDetails.setItems(FXCollections.observableArrayList(creditNoteRequestDA.getCreditNoteRequestDetailsDAs()));
            this.creditNoteRequest = creditNoteRequestDA.getCreditNoteRequest();
           
        } catch (Exception e) {
            errorMessage(e);
        }

    }
        private void selectCreditNoteRequest(){
            try {
                selectItem(FinanceNavigate.MAIN_CLASS, cmiPendingLoad, oCreditNoteRequestDA,
                    CreditNoteRequestDA.getCreditNoteRequestDAs(oCreditNoteRequestDA.getPendingCreditNoteRequests()),
                    "CreditNoteRequest", "Credit Note Request", txtCreditNoteRequestID, true);
                CreditNoteRequestDA creditNoteRequestDA = (CreditNoteRequestDA) getSelectedItem(mainClass, oCreditNoteRequestDA,
                        CreditNoteRequestDA.getCreditNoteRequestDAs(oCreditNoteRequestDA.getPendingCreditNoteRequests()),
                    "CreditNoteRequest", "Credit Note Request", 0, 0, txtCreditNoteRequestID, true);
                loadCreditNoteRequestData(creditNoteRequestDA);
            } catch (Exception e) {
               Platform.runLater(()->errorMessage(e));
            }
        }

}
