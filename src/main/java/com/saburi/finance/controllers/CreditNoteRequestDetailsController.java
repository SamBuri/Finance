/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.controllers;

import com.saburi.common.controllers.EditController;
import static com.saburi.common.utils.FXUIUtils.errorMessage;
import static com.saburi.common.utils.FXUIUtils.formatInteger;
import static com.saburi.common.utils.FXUIUtils.formatValue;
import static com.saburi.common.utils.FXUIUtils.getDouble;
import static com.saburi.common.utils.FXUIUtils.getEntity;
import static com.saburi.common.utils.FXUIUtils.getInt;
import static com.saburi.common.utils.FXUIUtils.getText;
import static com.saburi.common.utils.FXUIUtils.loadDBEntities;
import static com.saburi.common.utils.FXUIUtils.message;
import static com.saburi.common.utils.FXUIUtils.selectItem;
import static com.saburi.common.utils.FXUIUtils.validateIteger;
import static com.saburi.common.utils.FXUIUtils.validateNumber;
import static com.saburi.common.utils.FXUIUtils.warningOk;
import com.saburi.common.utils.Utilities.FormMode;
import static com.saburi.common.utils.Utilities.formatNumber;
import java.net.URL;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import com.saburi.finance.dbaccess.CreditNoteRequestDetailsDA;
import javafx.scene.control.TextField;
import javafx.scene.control.ComboBox;
import javafx.scene.control.MenuItem;
import com.saburi.finance.dbaccess.CreditNoteRequestDA;
import com.saburi.finance.entities.CreditNoteRequest;
import com.saburi.finance.utils.FinanceNavigate;
import com.saburi.finance.dbaccess.InvoiceDetailsDA;
import com.saburi.finance.entities.InvoiceDetails;

public class CreditNoteRequestDetailsController extends EditController {

    private final CreditNoteRequestDetailsDA oCreditNoteRequestDetailsDA = new CreditNoteRequestDetailsDA();
    @FXML
    private TextField txtCreditNoteDetailID;
    @FXML
    private ComboBox cboCreditNoteRequest;
    @FXML
    private MenuItem cmiSelectCreditNoteRequest;
    @FXML
    private ComboBox cboInvoiceDetails;
    @FXML
    private MenuItem cmiSelectInvoiceDetails;
    @FXML
    private TextField txtBaseQuantity;
    @FXML
    private TextField txtUnitMeasure;
    @FXML
    private TextField txtMeasureSize;
    @FXML
    private TextField txtQuantity;
    @FXML
    private TextField txtUnitPrice;
    @FXML
    private TextField txtAmount;
    @FXML
    private TextField txtNotes;
    private final CreditNoteRequestDA oCreditNoteRequestDA = new CreditNoteRequestDA();
    private final InvoiceDetailsDA oInvoiceDetailsDA = new InvoiceDetailsDA();

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            loadDBEntities(oCreditNoteRequestDA.getCreditNoteRequests(), cboCreditNoteRequest);
            loadDBEntities(oInvoiceDetailsDA.getInvoiceDetailss(), cboInvoiceDetails);

            validateIteger(txtCreditNoteDetailID);
            validateIteger(txtBaseQuantity);
            validateIteger(txtMeasureSize);
            validateIteger(txtQuantity);
            validateNumber(txtUnitPrice);
            validateNumber(txtAmount);
            formatInteger(txtCreditNoteDetailID);
            formatInteger(txtBaseQuantity);
            formatInteger(txtMeasureSize);
            formatInteger(txtQuantity);
            formatValue(txtUnitPrice);
            formatValue(txtAmount);
            this.primaryKeyControl = txtCreditNoteDetailID;
            this.dbAccess = oCreditNoteRequestDetailsDA;
            this.restrainColumnConstraint = false;
            //this.prefSize = 360;
            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectCreditNoteRequest, oCreditNoteRequestDA, "CreditNoteRequest", "Credit Note Request", cboCreditNoteRequest, true);
            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectInvoiceDetails, oInvoiceDetailsDA, "InvoiceDetails", "Invoice Details", cboInvoiceDetails, true);
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void save() {
        try {
            this.editSuccessful = false;
            int creditNoteDetailID = getInt(txtCreditNoteDetailID, "CreditNote Detail ID");
            CreditNoteRequest creditNote = (CreditNoteRequest) getEntity(cboCreditNoteRequest, "Credit Note Request");
            InvoiceDetails invoiceDetail = (InvoiceDetails) getEntity(cboInvoiceDetails, "Invoice Details");
            int baseQuantity = getInt(txtBaseQuantity, "Base Quantity");
            String unitMeasure = getText(txtUnitMeasure, "Unit Measure");
            int measureSize = getInt(txtMeasureSize, "Measure Size");
            int quantity = getInt(txtQuantity, "Quantity");
            double unitPrice = getDouble(txtUnitPrice, "Unit Price");
            double amount = getDouble(txtAmount, "Amount");
            String notes = getText(txtNotes, "Notes");

            CreditNoteRequestDetailsDA creditNoteRequestDetailsDA = new CreditNoteRequestDetailsDA(creditNoteDetailID, creditNote, invoiceDetail, baseQuantity, unitMeasure, measureSize, quantity, unitPrice, amount, notes);
            String buttonText = btnSave.getText();
            if (buttonText.equalsIgnoreCase(FormMode.Save.name())) {
                creditNoteRequestDetailsDA.save();
                message("Saved Successfully");
                clear();
            } else if (buttonText.equalsIgnoreCase(FormMode.Update.name())) {
                creditNoteRequestDetailsDA.update();
                message("Updated Successfully");
            }
            this.dbAccess = creditNoteRequestDetailsDA;
            this.editSuccessful = true;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void delete() {
        try {
            int creditNoteDetailID = getInt(txtCreditNoteDetailID, "CreditNote Detail ID");
            CreditNoteRequestDetailsDA creditNoteRequestDetailsDA = oCreditNoteRequestDetailsDA.get(creditNoteDetailID);
            if (!warningOk("Confirm Delete", "You are about to delete a record with ID: " + creditNoteDetailID + " Are you sure you want to continue?", "Remember this action cannot be un done")) {
                return;
            }
            if (creditNoteRequestDetailsDA.delete()) {
                message("Deleted Successfully");
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    @Override
    public void loadData() {
        try {
            int creditNoteDetailID = getInt(txtCreditNoteDetailID, "CreditNote Detail ID");

            CreditNoteRequestDetailsDA creditNoteRequestDetailsDA = oCreditNoteRequestDetailsDA.get(creditNoteDetailID);
            txtCreditNoteDetailID.setText(String.valueOf(creditNoteRequestDetailsDA.getCreditNoteDetailID()));
            cboCreditNoteRequest.setValue(creditNoteRequestDetailsDA.getCreditNoteRequest());
            cboInvoiceDetails.setValue(creditNoteRequestDetailsDA.getInvoiceDetails());
            txtBaseQuantity.setText(String.valueOf(creditNoteRequestDetailsDA.getBaseQuantity()));
            txtUnitMeasure.setText(creditNoteRequestDetailsDA.getUnitMeasure());
            txtMeasureSize.setText(String.valueOf(creditNoteRequestDetailsDA.getMeasureSize()));
            txtQuantity.setText(String.valueOf(creditNoteRequestDetailsDA.getQuantity()));
            txtUnitPrice.setText(formatNumber(creditNoteRequestDetailsDA.getUnitPrice()));
            txtAmount.setText(formatNumber(creditNoteRequestDetailsDA.getAmount()));
            txtNotes.setText(creditNoteRequestDetailsDA.getNotes());

        } catch (Exception e) {
            errorMessage(e);
        }

    }

}
