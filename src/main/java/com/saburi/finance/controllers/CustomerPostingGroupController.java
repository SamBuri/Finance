/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.controllers;

import com.saburi.common.controllers.EditController;
import com.saburi.common.entities.LookupData;
import static com.saburi.common.utils.FXUIUtils.errorMessage;
import static com.saburi.common.utils.FXUIUtils.getEntity;
import static com.saburi.common.utils.FXUIUtils.getText;
import static com.saburi.common.utils.FXUIUtils.loadDBEntities;
import static com.saburi.common.utils.FXUIUtils.loadLookupData;
import static com.saburi.common.utils.FXUIUtils.message;
import static com.saburi.common.utils.FXUIUtils.selectItem;
import static com.saburi.common.utils.FXUIUtils.selectLookupData;
import static com.saburi.common.utils.FXUIUtils.warningOk;
import com.saburi.common.utils.Utilities.FormMode;
import java.net.URL;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import com.saburi.finance.dbaccess.CustomerPostingGroupDA;
import javafx.scene.control.TextField;
import javafx.scene.control.ComboBox;
import javafx.scene.control.MenuItem;
import com.saburi.finance.utils.FinanceNavigate;
import com.saburi.finance.utils.FinanceObjectNames;
import com.saburi.finance.dbaccess.ChartAccountDA;
import com.saburi.finance.entities.ChartAccount;
import com.saburi.finance.utils.FinanceEnums.AccountTypes;

public class CustomerPostingGroupController extends EditController {

    private final CustomerPostingGroupDA oCustomerPostingGroupDA = new CustomerPostingGroupDA();
    @FXML
    private TextField txtCustomerPostingGroupID;
    @FXML
    private ComboBox cboCustomerGroup;
    @FXML
    private MenuItem cmiSelectCustomerGroup;
    @FXML
    private ComboBox cboReceivableAccount;
    @FXML
    private MenuItem cmiSelectReceivableAccount;
    @FXML
    private ComboBox cboServiceChargeAccount;
    @FXML
    private MenuItem cmiSelectServiceChargeAccount;
    @FXML
    private ComboBox cboPaymentDiscountAccount;
    @FXML
    private MenuItem cmiSelectPaymentDiscountAccount;
    @FXML
    private ComboBox cboUnPaidRefunds;
    @FXML
    private MenuItem cmiSelectUnPaidRefunds;
    @FXML
    private ComboBox cboCustomerDeposits;
    @FXML
    private MenuItem cmiSelectCustomerDeposits;
    private final ChartAccountDA oChartAccountDA = new ChartAccountDA();

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            loadLookupData(cboCustomerGroup, FinanceObjectNames.CUSTOMERGROUP);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Asset, false), cboReceivableAccount);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Income, false), cboServiceChargeAccount);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Expense, false), cboPaymentDiscountAccount);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Liability), cboUnPaidRefunds);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Liability), cboCustomerDeposits);

            this.primaryKeyControl = txtCustomerPostingGroupID;
            this.dbAccess = oCustomerPostingGroupDA;
            this.restrainColumnConstraint = false;
            //this.minSize = 360;
            this.setNextCustomerPostingGroupID();
            selectLookupData(cmiSelectCustomerGroup, FinanceObjectNames.CUSTOMERGROUP, "Customer Group", cboCustomerGroup, false);
            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectReceivableAccount, oChartAccountDA, oChartAccountDA.getChartAccountDAs(AccountTypes.Asset, false), "ChartAccount", "Receivable Account", cboReceivableAccount, true);
            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectServiceChargeAccount, oChartAccountDA, oChartAccountDA.getChartAccountDAs(AccountTypes.Income, false), "ChartAccount", "Service Charge Account", cboServiceChargeAccount, true);
            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectPaymentDiscountAccount, oChartAccountDA, oChartAccountDA.getChartAccountDAs(AccountTypes.Expense, false), "ChartAccount", "Payment Discount Account", cboPaymentDiscountAccount, true);
            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectUnPaidRefunds, oChartAccountDA, oChartAccountDA.getChartAccountDAs(AccountTypes.Liability, false), "ChartAccount", "Un paid Refunds", cboUnPaidRefunds, true);
            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectCustomerDeposits, oChartAccountDA, oChartAccountDA.getChartAccountDAs(AccountTypes.Liability, false), "ChartAccount", "Customer Deposits", cboCustomerDeposits, true);
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void save() {
        try {
            this.editSuccessful = false;
            String customerPostingGroupID = getText(txtCustomerPostingGroupID, "Customer Posting Group ID");
            LookupData customerGroup = (LookupData) getEntity(cboCustomerGroup, "Customer Group");
            ChartAccount receivableAccount = (ChartAccount) getEntity(cboReceivableAccount, "Receivable Account");
            ChartAccount serviceChargeAccount = (ChartAccount) getEntity(cboServiceChargeAccount, "Service Charge Account");
            ChartAccount paymentDiscountAccount = (ChartAccount) getEntity(cboPaymentDiscountAccount, "Payment Discount Account");
            ChartAccount unPaidRefunds = (ChartAccount) getEntity(cboUnPaidRefunds, "Un paid Refunds");
            ChartAccount customerDeposits = (ChartAccount) getEntity(cboCustomerDeposits, "Customer Deposits");

            CustomerPostingGroupDA customerPostingGroupDA = new CustomerPostingGroupDA(customerPostingGroupID, customerGroup, receivableAccount, serviceChargeAccount, paymentDiscountAccount, unPaidRefunds, customerDeposits);
            String buttonText = btnSave.getText();
            if (buttonText.equalsIgnoreCase(FormMode.Save.name())) {
                customerPostingGroupDA.save();
                message("Saved Successfully");
                clear();
                this.setNextCustomerPostingGroupID();
            } else if (buttonText.equalsIgnoreCase(FormMode.Update.name())) {
                customerPostingGroupDA.update();
                message("Updated Successfully");
            }
            this.dbAccess = customerPostingGroupDA;
            this.editSuccessful = true;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void delete() {
        try {
            String customerPostingGroupID = getText(txtCustomerPostingGroupID, "Customer Posting Group ID");
            CustomerPostingGroupDA customerPostingGroupDA = oCustomerPostingGroupDA.get(customerPostingGroupID);
            if (!warningOk("Confirm Delete", "You are about to delete a record with ID: " + customerPostingGroupID + " Are you sure you want to continue?", "Remember this action cannot be un done")) {
                return;
            }
            if (customerPostingGroupDA.delete()) {
                message("Deleted Successfully");
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    @Override
    public void loadData() {
        try {
            String customerPostingGroupID = getText(txtCustomerPostingGroupID, "Customer Posting Group ID");

            CustomerPostingGroupDA customerPostingGroupDA = oCustomerPostingGroupDA.get(customerPostingGroupID);
            txtCustomerPostingGroupID.setText(customerPostingGroupDA.getCustomerPostingGroupID());
            cboCustomerGroup.setValue(customerPostingGroupDA.getCustomerGroup());
            cboReceivableAccount.setValue(customerPostingGroupDA.getReceivableAccount());
            cboServiceChargeAccount.setValue(customerPostingGroupDA.getServiceChargeAccount());
            cboPaymentDiscountAccount.setValue(customerPostingGroupDA.getPaymentDiscountAccount());
            cboUnPaidRefunds.setValue(customerPostingGroupDA.getUnPaidRefunds());
            cboCustomerDeposits.setValue(customerPostingGroupDA.getCustomerDeposits());

        } catch (Exception e) {
            errorMessage(e);
        }

    }

    private void setNextCustomerPostingGroupID() {
        try {
            if (btnSave.getText().equalsIgnoreCase(FormMode.Save.name())) {
                txtCustomerPostingGroupID.setText(oCustomerPostingGroupDA.getNextCustomerPostingGroupID(oCustomerPostingGroupDA.getNextIdHelper()));
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

}
