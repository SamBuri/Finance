/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.controllers;

import com.saburi.common.controllers.EditController;
import static com.saburi.common.utils.FXUIUtils.errorMessage;
import static com.saburi.common.utils.FXUIUtils.getDouble;
import static com.saburi.common.utils.FXUIUtils.getText;
import static com.saburi.common.utils.FXUIUtils.message;
import static com.saburi.common.utils.FXUIUtils.validateNumber;
import static com.saburi.common.utils.FXUIUtils.warningOk;
import com.saburi.common.utils.Utilities.FormMode;
import static com.saburi.common.utils.Utilities.formatNumber;
import java.net.URL;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import com.saburi.finance.dbaccess.CurrencyDA;
import javafx.scene.control.TextField;
import javafx.scene.control.CheckBox;

public class CurrencyController extends EditController {

    private final CurrencyDA oCurrencyDA = new CurrencyDA();
    @FXML
    private TextField txtCurrencyID;
    @FXML
    private TextField txtCurrencyName;
    @FXML
    private TextField txtBuying;
    @FXML
    private TextField txtSelling;
    @FXML
    private CheckBox chkIsDefault;

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {

            validateNumber(txtBuying);
            validateNumber(txtSelling);
            this.primaryKeyControl = txtCurrencyID;
            this.dbAccess = oCurrencyDA;
            this.restrainColumnConstraint = false;
            this.prefSize = 360;
            this.setNextCurrencyID();
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void save() {
        try {
            this.editSuccessful = false;
            String currencyID = getText(txtCurrencyID, "Currency ID");
            String currencyName = getText(txtCurrencyName, "Currency Name");
            double buying = getDouble(txtBuying, "Buying");
            double selling = getDouble(txtSelling, "Selling");
            boolean isDefault = chkIsDefault.isSelected();

            CurrencyDA currencyDA = new CurrencyDA(currencyID, currencyName, buying, selling, isDefault);
            String buttonText = btnSave.getText();
            if (buttonText.equalsIgnoreCase(FormMode.Save.name())) {
                currencyDA.save();
                message("Saved Successfully");
                clear();
                 this.setNextCurrencyID();
            } else if (buttonText.equalsIgnoreCase(FormMode.Update.name())) {
                currencyDA.update();
                message("Updated Successfully");
            }
            this.dbAccess = currencyDA;
            this.editSuccessful = true;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void delete() {
        try {
            String currencyID = getText(txtCurrencyID, "Currency ID");
            CurrencyDA currencyDA = oCurrencyDA.get(currencyID);
            if (!warningOk("Confirm Delete", "You are about to delete a record with ID: " + currencyID + " Are you sure you want to continue?", "Remember this action cannot be un done")) {
                return;
            }
            if (currencyDA.delete()) {
                message("Deleted Successfully");
                this.clear();
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    @Override
    public void loadData() {
        try {
            String currencyID = getText(txtCurrencyID, "Currency ID");

            CurrencyDA currencyDA = oCurrencyDA.get(currencyID);
            txtCurrencyID.setText(currencyDA.getCurrencyID());
            txtCurrencyName.setText(currencyDA.getCurrencyName());
            txtBuying.setText(formatNumber(currencyDA.getBuying()));
            txtSelling.setText(formatNumber(currencyDA.getSelling()));
            chkIsDefault.setSelected(currencyDA.isIsDefault());

        } catch (Exception e) {
            errorMessage(e);
        }

    }

    private void setNextCurrencyID() {
        try {
            if (btnSave.getText().equalsIgnoreCase(FormMode.Save.name())) {
                txtCurrencyID.setText(oCurrencyDA.getNextCurrencyID(oCurrencyDA.getNextIdHelper()));
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

   

}
