/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.controllers;

import java.net.URL;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import static com.saburi.common.utils.FXUIUtils.*;
import com.saburi.common.utils.Utilities.FormMode;
import static com.saburi.common.utils.FXUIUtils.warningOk;
import com.saburi.finance.dbaccess.MeasureRelationDA;
import com.saburi.common.controllers.EditController;
import javafx.scene.control.TextField;
import javafx.scene.control.ComboBox;
import javafx.scene.control.MenuItem;
import com.saburi.finance.dbaccess.MeasureGroupDA;
import com.saburi.finance.entities.MeasureGroup;
import com.saburi.finance.utils.FinanceNavigate;
import com.saburi.finance.utils.FinanceObjectNames;
import com.saburi.common.entities.LookupData;
import com.saburi.finance.utils.FinanceEnums.UnitMeasureUsages;
import javafx.collections.FXCollections;

public class MeasureRelationController extends EditController {

    private final MeasureRelationDA oMeasureRelationDA = new MeasureRelationDA();
    @FXML
    private TextField txtMeasureRelationID;
    @FXML
    private ComboBox cboMeasureGroup;
    @FXML
    private MenuItem cmiSelectMeasureGroup;
    @FXML
    private ComboBox cboUnitMeasure;
    @FXML
    private MenuItem cmiSelectUnitMeasure;
    @FXML
    private TextField txtBaseSize;
    @FXML
    private ComboBox cboDefaultUsage;
    private final MeasureGroupDA oMeasureGroupDA = new MeasureGroupDA();

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            loadLookupData(cboUnitMeasure, FinanceObjectNames.UNITMEASURE);
            loadDBEntities(oMeasureGroupDA.getMeasureGroups(), cboMeasureGroup);
            cboDefaultUsage.setItems(FXCollections.observableArrayList(UnitMeasureUsages.values()));
            validateIteger(txtMeasureRelationID);
            validateIteger(txtBaseSize);
            formatInteger(txtMeasureRelationID);
            formatInteger(txtBaseSize);
            this.primaryKeyControl = txtMeasureRelationID;
            this.dbAccess = oMeasureRelationDA;
            this.restrainColumnConstraint = false;
            //this.prefSize = 300;
            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectMeasureGroup, oMeasureGroupDA, "MeasureGroup", "Measure Group", cboMeasureGroup, true);
            selectLookupData(cmiSelectUnitMeasure, FinanceObjectNames.UNITMEASURE, "Unit Measure", cboUnitMeasure, false);
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void save() {
        try {
            this.editSuccessful = false;
            int measureRelationID = getInt(txtMeasureRelationID, "Measure Relation ID");
            MeasureGroup measureGroup = (MeasureGroup) getEntity(cboMeasureGroup, "Measure Group");
            LookupData unitMeasure = (LookupData) getEntity(cboUnitMeasure, "Unit Measure");
            int baseSize = getInt(txtBaseSize, "Base Size");
            UnitMeasureUsages defaultUsage = (UnitMeasureUsages) getSelectedValue(cboDefaultUsage, "Default Usage");

            MeasureRelationDA measureRelationDA = new MeasureRelationDA(measureGroup, unitMeasure, baseSize, defaultUsage);
            String buttonText = btnSave.getText();
            if (buttonText.equalsIgnoreCase(FormMode.Save.name())) {
                measureRelationDA.save();
                message("Saved Successfully");
                clear();
            } else if (buttonText.equalsIgnoreCase(FormMode.Update.name())) {
                measureRelationDA.setMeasureRelationID(measureRelationID);
                measureRelationDA.update();
                message("Updated Successfully");
            }
            this.dbAccess = measureRelationDA;
            this.editSuccessful = true;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void delete() {
        try {
            int measureRelationID = getInt(txtMeasureRelationID, "Measure Relation ID");
            MeasureRelationDA measureRelationDA = oMeasureRelationDA.get(measureRelationID);
            if (!warningOk("Confirm Delete", "You are about to delete a record with ID: " + measureRelationID + " Are you sure you want to continue?", "Remember this action cannot be un done")) {
                return;
            }
            if (measureRelationDA.delete()) {
                message("Deleted Successfully");
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    @Override
    public void loadData() {
        try {
            int measureRelationID = getInt(txtMeasureRelationID, "Measure Relation ID");

            MeasureRelationDA measureRelationDA = oMeasureRelationDA.get(measureRelationID);
            txtMeasureRelationID.setText(String.valueOf(measureRelationDA.getMeasureRelationID()));
            cboMeasureGroup.setValue(measureRelationDA.getMeasureGroup());
            cboUnitMeasure.setValue(measureRelationDA.getUnitMeasure());
            txtBaseSize.setText(String.valueOf(measureRelationDA.getBaseSize()));
            cboDefaultUsage.setValue(measureRelationDA.getDefaultUsage());

        } catch (Exception e) {
            errorMessage(e);
        }

    }

}
