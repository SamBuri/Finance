/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.controllers;

import com.saburi.common.controllers.EditController;
import com.saburi.common.utils.CommonEnums.EntryModes;
import com.saburi.common.utils.EditCell;
import static com.saburi.common.utils.FXUIUtils.addRow;
import static com.saburi.common.utils.FXUIUtils.errorMessage;
import static com.saburi.common.utils.FXUIUtils.getDate;
import static com.saburi.common.utils.FXUIUtils.getDouble;
import static com.saburi.common.utils.FXUIUtils.getEntity;
import static com.saburi.common.utils.FXUIUtils.getSelectedItem;
import static com.saburi.common.utils.FXUIUtils.getSelectedValue;
import static com.saburi.common.utils.FXUIUtils.getText;
import static com.saburi.common.utils.FXUIUtils.loadDBEntities;
import static com.saburi.common.utils.FXUIUtils.message;
import static com.saburi.common.utils.FXUIUtils.selectItem;
import static com.saburi.common.utils.FXUIUtils.setTableEditable;
import static com.saburi.common.utils.FXUIUtils.validateNumber;
import static com.saburi.common.utils.FXUIUtils.warningOk;
import com.saburi.common.utils.NumberToWord;
import com.saburi.common.utils.Utilities.FormMode;
import static com.saburi.common.utils.Utilities.defortNumberOptional;
import static com.saburi.common.utils.Utilities.formatNumber;
import com.saburi.finance.dbaccess.BankAccountDA;
import com.saburi.finance.dbaccess.ChartAccountDA;
import java.net.URL;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import com.saburi.finance.dbaccess.JournalEntryDA;
import javafx.scene.control.TextField;
import javafx.scene.control.ComboBox;
import javafx.scene.control.MenuItem;
import com.saburi.finance.dbaccess.FinancialPeriodDA;
import javafx.scene.control.DatePicker;
import java.time.LocalDate;
import javafx.scene.control.TextArea;
import com.saburi.finance.utils.FinanceEnums.DocumentTypes;
import javafx.collections.FXCollections;
import com.saburi.finance.dbaccess.CurrencyDA;
import com.saburi.finance.dbaccess.CustomerDA;
import com.saburi.finance.dbaccess.ItemDA;
import com.saburi.finance.utils.FinanceEnums.PostStatus;
import javafx.scene.control.TableView;
import java.util.List;
import com.saburi.finance.dbaccess.JournalEntryDetailDA;
import com.saburi.finance.dbaccess.VendorDA;
import com.saburi.finance.entities.Currency;
import com.saburi.finance.entities.FinancialPeriod;
import com.saburi.finance.entities.JournalEntry;
import com.saburi.finance.utils.FinanceEnums.AccountActions;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TablePosition;
import javafx.collections.ObservableList;
import javafx.scene.control.Label;
import javafx.scene.control.cell.ComboBoxTableCell;
import com.saburi.finance.utils.FinanceEnums.AccountGroups;
import com.saburi.finance.utils.FinanceEnums.AccountTypes;
import com.saburi.finance.utils.FinanceEnums.JournalTypes;
import com.saburi.finance.utils.FinanceNavigate;

public class JournalEntryController extends EditController {

    private final JournalEntryDA oJournalEntryDA = new JournalEntryDA();
    @FXML
    private ComboBox cboFinancialPeriod;
    @FXML
    private MenuItem cmiSelectFinancialPeriod;
    @FXML
    private TextField txtJournalID;
    @FXML
    private DatePicker dtpEntryDate;
    @FXML
    private TextArea txaNarration;
    @FXML
    private ComboBox cboDocumentType;
    @FXML
    private TextField txtDocumentNo;
    @FXML
    private TextField txtReferenceNo;
    @FXML
    private ComboBox cboCurrency;
    @FXML
    private MenuItem cmiSelectCurrency;
    @FXML
    private TextField txtBaseAmount;
    @FXML
    private TextField txtExchangeRate;
    @FXML
    private TextField txtAmount;
    @FXML
    private TextArea txaAmountWords;
    @FXML
    private ComboBox cboPostStatus;
    @FXML
    private TableView<JournalEntryDetailDA> tblJournalEntryDetails;
    @FXML
    private MenuItem cmiSelectJournalAccount;
    private final FinancialPeriodDA oFinancialPeriodDA = new FinancialPeriodDA();
    private final CurrencyDA oCurrencyDA = new CurrencyDA();
    @FXML
    private TableColumn<JournalEntryDetailDA, AccountGroups> tbcJournalEntryDetailAccountGroup;
    @FXML
    private TableColumn<JournalEntryDetailDA, String> tbcJournalEntryDetailAccountID;

    @FXML
    private TableColumn<JournalEntryDetailDA, AccountActions> tbcJournalEntryDetailAccountAction;
    @FXML
    private TableColumn<JournalEntryDetailDA, String> tbcJournalEntryDetailAmount;
    @FXML
    private TableColumn<JournalEntryDetailDA, String> tbcJournalEntryDetailNotes;

    @FXML
    private TextField txtBalance;
    @FXML
    private Label lblBalanceStatus;

    private final ChartAccountDA ochartAccountDA = new ChartAccountDA();

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            loadDBEntities(oFinancialPeriodDA.getFinancialPeriods(), cboFinancialPeriod);
            cboDocumentType.setItems(FXCollections.observableArrayList(DocumentTypes.values()));
            loadDBEntities(oCurrencyDA.getCurrencys(), cboCurrency);

            cboPostStatus.setItems(FXCollections.observableArrayList(PostStatus.values()));
            this.cboPostStatus.setValue(PostStatus.Pending);
            this.cboPostStatus.disableProperty().set(true);
            validateNumber(txtBaseAmount);
            validateNumber(txtExchangeRate);
            validateNumber(txtAmount);
            tblJournalEntryDetails.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
            setTableEditable(tblJournalEntryDetails);
            addRow(tblJournalEntryDetails, new JournalEntryDetailDA());
            cmiSelectJournalAccount.setOnAction(e -> loadAccounts());
            this.primaryKeyControl = txtJournalID;
            this.dbAccess = oJournalEntryDA;
            this.restrainColumnConstraint = false;
//            this.minSize = 1000;
            cboFinancialPeriod.setOnAction(e -> this.setNextJournalID());
            setJournalEntryDetailAccountGroup();
            setJournalEntryDetailAccountID();
            setJournalEntryDetailAmount();
            setJournalEntryDetailsAccountAction();
            setJournalEntryDetailNotes();
            selectItem(FinanceNavigate.MAIN_CLASS,cmiSelectFinancialPeriod, new FinancialPeriodDA(), "Financial Period", "FinancialPeriod", 700, 400, cboFinancialPeriod, true);
            selectItem(FinanceNavigate.MAIN_CLASS,cmiSelectCurrency, new CurrencyDA(), "Currency", "Currency", 700, 400, cboCurrency, true);
            dtpEntryDate.setValue(LocalDate.now());
            cboCurrency.setOnAction(e -> {
                Currency currency = (Currency) getEntity(cboCurrency);
                if (currency != null) {
                    txtExchangeRate.setText(formatNumber(currency.getBuying()));
                    calculateTotalAmount();
                }
            });

        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }

        if (FinancialPeriodDA.getCurrentFinancialPeriodDA() != null) {
            cboFinancialPeriod.setValue(FinancialPeriodDA.getCurrentFinancialPeriodDA().getDBEntity());
            this.setNextJournalID();
        }

        cboCurrency.setValue(oCurrencyDA.getDefaultCurrency());
        setExchangeRate();
       
    }

    @Override
    protected void save() {
        try {
            this.editSuccessful = false;
            FinancialPeriod financialPeriod = (FinancialPeriod) getEntity(cboFinancialPeriod, "Financial Period");
            String journalID = getText(txtJournalID, "Journal ID");
            LocalDate entryDate = getDate(dtpEntryDate, "EntryDate");
            String narration = getText(txaNarration);
            DocumentTypes documentType = (DocumentTypes) getSelectedValue(cboDocumentType, "DocumentType");
            String documentNo =  getText(txtDocumentNo, "Document No");
            String referenceNo = getText(txtReferenceNo);
            Currency currency = (Currency) getEntity(cboCurrency, "Currency");
            double baseAmount = getDouble(txtBaseAmount, "Base Amount");
            double exchangeRate = getDouble(txtExchangeRate, "Exchange Rate");
            double amount = getDouble(txtAmount, "Amount");
            String amountWords = getText(txaAmountWords, "Amount In Words");
            PostStatus postStatus = (PostStatus) getSelectedValue(cboPostStatus, "PostStatus");

            double balance = getDouble(txtBalance, "Balance");
            if (balance != 0) {
                throw new Exception("The Debit and Credit entries do not balance");
            }

            List<JournalEntryDetailDA> journalEntryDetailDAs = tblJournalEntryDetails.getItems();
            journalEntryDetailDAs.removeIf((p) -> p.getAccountID() == null);

            JournalEntryDA journalEntryDA = new JournalEntryDA(financialPeriod, journalID, entryDate, narration, documentType,documentNo, referenceNo, currency, baseAmount,
                    exchangeRate, amount, amountWords, postStatus, JournalTypes.General, EntryModes.Manual);
            journalEntryDetailDAs.forEach(a -> a.setJournalEntry((JournalEntry) journalEntryDA.getDBEntity()));
            journalEntryDA.setJournalEntryDetailsDAs(journalEntryDetailDAs);
            String buttonText = btnSave.getText();
            if (buttonText.equalsIgnoreCase(FormMode.Save.name())) {
                journalEntryDA.save();
                message("Saved Successfully");
                clear();
            } else if (buttonText.equalsIgnoreCase(FormMode.Update.name())) {
                journalEntryDA.update();
                message("Updated Successfully");
            }
            this.dbAccess = journalEntryDA;
            this.editSuccessful = true;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void delete() {
        try {
            String journalID = getText(txtJournalID, "Journal ID");
            JournalEntryDA journalEntryDA = oJournalEntryDA.get(journalID);
            if (!warningOk("Confirm Delete", "You are about to delete a record with ID: " + journalID + " Are you sure you want to continue?", "Remember this action cannot be un done")) {
                return;
            }
            if (journalEntryDA.delete()) {
                message("Deleted Successfully");
                this.clear();
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    @Override
    public void loadData() {
        try {
            String journalID = getText(txtJournalID, "Journal ID");

            JournalEntryDA journalEntryDA = oJournalEntryDA.get(journalID);
            cboFinancialPeriod.setValue(journalEntryDA.getFinancialPeriod());
            txtJournalID.setText(journalEntryDA.getJournalID());
            dtpEntryDate.setValue((LocalDate) journalEntryDA.getEntryDate());
            txaNarration.setText(journalEntryDA.getNarration());
            cboDocumentType.setValue(journalEntryDA.getDocumentType());
            txtDocumentNo.setText(journalEntryDA.getDocumentNo());
            txtReferenceNo.setText(journalEntryDA.getReferenceNo());
            cboCurrency.setValue(journalEntryDA.getCurrency());
            txtBaseAmount.setText(formatNumber(journalEntryDA.getBaseAmount()));
            txtExchangeRate.setText(formatNumber(journalEntryDA.getExchangeRate()));
            txtAmount.setText(formatNumber(journalEntryDA.getAmount()));
            txaAmountWords.setText(journalEntryDA.getAmountWords());
            cboPostStatus.setValue(journalEntryDA.getPostStatus());
            tblJournalEntryDetails.setItems(FXCollections.observableArrayList(journalEntryDA.getJournalEntryDetailsDAs()));
            addRow(tblJournalEntryDetails, new JournalEntryDetailDA());
        } catch (Exception e) {
            errorMessage(e);
        }

    }

    @Override
     protected void clear() {
        txtJournalID.clear();
        dtpEntryDate.setValue(null);
        txaNarration.clear();
        cboDocumentType.setValue(null);
        txtDocumentNo.clear();
        txtReferenceNo.clear();
        txtBaseAmount.clear();
        txtExchangeRate.clear();
        txtAmount.clear();
        txaAmountWords.clear();
        cboPostStatus.setValue(PostStatus.Pending);
        tblJournalEntryDetails.getItems().clear();
        cboCurrency.setValue(oCurrencyDA.getDefaultCurrency());
        setExchangeRate();
        this.setNextJournalID();
        addRow(tblJournalEntryDetails, new JournalEntryDetailDA());
    }

    private void setNextJournalID() {
        try {
            if (btnSave.getText().equalsIgnoreCase(FormMode.Save.name())) {
                FinancialPeriod financialPeriod = (FinancialPeriod) getEntity(cboFinancialPeriod);
                if (financialPeriod != null) {
                    txtJournalID.setText(oJournalEntryDA.getNextJournalID(oJournalEntryDA.getNextIdHelper(financialPeriod), financialPeriod.getPeriodID()));
                }
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    private void setJournalEntryDetailAccountGroup() {
        tbcJournalEntryDetailAccountGroup.setCellFactory(ComboBoxTableCell.forTableColumn(AccountGroups.values()));
        tbcJournalEntryDetailAccountGroup.setOnEditCommit(event -> {
            AccountGroups accountGroup = event.getNewValue() != null ? event.getNewValue()
                    : event.getOldValue();
            ((JournalEntryDetailDA) event.getTableView().getItems()
                    .get(event.getTablePosition().getRow()))
                    .setAccountGroup(accountGroup);
            tblJournalEntryDetails.refresh();
            addRow(tblJournalEntryDetails, new JournalEntryDetailDA());
        });
    }

    private void setJournalEntryDetailAccountID() {
//        tbcJournalEntryDetailAccountID.setCellFactory(EditCell.StringTableColumn());
//        tbcJournalEntryDetailAccountID.setOnEditCommit(event -> {
//            final String value = event.getNewValue() != null ? event.getNewValue()
//                    : event.getOldValue();
//            ((JournalEntryDetailDA) event.getTableView().getItems()
//                    .get(event.getTablePosition().getRow()))
//                    .setAccountID(value);
//            tblJournalEntryDetails.refresh();
//            addRow(tblJournalEntryDetails, new JournalEntryDetailDA());
//        });
    }

//    private void setJournalEntryDetailsChartAccount() {
//
//        tbcJournalEntryDetailsChartAccountID.setOnEditCommit(event -> {
//            final String value = event.getNewValue() != null ? event.getNewValue()
//                    : event.getOldValue();
//            ChartAccount chartAccount = ochartAccountDA.getChartAccount(value);
//            if (chartAccount != null) {
//                if (tblJournalEntryDetails.getItems().stream().map(JournalEntryDetailDA::getChartAccount).collect(Collectors.toList()).contains(chartAccount)) {
//
//                    Platform.runLater(() -> message("The record with id: " + chartAccount.getId() + " is already selected", (Node) (event.getSource())));
//                    event.consume();
//                    return;
//
//                }
//            } else {
//
//                Platform.runLater(() -> message(tblJournalEntryDetails.getScene().getWindow(), "No account found with the id " + value));
//                event.consume();
//                return;
//            }
//            JournalEntryDetailDA journalEntryDetailsDA = ((JournalEntryDetailDA) event.getTableView().getItems()
//                    .get(event.getTablePosition().getRow()));
//            journalEntryDetailsDA.setChartAccount(chartAccount);
//            journalEntryDetailsDA.setJournalEntryDetailID(txtJournalID.getText() + value);
//            tblJournalEntryDetails.refresh();
//            addRow(tblJournalEntryDetails, new JournalEntryDetailDA());
//
//        });
//    }
    private void setJournalEntryDetailAmount() {
        tbcJournalEntryDetailAmount.setCellFactory(EditCell.StringTableColumn());
        tbcJournalEntryDetailAmount.setOnEditCommit(event -> {
            final String value = event.getNewValue() != null ? event.getNewValue()
                    : event.getOldValue();
            ((JournalEntryDetailDA) event.getTableView().getItems()
                    .get(event.getTablePosition().getRow()))
                    .setAmount(defortNumberOptional(value));
            tblJournalEntryDetails.refresh();
            calculateTotalAmount();
            addRow(tblJournalEntryDetails, new JournalEntryDetailDA());
        });
    }

    private void setJournalEntryDetailsAccountAction() {
        tbcJournalEntryDetailAccountAction.setCellFactory(ComboBoxTableCell.forTableColumn(AccountActions.values()));
        tbcJournalEntryDetailAccountAction.setOnEditCommit(event -> {
            final AccountActions value = event.getNewValue() != null ? event.getNewValue()
                    : event.getOldValue();
            ((JournalEntryDetailDA) event.getTableView().getItems()
                    .get(event.getTablePosition().getRow()))
                    .setAccountAction((AccountActions) value);
            tblJournalEntryDetails.refresh();
            calculateTotalAmount();
            addRow(tblJournalEntryDetails, new JournalEntryDetailDA());
        });
    }

    private void setJournalEntryDetailNotes() {
        tbcJournalEntryDetailNotes.setCellFactory(EditCell.StringTableColumn());
        tbcJournalEntryDetailNotes.setOnEditCommit(event -> {
            final String value = event.getNewValue() != null ? event.getNewValue()
                    : event.getOldValue();
            ((JournalEntryDetailDA) event.getTableView().getItems()
                    .get(event.getTablePosition().getRow()))
                    .setNotes(value);
            tblJournalEntryDetails.refresh();
            addRow(tblJournalEntryDetails, new JournalEntryDetailDA());
        });
    }

    private void loadAccounts() {
        try {
            ObservableList<JournalEntryDetailDA> selectedItems = tblJournalEntryDetails.getSelectionModel().getSelectedItems();
            if (selectedItems.isEmpty() || selectedItems.size() > 1) {
                return;
            }

            final TablePosition<JournalEntryDetailDA, String> focusedCell = tblJournalEntryDetails
                    .focusModelProperty().get().focusedCellProperty().get();
            if (focusedCell == null) {
                return;
            }

            String accountID = "";
            String accountName = "";
            AccountTypes accountType = null;

            JournalEntryDetailDA selectedJournalEntryDetailDA = tblJournalEntryDetails.getItems().get(focusedCell.getRow());
            AccountGroups accountGroup = (AccountGroups) selectedJournalEntryDetailDA.getAccountGroup();
            if (accountGroup == null) {
                message("You must select Account Group");
                return;
            }
            switch (accountGroup) {
                case COA:
                    ChartAccountDA chartAccountDA = (ChartAccountDA) getSelectedItem(FinanceNavigate.MAIN_CLASS,new ChartAccountDA(), "ChartAccount", "Chart of Accounts", 400, 450, tblJournalEntryDetails, false);
                    if (chartAccountDA == null) {
                        return;
                    }
                    accountID = chartAccountDA.getAccountID();
                    accountName = chartAccountDA.getAccountName();
                    accountType = (AccountTypes) chartAccountDA.getAccountType();
                    break;
                case Customer:
                    CustomerDA customerDA = (CustomerDA) getSelectedItem(FinanceNavigate.MAIN_CLASS,new CustomerDA(), "Customer", "Customer", 400, 450, tblJournalEntryDetails, false);
                    if (customerDA == null) {
                        return;
                    }
                    accountID = customerDA.getCustomerID();
                    accountName = customerDA.getCustomerName();
                    accountType = AccountTypes.Asset;
                    break;
                case Item:
                    ItemDA itemDA = (ItemDA) getSelectedItem(FinanceNavigate.MAIN_CLASS, new ItemDA(), "Item", "Items", 400, 450, tblJournalEntryDetails, false);
                    if (itemDA == null) {
                        return;
                    }
                    accountID = itemDA.getItemID();
                    accountName = itemDA.getItemName();
                    accountType = AccountTypes.Asset;
                    break;
                case Vender:
                    VendorDA vender = (VendorDA) getSelectedItem(FinanceNavigate.MAIN_CLASS, new VendorDA(), "Vendor", "Vendors", 400, 450, tblJournalEntryDetails, false);
                    if (vender == null) {
                        return;
                    }
                    accountID = vender.getVendorID();
                    accountName = vender.getVendorName();
                    accountType = AccountTypes.Liability;
                    break;

                case Bank:
                    BankAccountDA banKAccountDA = (BankAccountDA) getSelectedItem(FinanceNavigate.MAIN_CLASS, new BankAccountDA(), "BankAccount", "Bank Accounts", 400, 450, tblJournalEntryDetails, false);
                    if (banKAccountDA == null) {
                        return;
                    }
                    accountID = banKAccountDA.getBankAccountID();
                    accountName = banKAccountDA.getBankAccountName();
                    accountType = AccountTypes.Asset;
                    break;
                default:
                    break;
            }

            final String ac = accountID;
            final AccountGroups acgGroups = accountGroup;

//             if(tblJournalEntryDetails.getItems().stream()
//                     .filter((p)->p.getAccountID().equalsIgnoreCase(ac))
//                     .filter((p)->p.getAccountGroup().equals(acgGroups))
//                     .count()>0){
//                message("The Account: "+accountName+" for Account Group "+accountGroup.name()+" is already selected");
//                return;
//            }
            selectedJournalEntryDetailDA.setAccountID(accountID);
            selectedJournalEntryDetailDA.setAccountName(accountName);
            selectedJournalEntryDetailDA.setAccountType(accountType);

            tblJournalEntryDetails.getItems().set(focusedCell.getRow(), selectedJournalEntryDetailDA);
            tblJournalEntryDetails.edit(focusedCell.getRow(), focusedCell.getTableColumn());

        } catch (Exception e) {
            errorMessage(e);
        }
    }

    private void calculateTotalAmount() {

        try {

            double credit = 0;
            double debit = 0;

            ObservableList<JournalEntryDetailDA> items = tblJournalEntryDetails.getItems();
            if (items.isEmpty()) {
                return;
            }

            for (JournalEntryDetailDA e : items) {

                AccountActions accountAction = (AccountActions) e.getAccountAction();
                double amount = e.getAmount();

                if (accountAction != null) {

                    if (accountAction.equals(AccountActions.Credit)) {
                        credit += amount;
                    } else if (accountAction.equals(AccountActions.Debit)) {
                        debit += amount;
                    }
                }

            }

            double ExchangeRate = defortNumberOptional(txtExchangeRate.getText());

            double amount = debit * ExchangeRate;
            this.txtBaseAmount.setText(formatNumber(debit));
            this.txtAmount.setText(formatNumber(amount));
            double balance = debit - credit;
            txtBalance.setText(formatNumber(balance));

            txaAmountWords.setText(NumberToWord.toWords(amount));
            if (balance != 0) {
                lblBalanceStatus.setText("Not Balanced");
            } else {
                lblBalanceStatus.setText("Balanced");
            }

        } catch (Exception e) {
            errorMessage(e);
        }

    }

    private void setExchangeRate() {
        Currency currency = (Currency) getEntity(cboCurrency);
        if (currency != null) {
            txtExchangeRate.setText(formatNumber(currency.getBuying()));
            calculateTotalAmount();
        }
    }

   
}
