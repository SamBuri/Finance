/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.controllers;

import java.net.URL;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import static com.saburi.common.utils.FXUIUtils.*;
import com.saburi.common.utils.Utilities.FormMode;
import static com.saburi.common.utils.FXUIUtils.warningOk;
import com.saburi.finance.dbaccess.CustomerDA;
import com.saburi.common.controllers.EditController;
import javafx.scene.control.TextField;
import javafx.scene.control.ComboBox;
import javafx.scene.control.MenuItem;
import com.saburi.finance.utils.FinanceObjectNames;
import com.saburi.common.entities.LookupData;
import javafx.scene.control.TextArea;
import com.saburi.finance.utils.FinanceNavigate;
import com.saburi.finance.dbaccess.CustomerPostingGroupDA;
import com.saburi.finance.entities.CustomerPostingGroup;
import javafx.scene.control.CheckBox;
import static com.saburi.common.utils.Utilities.formatNumber;
import javafx.scene.control.TableView;
import java.util.List;
import javafx.collections.FXCollections;
import com.saburi.finance.entities.Customer;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TablePosition;
import javafx.collections.ObservableList;
import com.saburi.common.utils.EditCell;
import java.io.IOException;
import java.util.stream.Collectors;
import javafx.application.Platform;
import javafx.beans.binding.Bindings;

public class CustomerController extends EditController {

    private final CustomerDA oCustomerDA = new CustomerDA();
    @FXML
    private TextField txtCustomerID;
    @FXML
    private TextField txtCustomerName;
    @FXML
    private ComboBox cboCustomerCategory;
    @FXML
    private MenuItem cmiSelectCustomerCategory;
    @FXML
    private TextField txtPhoneNo;
    @FXML
    private TextField txtEmail;
    @FXML
    private TextArea txaAddress;
    @FXML
    private ComboBox cboPriceGroup;
    @FXML
    private MenuItem cmiSelectPriceGroup;
    @FXML
    private ComboBox cboDefaultSponser;
    @FXML
    private MenuItem cmiSelectDefaultSponser;
    @FXML
    private ComboBox cboCustomerPostingGroup;
    @FXML
    private MenuItem cmiSelectCustomerPostingGroup;
    @FXML
    private ComboBox cboBusinessGroup;
    @FXML
    private MenuItem cmiSelectBusinessGroup;
    @FXML
    private ComboBox cboVATBusinessGroup;
    @FXML
    private MenuItem cmiSelectVATBusinessGroup;
    @FXML
    private CheckBox chkSponser;
    @FXML
    private CheckBox chkSponserOnly;
    @FXML
    private CheckBox chkAllowCredit;
    @FXML
    private TextField txtReferenceNo;
    @FXML
    private TextField txtBalance;
    @FXML
    private TableView<CustomerDA> tblPossibleSponsers;
    @FXML
    private MenuItem cmiSelectPossibleSponsers;
    private final CustomerPostingGroupDA oCustomerPostingGroupDA = new CustomerPostingGroupDA();
    @FXML
    private TableColumn<CustomerDA, String> tbcCustomerCustomerID;

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            loadLookupData(cboCustomerCategory, FinanceObjectNames.CUSTOMERCATEGORY);
            loadLookupData(cboPriceGroup, FinanceObjectNames.PRICEGROUP);
            loadLookupData(cboBusinessGroup, FinanceObjectNames.BUSINESSGROUP);
            loadLookupData(cboVATBusinessGroup, FinanceObjectNames.VATBUSINESSGROUP);
            loadDBEntities(oCustomerDA.getSponseringCustomers(), cboDefaultSponser);
            loadDBEntities(oCustomerPostingGroupDA.getCustomerPostingGroups(), cboCustomerPostingGroup);

            validateNumber(txtBalance);
            formatValue(txtBalance);
            tblPossibleSponsers.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
            setTableEditable(tblPossibleSponsers);
            addRow(tblPossibleSponsers, new CustomerDA());
            setCustomerCustomer();
            cmiSelectPossibleSponsers.setOnAction(e -> loadPossibleSponsers());
            this.primaryKeyControl = txtCustomerID;
            this.dbAccess = oCustomerDA;
            this.restrainColumnConstraint = false;
            //this.prefSize = 300;
            this.setNextCustomerID();
            selectLookupData(cmiSelectCustomerCategory, FinanceObjectNames.CUSTOMERCATEGORY, "Customer Category", cboCustomerCategory, false);
            selectLookupData(cmiSelectPriceGroup, FinanceObjectNames.PRICEGROUP, "Price Group", cboPriceGroup, false);
            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectDefaultSponser, oCustomerDA, oCustomerDA.getSponseringCustomerDAs(), "Customer", "Default Sponser", cboDefaultSponser, true);
            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectCustomerPostingGroup, oCustomerPostingGroupDA, "CustomerPostingGroup", "Customer Posting Group", cboCustomerPostingGroup, true);
            selectLookupData(cmiSelectBusinessGroup, FinanceObjectNames.BUSINESSGROUP, "Business Group", cboBusinessGroup, false);
            selectLookupData(cmiSelectVATBusinessGroup, FinanceObjectNames.VATBUSINESSGROUP, "VAT Business Group", cboVATBusinessGroup, false);
            chkSponserOnly.disableProperty().bind(Bindings.not(chkSponser.selectedProperty()));
            chkSponser.setOnAction(e -> {
                if (!chkSponser.isSelected()) {
                    chkSponserOnly.setSelected(false);
                }
            });
        } catch (IOException e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void save() {
        try {
            this.editSuccessful = false;
            String customerID = getText(txtCustomerID, "Customer ID");
            String customerName = getText(txtCustomerName, "Customer Name");
            LookupData customerCategory = (LookupData) getEntity(cboCustomerCategory, "Customer Category");
            String phoneNo = getText(txtPhoneNo, "Phone No");
            String email = getText(txtEmail);
            String address = getText(txaAddress);
            LookupData priceGroup = (LookupData) getEntity(cboPriceGroup);
            Customer defaultSponser = (Customer) getEntity(cboDefaultSponser);
            CustomerPostingGroup customerPostingGroup = (CustomerPostingGroup) getEntity(cboCustomerPostingGroup, "Customer Posting Group");
            LookupData businessGroup = (LookupData) getEntity(cboBusinessGroup, "Business Group");
            LookupData vATBusinessGroup = (LookupData) getEntity(cboVATBusinessGroup, "VAT Business Group");
            boolean sponser = chkSponser.isSelected();
            boolean sponserOnly = chkSponserOnly.isSelected();
            boolean allowCredit = chkAllowCredit.isSelected();
            String referenceNo = getText(txtReferenceNo);
            double balance = getDouble(txtBalance);
            List<CustomerDA> possibleSponsersDAs = tblPossibleSponsers.getItems();
            possibleSponsersDAs.removeIf((p) -> p.getCustomerID() == null);

            CustomerDA customerDA = new CustomerDA(customerID, customerName, customerCategory, phoneNo, email, address, priceGroup, defaultSponser, customerPostingGroup, businessGroup, vATBusinessGroup, sponser, sponserOnly, allowCredit, referenceNo, balance);

            customerDA.setPossibleSponsersDAs(possibleSponsersDAs);
            String buttonText = btnSave.getText();
            if (buttonText.equalsIgnoreCase(FormMode.Save.name())) {
                customerDA.save();
                message("Saved Successfully");
                clear();
                addRow(tblPossibleSponsers, new CustomerDA());
                this.setNextCustomerID();
            } else if (buttonText.equalsIgnoreCase(FormMode.Update.name())) {
                customerDA.update();
                message("Updated Successfully");
            }
            this.dbAccess = customerDA;
            this.editSuccessful = true;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void delete() {
        try {
            String customerID = getText(txtCustomerID, "Customer ID");
            CustomerDA customerDA = oCustomerDA.get(customerID);
            if (!warningOk("Confirm Delete", "You are about to delete a record with ID: " + customerID + " Are you sure you want to continue?", "Remember this action cannot be un done")) {
                return;
            }
            if (customerDA.delete()) {
                message("Deleted Successfully");
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    @Override
    public void loadData() {
        try {
            String customerID = getText(txtCustomerID, "Customer ID");

            CustomerDA customerDA = oCustomerDA.get(customerID);
            txtCustomerID.setText(customerDA.getCustomerID());
            txtCustomerName.setText(customerDA.getCustomerName());
            cboCustomerCategory.setValue(customerDA.getCustomerCategory());
            txtPhoneNo.setText(customerDA.getPhoneNo());
            txtEmail.setText(customerDA.getEmail());
            txaAddress.setText(customerDA.getAddress());
            cboPriceGroup.setValue(customerDA.getPriceGroup());
            cboDefaultSponser.setValue(customerDA.getDefaultSponser());
            cboCustomerPostingGroup.setValue(customerDA.getCustomerPostingGroup());
            cboBusinessGroup.setValue(customerDA.getBusinessGroup());
            cboVATBusinessGroup.setValue(customerDA.getVATBusinessGroup());
            chkSponser.setSelected(customerDA.isSponser());
            chkSponserOnly.setSelected(customerDA.isSponserOnly());
            chkAllowCredit.setSelected(customerDA.isAllowCredit());
            txtReferenceNo.setText(customerDA.getReferenceNo());
            txtBalance.setText(formatNumber(customerDA.getBalance()));
            tblPossibleSponsers.setItems(FXCollections.observableArrayList(customerDA.getPossibleSponsersDAs()));
            addRow(tblPossibleSponsers, new CustomerDA());

        } catch (Exception e) {
            errorMessage(e);
        }

    }

    private void setNextCustomerID() {
        try {
            if (btnSave.getText().equalsIgnoreCase(FormMode.Save.name())) {
                txtCustomerID.setText(oCustomerDA.getNextCustomerID(oCustomerDA.getNextIdHelper()));
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    private void setCustomerCustomer() {
        tbcCustomerCustomerID.setCellFactory(EditCell.StringTableColumn());
        tbcCustomerCustomerID.setOnEditCommit(event -> {
            final String value = event.getNewValue() != null ? event.getNewValue()
                    : event.getOldValue();
            Customer customer = oCustomerDA.getCustomer(value);
            if (customer == null) {
                Platform.runLater(() -> {
                    message("No Customer with Id " + value + " found");
                    tblPossibleSponsers.getItems().set(event.getTablePosition().getRow(), new CustomerDA());
                    tblPossibleSponsers.refresh();

                });
                return;
            }
            if (!customer.isSponser()) {
                Platform.runLater(() -> {
                    message("The customer" + customer.getCustomerName() + " is not a sponser. You can't use it");
                    tblPossibleSponsers.getItems().set(event.getTablePosition().getRow(), new CustomerDA());
                    tblPossibleSponsers.refresh();
                });
                return;
            }

            CustomerDA customerDA = new CustomerDA(customer);
            if (tblPossibleSponsers.getItems()
                    .parallelStream()
                    .filter(p->p.equals(customerDA))
                    .collect(Collectors.toList())
                    .size()>1
                    ) {
                Platform.runLater(() -> {
                    message("Customer : " + customerDA.getCustomerName() + " is already selected");
                    tblPossibleSponsers.getItems().set(event.getTablePosition().getRow(), new CustomerDA());
                    tblPossibleSponsers.refresh();
                });
                return;
            }

            tblPossibleSponsers.getItems().set(event.getTablePosition().getRow(), customerDA);
            tblPossibleSponsers.refresh();
            addRow(tblPossibleSponsers, new CustomerDA());
        });
    }

    private void loadPossibleSponsers() {
        try {
            ObservableList<CustomerDA> selectedItems = tblPossibleSponsers.getSelectionModel().getSelectedItems();
            if (selectedItems.isEmpty() || selectedItems.size() > 1) {
                return;
            }
            CustomerDA possibleSponsersDA = (CustomerDA) getSelectedItem(FinanceNavigate.MAIN_CLASS, new CustomerDA(), oCustomerDA.getSponseringCustomerDAs(), "Customer", "Possible Sponsers", 400, 450, tblPossibleSponsers, false);

            if (possibleSponsersDA == null) {
                return;
            }

            if (tblPossibleSponsers.getItems().contains(possibleSponsersDA)) {
                throw new Exception("The record with id: " + possibleSponsersDA.getId() + " is already selected");
            }

            final TablePosition<CustomerDA, String> focusedCell = tblPossibleSponsers
                    .focusModelProperty().get().focusedCellProperty().get();
            tblPossibleSponsers.getItems().set(focusedCell.getRow(), possibleSponsersDA);
            tblPossibleSponsers.refresh();
            addRow(tblPossibleSponsers, new CustomerDA());
        } catch (Exception e) {
            errorMessage(e);
        }
    }

}
