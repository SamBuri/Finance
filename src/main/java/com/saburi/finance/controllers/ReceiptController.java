/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.controllers;

import com.itextpdf.text.PageSize;
import com.saburi.common.controllers.EditController;
import com.saburi.common.utils.CommonEnums.NumericDataTypes;
import static com.saburi.common.utils.FXUIUtils.addRow;
import static com.saburi.common.utils.FXUIUtils.errorMessage;
import static com.saburi.common.utils.FXUIUtils.formatDatePicker;
import static com.saburi.common.utils.FXUIUtils.formatValue;
import static com.saburi.common.utils.FXUIUtils.getDate;
import static com.saburi.common.utils.FXUIUtils.getDouble;
import static com.saburi.common.utils.FXUIUtils.getEntity;
import static com.saburi.common.utils.FXUIUtils.getSelectedValue;
import static com.saburi.common.utils.FXUIUtils.getText;
import static com.saburi.common.utils.FXUIUtils.loadDBEntities;
import static com.saburi.common.utils.FXUIUtils.message;
import static com.saburi.common.utils.FXUIUtils.selectItem;
import static com.saburi.common.utils.FXUIUtils.selectPrevious;
import static com.saburi.common.utils.FXUIUtils.validateNumber;
import static com.saburi.common.utils.FXUIUtils.warningOK;
import static com.saburi.common.utils.FXUIUtils.warningOk;
import com.saburi.common.utils.JavaFXPDF;
import com.saburi.common.utils.NumberToWord;
import com.saburi.common.utils.PrintableColumn;
import com.saburi.common.utils.Utilities.FormMode;
import static com.saburi.common.utils.Utilities.defortNumberOptional;
import static com.saburi.common.utils.Utilities.formatDate;
import static com.saburi.common.utils.Utilities.formatNumber;
import com.saburi.finance.dbaccess.BankAccountDA;
import java.net.URL;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import com.saburi.finance.dbaccess.ReceiptDA;
import javafx.scene.control.TextField;
import javafx.scene.control.DatePicker;
import java.time.LocalDate;
import javafx.scene.control.ComboBox;
import javafx.scene.control.MenuItem;
import com.saburi.finance.dbaccess.CustomerDA;
import com.saburi.finance.utils.FinanceEnums.PayModes;
import javafx.collections.FXCollections;
import com.saburi.finance.dbaccess.CurrencyDA;
import javafx.scene.control.TextArea;
import javafx.scene.control.TableView;
import java.util.List;
import com.saburi.finance.dbaccess.ReceiptInvoiceDA;
import com.saburi.finance.entities.BankAccount;
import com.saburi.finance.entities.Currency;
import com.saburi.finance.entities.Customer;
import com.saburi.finance.entities.Receipt;
import com.saburi.finance.utils.FinanceNavigate;
import javafx.scene.control.TablePosition;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;
import javafx.beans.value.ObservableValue;
import javafx.scene.control.TableColumn;
import javafx.scene.input.KeyCode;

public class ReceiptController extends EditController {
    
    private final ReceiptDA oReceiptDA = new ReceiptDA();
    @FXML
    private TextField txtReceiptID;
    @FXML
    private DatePicker dtpReceiptDate;
    @FXML
    private ComboBox cboCustomer;
    @FXML
    private MenuItem cmiSelectCustomer;
    @FXML
    private ComboBox cboPayMode;
    @FXML
    private ComboBox cboBankAcccount;
    @FXML
    private MenuItem cmiSelectBankAcccount;
    @FXML
    private TextField txtTotalBill;
    @FXML
    private TextField txtAmountTered;
    @FXML
    private ComboBox cboCurrency;
    @FXML
    private MenuItem cmiSelectCurrency;
    @FXML
    private TextField txtExchangeRate;
    @FXML
    private TextField txtChangeGiven;
    @FXML
    private TextField txtAmountPaid;
    @FXML
    private TextArea txaAmountWords;
    @FXML
    private TableView<ReceiptInvoiceDA> tblReceiptInvoices;
   
    private final CustomerDA oCustomerDA = new CustomerDA();
    private final BankAccountDA oBankAccountDA = new BankAccountDA();
    private final CurrencyDA oCurrencyDA = new CurrencyDA();
    private Customer selectedCustomer;
    @FXML
    private TableColumn tbcReceiptInvoiceInvoiceID, tbcReceiptInvoiceInvoiceAmount, tbcReceiptInvoiceAmount;
    
    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            
            loadDBEntities(oCustomerDA.getCustomers(), cboCustomer);
            cboPayMode.setItems(FXCollections.observableArrayList(PayModes.values()));
            loadDBEntities(cboBankAcccount);
            loadDBEntities(oCurrencyDA.getCurrencys(), cboCurrency);
            formatDatePicker(dtpReceiptDate);
            validateNumber(txtTotalBill);
            validateNumber(txtAmountTered);
            validateNumber(txtExchangeRate);
            validateNumber(txtChangeGiven);
            validateNumber(txtAmountPaid);
            formatValue(txtTotalBill);
            formatValue(txtAmountTered);
            formatValue(txtExchangeRate);
            formatValue(txtChangeGiven);
            formatValue(txtAmountPaid);
            dtpReceiptDate.setValue(LocalDate.now());
            tblReceiptInvoices.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
            setTableEditable();
            addRow(tblReceiptInvoices, new ReceiptInvoiceDA());
            this.primaryKeyControl = txtReceiptID;
            this.dbAccess = oReceiptDA;
            this.restrainColumnConstraint = false;
            this.prefSize = 620;
            this.setNextReceiptID();
            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectCustomer, new CustomerDA(), "Customer", "Customer", 700, 400, cboCustomer, false);
            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectBankAcccount, oBankAccountDA, "BankAccount", "Bank Account", 700, 400, cboBankAcccount, false);
            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectCurrency, new CurrencyDA(), "Currency", "Currency", 700, 400, cboCurrency, true);
            
            txtAmountTered.textProperty().addListener((ObservableValue<? extends String> observable, String oldValue, String newValue) -> {
                if (!newValue.matches("\\d*\\.")) {
                    txtAmountTered.setText(newValue.replaceAll("[^\\d*\\.\\,]", ""));
                    calculateTotalAmount();
                }
            });
            
            txtAmountPaid.textProperty().addListener((ObservableValue<? extends String> observable, String oldValue, String newValue) -> {
                if (!newValue.matches("\\d*\\.")) {
                    txtAmountPaid.setText(newValue.replaceAll("[^\\d*\\.\\,]", ""));
                    calculateReceiptInvoiceAmount();
                }
            });
            
            cboCurrency.setValue(oCurrencyDA.getDefaultCurrency());
            setExchangeRate();
            cboCurrency.setOnAction(e -> {
                Currency currency = (Currency) getEntity(cboCurrency);
                if (currency != null) {
                    txtExchangeRate.setText(formatNumber(currency.getBuying()));
                    calculateTotalAmount();
                }
            });
            
            cboCustomer.setOnAction(e -> {
                this.selectedCustomer = (Customer) getEntity(cboCustomer);
                List<ReceiptInvoiceDA> receiptInvoiceDAs = new CustomerDA(this.selectedCustomer).getToCreateDueReceiptInvoiceDAs();
                tblReceiptInvoices.setItems(FXCollections.observableList(receiptInvoiceDAs));
                double totalBill = receiptInvoiceDAs.stream()
                        .mapToDouble(ReceiptInvoiceDA::getInvoiceAmount)
                        .sum();
                txtTotalBill.setText(formatNumber(totalBill));
                txtAmountTered.setText(formatNumber(totalBill));
                
            });
            
            cboPayMode.setOnAction(e -> {
                PayModes payMode = (PayModes) cboPayMode.getValue();
                if (payMode == null) {
                    return;
                }
                List<BankAccount> bankAccounts = oBankAccountDA.getBankAccounts(payMode);
                loadDBEntities(bankAccounts, cboBankAcccount);
                int size = bankAccounts.size();
                if (size == 1) {
                    cboBankAcccount.getSelectionModel().select(bankAccounts.get(0));
                } else if (size > 1) {
                    BankAccount defaultBankAccount = bankAccounts.stream().filter((p) -> p.isisDefault() == true).findAny().orElse(null);
                    cboBankAcccount.setValue(defaultBankAccount);
                    
                }
            });
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }
    
    @Override
    protected void save() {
        try {
            this.editSuccessful = false;
            String receiptID = getText(txtReceiptID, "Receipt ID");
            LocalDate receiptDate = getDate(dtpReceiptDate, "Receipt Date");
            Customer customer = (Customer) getEntity(cboCustomer, "Customer");
            PayModes payMode = (PayModes) getSelectedValue(cboPayMode, "Pay Mode");
            BankAccount bankAcccount = (BankAccount) getEntity(cboBankAcccount, "Account");
            double totalBill = getDouble(txtTotalBill, "Total Bill");
            double amountTered = getDouble(txtAmountTered, "Amount Tendered");
            Currency currency = (Currency) getEntity(cboCurrency, "Currency");
            double exchangeRate = getDouble(txtExchangeRate, "Exchange Rate");
            double changeGiven = getDouble(txtChangeGiven, "Change Given");
            double amountPaid = getDouble(txtAmountPaid, "Amount Paid");
            String amountWords = getText(txaAmountWords, "Amount Words");
            List<ReceiptInvoiceDA> receiptInvoicesDAs = tblReceiptInvoices.getItems();
            receiptInvoicesDAs.removeIf((p) -> p.getInvoice() == null || p.getAmount() == 0);

            //            Printing data
            Map<String, Object> map = new LinkedHashMap<>();
            map.put("Receipt ID", receiptID);
            map.put("Receipt Date", formatDate(receiptDate));
            map.put("Customer", customer.getCustomerName());
            map.put("Pay Mode", payMode.name());
            map.put("Account", bankAcccount.getBankAccountName());
            map.put("Total Bill", txtTotalBill.getText());
            map.put("Amount Tendered", txtAmountTered.getText());
            map.put("Currency", currency.getCurrencyName());
            map.put("Exchange Rate", txtExchangeRate.getText());
            map.put("Amount Paid", txtAmountPaid.getText());
            
            JavaFXPDF javaFXPDF = new JavaFXPDF("Receipt", PageSize.A4, map, 2, 40, 200, 100, 20, 5, 70,
                    tblReceiptInvoices, Arrays.asList(new PrintableColumn(tbcReceiptInvoiceInvoiceID),
                            new PrintableColumn(tbcReceiptInvoiceInvoiceAmount, NumericDataTypes.DOUBLE),
                            new PrintableColumn(tbcReceiptInvoiceAmount, NumericDataTypes.DOUBLE, true)),
                    "Receipt for Customer: " + customer.getDisplayKey(), new String[]{"Customer", "Checked By"},
                    "Amount In Words: " + amountWords);
            
            ReceiptDA receiptDA = new ReceiptDA(receiptID, receiptDate, customer, payMode, bankAcccount, totalBill, amountTered, currency, exchangeRate, changeGiven, amountPaid, amountWords);
            receiptInvoicesDAs.forEach(e -> {
                e.setReceipt((Receipt) receiptDA.getReceipt());
            });
            receiptDA.setReceiptInvoicesDAs(receiptInvoicesDAs);
            String buttonText = btnSave.getText();
            if (buttonText.equalsIgnoreCase(FormMode.Save.name())) {
                receiptDA.save();
                if (warningOK("Operation Successful", "Would like to print")) {
                    javaFXPDF.makePrintablePDFDocument();
                }
                clear();
            } else if (buttonText.equalsIgnoreCase(FormMode.Update.name())) {
                receiptDA.update();
                message("Updated Successfully");
            } else if (buttonText.equalsIgnoreCase(FormMode.Print.name())) {
                javaFXPDF.modifyTitle();
                javaFXPDF.makePrintablePDFDocument();
            }
            this.dbAccess = receiptDA;
            this.editSuccessful = true;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }
    
    @Override
    protected void delete() {
        try {
            String receiptID = getText(txtReceiptID, "Receipt ID");
            ReceiptDA receiptDA = oReceiptDA.get(receiptID);
            if (!warningOk("Confirm Delete", "You are about to delete a record with ID: " + receiptID + " Are you sure you want to continue?", "Remember this action cannot be un done")) {
                return;
            }
            if (receiptDA.delete()) {
                message("Deleted Successfully");
                this.clear();
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }
    
    @Override
    public void loadData() {
        try {
            String receiptID = getText(txtReceiptID, "Receipt ID");
            
            ReceiptDA receiptDA = oReceiptDA.get(receiptID);
            txtReceiptID.setText(receiptDA.getReceiptID());
            dtpReceiptDate.setValue((LocalDate) receiptDA.getReceiptDate());
            cboCustomer.setValue(receiptDA.getCustomer());
            cboPayMode.setValue(receiptDA.getPayMode());
            List<BankAccount> bankAccounts = cboBankAcccount.getItems();
            BankAccount bankAccount = receiptDA.getBankAccount();
            if (!bankAccounts.contains(bankAccount)) {
                cboBankAcccount.getItems().add(bankAccount);
            }
            cboBankAcccount.setValue(bankAccount);
            txtTotalBill.setText(formatNumber(receiptDA.getTotalBill()));
            txtAmountTered.setText(formatNumber(receiptDA.getAmountTered()));
            cboCurrency.setValue(receiptDA.getCurrency());
            txtExchangeRate.setText(formatNumber(receiptDA.getExchangeRate()));
            txtChangeGiven.setText(formatNumber(receiptDA.getChangeGiven()));
            txtAmountPaid.setText(formatNumber(receiptDA.getAmountPaid()));
            txaAmountWords.setText(receiptDA.getAmountWords());
            tblReceiptInvoices.setItems(FXCollections.observableArrayList(receiptDA.getReceiptInvoicesDAs()));
            
        } catch (Exception e) {
            errorMessage(e);
        }
        
    }
    
    private void setNextReceiptID() {
        try {
            if (btnSave.getText().equalsIgnoreCase(FormMode.Save.name())) {
                txtReceiptID.setText(oReceiptDA.getNextReceiptID(oReceiptDA.getNextIdHelper()));
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }
    
    @Override
    protected void clear() {
        super.clear();
        addRow(tblReceiptInvoices, new ReceiptInvoiceDA());
        this.setNextReceiptID();
        
    }
    
    private void setExchangeRate() {
        Currency currency = (Currency) getEntity(cboCurrency);
        if (currency != null) {
            txtExchangeRate.setText(formatNumber(currency.getBuying()));
            calculateTotalAmount();
        }
    }
    
    private void calculateTotalAmount() {
        double amountTendered = defortNumberOptional(txtAmountTered.getText());
        double ExchangeRate = defortNumberOptional(txtExchangeRate.getText());
        double totalBill = defortNumberOptional(txtTotalBill.getText());
        double convertedMoney = amountTendered * ExchangeRate;
        double change = convertedMoney > totalBill ? convertedMoney - totalBill : 0;
        double amountPaid = convertedMoney - change;
        txtAmountPaid.setText(formatNumber(amountPaid));
        txaAmountWords.setText(NumberToWord.toWords(amountPaid));
        txtChangeGiven.setText(formatNumber(change));
    }
    
    public void setTableEditable() {
        tblReceiptInvoices.setEditable(true);
        // allows the individual cells to be selected
        tblReceiptInvoices.getSelectionModel().cellSelectionEnabledProperty().set(true);
        // when character or numbers pressed it will start edit in editable
        // fields
        tblReceiptInvoices.setOnKeyPressed(event -> {
            if (event.getCode().isLetterKey() || event.getCode().isDigitKey()) {
                final TablePosition<ReceiptInvoiceDA, ?> focusedCell = tblReceiptInvoices
                        .focusModelProperty().get().focusedCellProperty().get();
                tblReceiptInvoices.edit(focusedCell.getRow(), focusedCell.getTableColumn());
            } else if (event.getCode() == KeyCode.RIGHT
                    || event.getCode() == KeyCode.TAB) {
                tblReceiptInvoices.getSelectionModel().selectNext();
                event.consume();
            } else if (event.getCode() == KeyCode.LEFT) {
                // work around due to
                // TableView.getSelectionModel().selectPrevious() due to a bug
                // stopping it from working on
                // the first column in the last row of the table
                selectPrevious(tblReceiptInvoices);
                event.consume();
            } else if (event.getCode() == KeyCode.DELETE) {
                tblReceiptInvoices.getItems().removeAll(tblReceiptInvoices.getSelectionModel().getSelectedItems());
                double totalBill = tblReceiptInvoices.getItems().stream()
                        .mapToDouble(ReceiptInvoiceDA::getInvoiceAmount)
                        .sum();
                txtTotalBill.setText(formatNumber(totalBill));
                txtAmountTered.setText(formatNumber(totalBill));
                calculateTotalAmount();
            }
        });
        
    }
    
    private void calculateReceiptInvoiceAmount() {
        double amoutPaid = defortNumberOptional(txtAmountPaid.getText());
        for (ReceiptInvoiceDA receiptInvoiceDA : tblReceiptInvoices.getItems()) {
            
            double invoiceAmount = receiptInvoiceDA.getInvoiceAmount();
            double toPayAmount;
            
            if (invoiceAmount >= amoutPaid) {
                toPayAmount = amoutPaid;
                amoutPaid = 0;
            } else {
                toPayAmount = invoiceAmount;
                amoutPaid -= invoiceAmount;
                
            }
            
            receiptInvoiceDA.setAmount(toPayAmount);
            
        }
        
        tblReceiptInvoices.refresh();
    }
    
}
