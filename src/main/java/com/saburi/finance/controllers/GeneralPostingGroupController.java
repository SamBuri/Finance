/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.controllers;

import com.saburi.common.controllers.EditController;
import com.saburi.common.entities.LookupData;
import static com.saburi.common.utils.FXUIUtils.errorMessage;
import static com.saburi.common.utils.FXUIUtils.getEntity;
import static com.saburi.common.utils.FXUIUtils.getText;
import static com.saburi.common.utils.FXUIUtils.loadDBEntities;
import static com.saburi.common.utils.FXUIUtils.loadLookupData;
import static com.saburi.common.utils.FXUIUtils.message;
import static com.saburi.common.utils.FXUIUtils.selectItem;
import static com.saburi.common.utils.FXUIUtils.selectLookupData;
import static com.saburi.common.utils.FXUIUtils.warningOk;
import com.saburi.common.utils.Utilities.FormMode;
import java.net.URL;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import com.saburi.finance.dbaccess.GeneralPostingGroupDA;
import javafx.scene.control.TextField;
import javafx.scene.control.ComboBox;
import javafx.scene.control.MenuItem;
import com.saburi.finance.utils.FinanceNavigate;
import com.saburi.finance.utils.FinanceObjectNames;
import com.saburi.finance.dbaccess.ChartAccountDA;
import com.saburi.finance.entities.ChartAccount;
import com.saburi.finance.utils.FinanceEnums.AccountTypes;

public class GeneralPostingGroupController extends EditController {

    private final GeneralPostingGroupDA oGeneralPostingGroupDA = new GeneralPostingGroupDA();
    @FXML
    private TextField txtGeneralPostingID;
    @FXML
    private ComboBox cboBusinessGroup;
    @FXML
    private MenuItem cmiSelectBusinessGroup;
    @FXML
    private ComboBox cboItemGroup;
    @FXML
    private MenuItem cmiSelectItemGroup;
    @FXML
    private ComboBox cboSalesAccount;
    @FXML
    private MenuItem cmiSelectSalesAccount;
    @FXML
    private ComboBox cboSalesDiscountAccount;
    @FXML
    private MenuItem cmiSelectSalesDiscountAccount;
    @FXML
    private ComboBox cboSalesReturnAccount;
    @FXML
    private MenuItem cmiSelectSalesReturnAccount;
    @FXML
    private ComboBox cboPurchasesAccount;
    @FXML
    private MenuItem cmiSelectPurchasesAccount;
    @FXML
    private ComboBox cboDirectCostAppliedAccount;
    @FXML
    private MenuItem cmiSelectDirectCostAppliedAccount;
    @FXML
    private ComboBox cboPurchaseDiscountAccount;
    @FXML
    private MenuItem cmiSelectPurchaseDiscountAccount;
    @FXML
    private ComboBox cboPurchaseReturnAccount;
    @FXML
    private MenuItem cmiSelectPurchaseReturnAccount;
    private final ChartAccountDA oChartAccountDA = new ChartAccountDA();

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            loadLookupData(cboBusinessGroup, FinanceObjectNames.BUSINESSGROUP);
            loadLookupData(cboItemGroup, FinanceObjectNames.ITEMGROUP);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Income, false), cboSalesAccount);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Income, true), cboSalesDiscountAccount);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Income, true), cboSalesReturnAccount);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Expense, false), cboPurchasesAccount);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Expense,false), cboDirectCostAppliedAccount);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Expense, true), cboPurchaseDiscountAccount);
            loadDBEntities(oChartAccountDA.getChartAccounts(AccountTypes.Expense, true), cboPurchaseReturnAccount);

            this.primaryKeyControl = txtGeneralPostingID;
            this.dbAccess = oGeneralPostingGroupDA;
            this.restrainColumnConstraint = false;
            //this.minSize = 360;
            this.setNextGeneralPostingID();
            selectLookupData(cmiSelectBusinessGroup, FinanceObjectNames.BUSINESSGROUP, "Business Group", cboBusinessGroup, false);
            selectLookupData(cmiSelectItemGroup, FinanceObjectNames.ITEMGROUP, "Item Group", cboItemGroup, false);
            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectSalesAccount, oChartAccountDA, 
                    oChartAccountDA.getChartAccountDAs(AccountTypes.Income, false), "ChartAccount", "Sales Account", cboSalesAccount, true);
            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectSalesDiscountAccount, oChartAccountDA,
                    oChartAccountDA.getChartAccountDAs(AccountTypes.Income, true),"ChartAccount", "Sales Discout Account", cboSalesDiscountAccount, true);
            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectSalesReturnAccount, oChartAccountDA, 
                    oChartAccountDA.getChartAccountDAs(AccountTypes.Income, true),"ChartAccount", "Sales Return Account", cboSalesReturnAccount, true);
            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectPurchasesAccount, oChartAccountDA, 
                    oChartAccountDA.getChartAccountDAs(AccountTypes.Expense, false),"ChartAccount", "Purchases Account", cboPurchasesAccount, true);
            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectDirectCostAppliedAccount, oChartAccountDA, 
                    oChartAccountDA.getChartAccountDAs(AccountTypes.Expense, false),"ChartAccount", "Direct Cost Applied Account", cboDirectCostAppliedAccount, true);
            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectPurchaseDiscountAccount, oChartAccountDA, 
                    oChartAccountDA.getChartAccountDAs(AccountTypes.Expense, true), "ChartAccount", "Purchase Discount Account", cboPurchaseDiscountAccount, true);
            selectItem(FinanceNavigate.MAIN_CLASS, cmiSelectPurchaseReturnAccount, oChartAccountDA, 
                    oChartAccountDA.getChartAccountDAs(AccountTypes.Expense, true),"ChartAccount", "Purchase Return Account", cboPurchaseReturnAccount, true);
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void save() {
        try {
            this.editSuccessful = false;
            String generalPostingID = getText(txtGeneralPostingID, "General Posting ID");
            LookupData businessGroup = (LookupData) getEntity(cboBusinessGroup, "Business Group");
            LookupData itemGroup = (LookupData) getEntity(cboItemGroup, "Item Group");
            ChartAccount salesAccount = (ChartAccount) getEntity(cboSalesAccount, "Sales Account");
            ChartAccount salesDiscountAccount = (ChartAccount) getEntity(cboSalesDiscountAccount, "Sales Discout Account");
            ChartAccount salesReturnAccount = (ChartAccount) getEntity(cboSalesReturnAccount, "Sales Return Account");
            ChartAccount purchasesAccount = (ChartAccount) getEntity(cboPurchasesAccount, "Purchases Account");
            ChartAccount directCostAppliedAccount = (ChartAccount) getEntity(cboDirectCostAppliedAccount, "Direct Cost Applied Account");
            ChartAccount purchaseDiscountAccount = (ChartAccount) getEntity(cboPurchaseDiscountAccount, "Purchase Discount Account");
            ChartAccount purchaseReturnAccount = (ChartAccount) getEntity(cboPurchaseReturnAccount, "Purchase Return Account");

            GeneralPostingGroupDA generalPostingGroupDA = new GeneralPostingGroupDA(generalPostingID, businessGroup, itemGroup, salesAccount, salesDiscountAccount, salesReturnAccount, purchasesAccount, directCostAppliedAccount, purchaseDiscountAccount, purchaseReturnAccount);
            String buttonText = btnSave.getText();
            if (buttonText.equalsIgnoreCase(FormMode.Save.name())) {
                generalPostingGroupDA.save();
                message("Saved Successfully");
                clear();
                this.setNextGeneralPostingID();
            } else if (buttonText.equalsIgnoreCase(FormMode.Update.name())) {
                generalPostingGroupDA.update();
                message("Updated Successfully");
            }
            this.dbAccess = generalPostingGroupDA;
            this.editSuccessful = true;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void delete() {
        try {
            String generalPostingID = getText(txtGeneralPostingID, "General Posting ID");
            GeneralPostingGroupDA generalPostingGroupDA = oGeneralPostingGroupDA.get(generalPostingID);
            if (!warningOk("Confirm Delete", "You are about to delete a record with ID: " + generalPostingID + " Are you sure you want to continue?", "Remember this action cannot be un done")) {
                return;
            }
            if (generalPostingGroupDA.delete()) {
                message("Deleted Successfully");
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    @Override
    public void loadData() {
        try {
            String generalPostingID = getText(txtGeneralPostingID, "General Posting ID");

            GeneralPostingGroupDA generalPostingGroupDA = oGeneralPostingGroupDA.get(generalPostingID);
            txtGeneralPostingID.setText(generalPostingGroupDA.getGeneralPostingID());
            cboBusinessGroup.setValue(generalPostingGroupDA.getBusinessGroup());
            cboItemGroup.setValue(generalPostingGroupDA.getItemGroup());
            cboSalesAccount.setValue(generalPostingGroupDA.getSalesAccount());
            cboSalesDiscountAccount.setValue(generalPostingGroupDA.getSalesDiscountAccount());
            cboSalesReturnAccount.setValue(generalPostingGroupDA.getSalesReturnAccount());
            cboPurchasesAccount.setValue(generalPostingGroupDA.getPurchasesAccount());
            cboDirectCostAppliedAccount.setValue(generalPostingGroupDA.getDirectCostAppliedAccount());
            cboPurchaseDiscountAccount.setValue(generalPostingGroupDA.getPurchaseDiscountAccount());
            cboPurchaseReturnAccount.setValue(generalPostingGroupDA.getPurchaseReturnAccount());

        } catch (Exception e) {
            errorMessage(e);
        }

    }

    private void setNextGeneralPostingID() {
        try {
            if (btnSave.getText().equalsIgnoreCase(FormMode.Save.name())) {
                txtGeneralPostingID.setText(oGeneralPostingGroupDA.getNextGeneralPostingID(oGeneralPostingGroupDA.getNextIdHelper()));
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

}
