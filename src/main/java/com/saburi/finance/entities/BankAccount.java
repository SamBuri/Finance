/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.entities;

import com.saburi.common.entities.DBEntity;
import javax.persistence.Entity;
import javax.persistence.Id;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;
import javax.validation.constraints.NotNull;
import javax.persistence.Column;
import javax.validation.constraints.Size;
import com.saburi.finance.utils.FinanceEnums.BankAccountTypes;
import javax.persistence.Enumerated;
import javax.persistence.JoinColumn;
import javax.persistence.ForeignKey;
import javax.persistence.OneToOne;

@Entity
@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
public class BankAccount extends DBEntity {

    @Column(updatable = false)
    private int idHelper;
    @Id
    @NotNull(message = "The field: Bank Account ID cannot be null")
    @Size(max = 20, message = "The field: Bank Account ID size cannot be greater than 20")
    @Column(length = 20, updatable = false)
    private String bankAccountID;
    @Size(max = 100, message = "The field: Bank Account Name size cannot be greater than 100")
    @NotNull(message = "The field: Bank Account Name cannot be null")
    @Column(length = 100, unique = true)
    private String bankAccountName;
    @Enumerated
    private BankAccountTypes bankAccountType;
    @OneToOne
    @JoinColumn(name = "currencyID", foreignKey = @ForeignKey(name = "fkCurrencyIDBankAccount"))
    private Currency currency;
    @Size(max = 100, message = "The field: Account No size cannot be greater than 100")
    @Column(length = 100)
    private String accountNo;
    @Size(max = 100, message = "The field: Bank Name size cannot be greater than 100")
    @Column(length = 100)
    private String bankName;
    @Size(max = 100, message = "The field: Branch Name size cannot be greater than 100")
    @Column(length = 100)
    private String branchName;
    @OneToOne
    @JoinColumn(name = "postingAccountID", foreignKey = @ForeignKey(name = "fkPostingAccountIDBankAccount"))
    private ChartAccount postingAccount;
    @Size(max = 100, message = "The field: Phone No size cannot be greater than 100")
    @Column(length = 100)
    private String phoneNo;
    @Size(max = 100, message = "The field: Email size cannot be greater than 100")
    @Column(length = 100)
    private String email;
    @Size(max = 200, message = "The field: Address size cannot be greater than 200")
    @Column(length = 200)
    private String address;
    private boolean isDefault;
    private double balance;

    public BankAccount() {
    }

    public BankAccount(int idHelper, String bankAccountID, String bankAccountName, BankAccountTypes bankAccountType, Currency currency, String accountNo, String bankName, String branchName, ChartAccount postingAccount, String phoneNo, String email, String address, boolean isDefault) {
        this.idHelper = idHelper;
        this.bankAccountID = bankAccountID;
        this.bankAccountName = bankAccountName;
        this.bankAccountType = bankAccountType;
        this.currency = currency;
        this.accountNo = accountNo;
        this.bankName = bankName;
        this.branchName = branchName;
        this.postingAccount = postingAccount;
        this.phoneNo = phoneNo;
        this.email = email;
        this.address = address;
        this.isDefault = isDefault;

    }

    public int getIdHelper() {
        return idHelper;
    }

    public void setIdHelper(int idHelper) {
        this.idHelper = idHelper;
    }

    public String getBankAccountID() {
        return bankAccountID;
    }

    public void setBankAccountID(String bankAccountID) {
        this.bankAccountID = bankAccountID;
    }

    public String getBankAccountName() {
        return bankAccountName;
    }

    public void setBankAccountName(String bankAccountName) {
        this.bankAccountName = bankAccountName;
    }

    public BankAccountTypes getBankAccountType() {
        return bankAccountType;
    }

    public void setBankAccountType(BankAccountTypes bankAccountType) {
        this.bankAccountType = bankAccountType;
    }

    public Currency getCurrency() {
        return currency;
    }

    public void setCurrency(Currency currency) {
        this.currency = currency;
    }

    public String getAccountNo() {
        return accountNo;
    }

    public void setAccountNo(String accountNo) {
        this.accountNo = accountNo;
    }

    public String getBankName() {
        return bankName;
    }

    public void setBankName(String bankName) {
        this.bankName = bankName;
    }

    public String getBranchName() {
        return branchName;
    }

    public void setBranchName(String branchName) {
        this.branchName = branchName;
    }

    public ChartAccount getPostingAccount() {
        return postingAccount;
    }

    public void setPostingAccount(ChartAccount postingAccount) {
        this.postingAccount = postingAccount;
    }

    public String getPhoneNo() {
        return phoneNo;
    }

    public void setPhoneNo(String phoneNo) {
        this.phoneNo = phoneNo;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public boolean isisDefault() {
        return isDefault;
    }

    public void setisDefault(boolean isDefault) {
        this.isDefault = isDefault;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof BankAccount)) {
            return false;
        }

        BankAccount bankAccount = (BankAccount) o;

        return this.getId().equals(bankAccount.getId());
    }

    @Override
    public int hashCode() {
        return this.bankAccountID.hashCode();

    }

    @Override
    public Object getId() {
        return this.bankAccountID;
    }

    @Override
    public String getDisplayKey() {
        return this.bankAccountName;
    }

}
