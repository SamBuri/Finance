/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.entities;

import com.saburi.common.entities.DBEntity;
import com.saburi.common.entities.LookupData;
import javax.persistence.Entity;
import javax.persistence.Id;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;
import javax.persistence.Column;
import javax.validation.constraints.Size;
import javax.validation.constraints.NotNull;
import javax.persistence.JoinColumn;
import javax.persistence.ForeignKey;
import javax.persistence.OneToOne;
import com.saburi.finance.utils.FinanceEnums.UnitMeasureUsages;
import javax.persistence.Enumerated;

@Entity
@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
public class MeasureRelation extends DBEntity {

    @Id
    @NotNull(message = "The field: Measure Relation ID cannot be null")
    @Size(max = 40, message = "The field: Measure Relation ID size cannot be greater than 40")
    @Column(length = 40, updatable = false)
    private String measureRelationID;
    @NotNull(message = "The field: Measure Group cannot be null")
    @OneToOne
    @JoinColumn(name = "measureGroupID", foreignKey = @ForeignKey(name = "fkMeasureGroupIDMeasureRelation"))
    private MeasureGroup measureGroup;
    @OneToOne
    @JoinColumn(name = "unitMeasureID", foreignKey = @ForeignKey(name = "fkUnitMeasureIDMeasureRelation"))
    private LookupData unitMeasure;
    private int baseSize;
    @Enumerated
    private UnitMeasureUsages defaultUsage;

    public MeasureRelation() {
    }

    public MeasureRelation(MeasureGroup measureGroup, LookupData unitMeasure, int baseSize, UnitMeasureUsages defaultUsage) {
        this.measureGroup = measureGroup;
        this.unitMeasure = unitMeasure;
        setMeasureRelationID();
        this.baseSize = baseSize;
        this.defaultUsage = defaultUsage;

    }

    public String getMeasureRelationID() {
        return measureRelationID;
    }

    private void setMeasureRelationID() {
        String measureGroupPart = measureGroup == null ? "" : measureGroup.getMeasureGroupID();
        String unitMeasurePart = unitMeasure == null ? "" : unitMeasure.getLookupDataID();
        this.measureRelationID = measureGroupPart.concat(unitMeasurePart);
    }

    public MeasureGroup getMeasureGroup() {
        return measureGroup;
    }

    public void setMeasureGroup(MeasureGroup measureGroup) {
        this.measureGroup = measureGroup;
        setMeasureRelationID();
    }

    public LookupData getUnitMeasure() {
        return unitMeasure;
    }

    public void setUnitMeasure(LookupData unitMeasure) {
        this.unitMeasure = unitMeasure;
        setMeasureRelationID();
    }

    public int getBaseSize() {
        return baseSize;
    }

    public void setBaseSize(int baseSize) {
        this.baseSize = baseSize;
    }

    public UnitMeasureUsages getDefaultUsage() {
        return defaultUsage;
    }

    public void setDefaultUsage(UnitMeasureUsages defaultUsage) {
        this.defaultUsage = defaultUsage;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof MeasureRelation)) {
            return false;
        }

        MeasureRelation measureRelation = (MeasureRelation) o;

        return this.getId().equals(measureRelation.getId());
    }

    @Override
    public int hashCode() {
        return this.measureRelationID.hashCode();

    }

    @Override
    public Object getId() {
        return this.measureRelationID;
    }

    @Override
    public String getDisplayKey() {
        return this.unitMeasure.getDisplayKey();
    }

}
