/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.entities;

import java.util.Objects;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import com.saburi.common.entities.DBEntity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.validation.constraints.NotNull;
import javax.persistence.JoinColumn;
import javax.persistence.ForeignKey;
import javax.persistence.OneToOne;
import com.saburi.common.entities.LookupData;
import com.saburi.finance.utils.FinanceEnums.UnitMeasureUsages;
import javax.persistence.Enumerated;
import javax.persistence.EnumType;

@Entity
@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
@Table(
        uniqueConstraints = @UniqueConstraint(columnNames = {"measureGroupID", "unitMeasureID"}, name = "uqMeasureGroupUnitMeasure")
)
public class MeasureRelation extends DBEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(updatable = false, nullable = false)
    private int measureRelationID;
    @NotNull(message = "The field: Measure Group cannot be null")
    @OneToOne
    @JoinColumn(name = "measureGroupID", foreignKey = @ForeignKey(name = "fkMeasureGroupIDMeasureRelation"))
    private MeasureGroup measureGroup;
    @NotNull(message = "The field: Unit Measure cannot be null")
    @OneToOne
    @JoinColumn(name = "unitMeasureID", foreignKey = @ForeignKey(name = "fkUnitMeasureIDMeasureRelation"))
    private LookupData unitMeasure;
    @NotNull(message = "The field: Base Size cannot be null")
    @Column(name = "baseSize", nullable = false)
    private int baseSize;
    @Enumerated(EnumType.STRING)
    private UnitMeasureUsages defaultUsage;

    public MeasureRelation() {
    }

    public MeasureRelation(MeasureGroup measureGroup, LookupData unitMeasure, int baseSize, UnitMeasureUsages defaultUsage) {
        this.measureGroup = measureGroup;
        this.unitMeasure = unitMeasure;
        this.baseSize = baseSize;
        this.defaultUsage = defaultUsage;

    }

    public int getMeasureRelationID() {
        return measureRelationID;
    }

    public void setMeasureRelationID(int measureRelationID) {
        this.measureRelationID = measureRelationID;
    }

    public MeasureGroup getMeasureGroup() {
        return measureGroup;
    }

    public void setMeasureGroup(MeasureGroup measureGroup) {
        this.measureGroup = measureGroup;
    }

    public LookupData getUnitMeasure() {
        return unitMeasure;
    }

    public void setUnitMeasure(LookupData unitMeasure) {
        this.unitMeasure = unitMeasure;
    }

    public int getBaseSize() {
        return baseSize;
    }

    public void setBaseSize(int baseSize) {
        this.baseSize = baseSize;
    }

    public UnitMeasureUsages getDefaultUsage() {
        return defaultUsage;
    }

    public void setDefaultUsage(UnitMeasureUsages defaultUsage) {
        this.defaultUsage = defaultUsage;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null) {
            return false;
        }
        if (getClass() != o.getClass()) {
            return false;
        }
        final MeasureRelation measureRelation = (MeasureRelation) o;
        if (!Objects.equals(this.measureGroup, measureRelation.measureGroup)) {
            return false;
        }
        return Objects.equals(this.unitMeasure, measureRelation.unitMeasure);
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(this.measureGroup) + Objects.hashCode(this.unitMeasure);
    }

    @Override
    public Object getId() {
        return this.measureRelationID;
    }

    @Override
    public String getDisplayKey() {
        return this.unitMeasure.getDisplayKey();
    }

}
