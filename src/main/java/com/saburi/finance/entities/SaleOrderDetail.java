/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.entities;

import com.saburi.common.entities.DBEntity;
import javax.persistence.Entity;
import javax.persistence.Id;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;
import javax.validation.constraints.NotNull;
import javax.persistence.JoinColumn;
import javax.persistence.ForeignKey;
import javax.persistence.OneToOne;
import javax.persistence.Column;
import javax.validation.constraints.Size;
import com.saburi.finance.utils.FinanceEnums.InvoiceStatus;
import javax.persistence.Enumerated;

@Entity
@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
public class SaleOrderDetail extends DBEntity {

    @NotNull(message = "The field: SaleOrder cannot be null")
    @OneToOne
    @JoinColumn(name = "saleOrderID", foreignKey = @ForeignKey(name = "fkSaleOrderIDSaleOrderDetail"))
    private SaleOrder saleOrder;
    @NotNull(message = "The field: Item cannot be null")
    @OneToOne
    @JoinColumn(name = "itemID", foreignKey = @ForeignKey(name = "fkItemIDSaleOrderDetail"))
    private Item item;
    @Id
    @NotNull(message = "The field: Sale Order Detail ID cannot be null")
    @Size(max = 20, message = "The field: Sale Order Detail ID size cannot be greater than 20")
    @Column(length = 20, updatable = false)
    private String saleOrderDetailID;
    private int baseQuantity;
    @Size(max = 100, message = "The field: UnitMeasure size cannot be greater than 100")
    @Column(length = 100)
    private String unitMeasure;
    private int measureSize;
    private int quantity;
    private double unitPrice;
    private double discount;
    private double amount;
    @Enumerated
    private InvoiceStatus invoiceStatus;
    @Size(max = 100, message = "The field: Invoice ID size cannot be greater than 100")
    @Column(length = 100)
    private String invoiceID;

    public SaleOrderDetail() {
    }

    public SaleOrderDetail(SaleOrder saleOrder, Item item, int baseQuantity, String unitMeasure, int measureSize, int quantity, double unitPrice, double discount, double amount, InvoiceStatus invoiceStatus, String invoiceID) {
        this.saleOrder = saleOrder;
        this.item = item;
        setSaleOrderDetailID();
        this.baseQuantity = baseQuantity;
        this.unitMeasure = unitMeasure;
        this.measureSize = measureSize;
        this.quantity = quantity;
        this.unitPrice = unitPrice;
        this.discount = discount;
        this.amount = amount;
        this.invoiceStatus = invoiceStatus;
        this.invoiceID = invoiceID;

    }
    
   
    public SaleOrder getSaleOrder() {
        return saleOrder;
    }

    public void setSaleOrder(SaleOrder saleOrder) {
        this.saleOrder = saleOrder;
        setSaleOrderDetailID();
    }

    public Item getItem() {
        return item;
    }

    public void setItem(Item item) {
        this.item = item;
        setSaleOrderDetailID();
    }

    public String getSaleOrderDetailID() {
        return saleOrderDetailID;
    }

    private void setSaleOrderDetailID() {
        String saleOrderPart =  saleOrder==null?"":saleOrder.getSaleOrderID();
        String itempart = item==null?"":item.getItemID();
        this.saleOrderDetailID = saleOrderPart.concat(itempart);
    }

    public int getBaseQuantity() {
        return baseQuantity;
    }

    public void setBaseQuantity(int baseQuantity) {
        this.baseQuantity = baseQuantity;
    }

    public String getUnitMeasure() {
        return unitMeasure;
    }

    public void setUnitMeasure(String unitMeasure) {
        this.unitMeasure = unitMeasure;
    }

    public int getMeasureSize() {
        return measureSize;
    }

    public void setMeasureSize(int measureSize) {
        this.measureSize = measureSize;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public double getUnitPrice() {
        return unitPrice;
    }

    public void setUnitPrice(double unitPrice) {
        this.unitPrice = unitPrice;
    }

    public double getDiscount() {
        return discount;
    }

    public void setDiscount(double discount) {
        this.discount = discount;
    }

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }

    public InvoiceStatus getInvoiceStatus() {
        return invoiceStatus;
    }

    public void setInvoiceStatus(InvoiceStatus invoiceStatus) {
        this.invoiceStatus = invoiceStatus;
    }

    public String getInvoiceID() {
        return invoiceID;
    }

    public void setInvoiceID(String invoiceID) {
        this.invoiceID = invoiceID;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof SaleOrderDetail)) {
            return false;
        }

        SaleOrderDetail saleOrderDetail = (SaleOrderDetail) o;

        return this.getId().equals(saleOrderDetail.getId());
    }

    @Override
    public int hashCode() {
        return this.saleOrderDetailID.hashCode();

    }

    @Override
    public Object getId() {
        return this.saleOrderDetailID;
    }

    @Override
    public String getDisplayKey() {
        return this.saleOrder.getDisplayKey() + " " + this.item.getDisplayKey();
    }

}
