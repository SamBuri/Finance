/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.entities;

import com.saburi.common.entities.DBEntity;
import com.saburi.common.entities.Staff;
import javax.persistence.Entity;
import javax.persistence.Id;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;
import javax.persistence.Column;
import javax.validation.constraints.Size;
import javax.validation.constraints.NotNull;
import javax.persistence.JoinColumn;
import javax.persistence.ForeignKey;
import javax.persistence.OneToOne;
import java.time.LocalDate;
import com.saburi.finance.utils.FinanceEnums.RequestStatus;
import javax.persistence.Enumerated;

@Entity
@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
public class CreditNoteApproval extends DBEntity {

    @Id
    @NotNull(message = "The field: Credit Note Approval ID cannot be null")
    @Size(max = 20, message = "The field: Credit Note Approval ID size cannot be greater than 20")
    @Column(length = 20, updatable = false)
    private String creditNoteApprovalID;
    @NotNull(message = "The field: Credit Note Request cannot be null")
    @OneToOne
    @JoinColumn(name = "creditNoteRequestID", foreignKey = @ForeignKey(name = "fkCreditNoteRequestIDCreditNoteApproval"))
    private CreditNoteRequest creditNoteRequest;
    private LocalDate approvalDate;
    @Size(max = 200, message = "The field: Notes size cannot be greater than 200")
    @Column(length = 200)
    private String notes;
    @NotNull(message = "The field: Request Status cannot be null")
    @Enumerated
    private RequestStatus approvalStatus;
    @OneToOne
    @JoinColumn(name = "approvedByID", foreignKey = @ForeignKey(name = "fkApprovedByIDCreditNoteApproval"))
    private Staff approvedBy;

    public CreditNoteApproval() {
    }

    public CreditNoteApproval(CreditNoteRequest creditNoteRequest, LocalDate approvalDate, String notes, RequestStatus approvalStatus, Staff approvedBy) {
       this.creditNoteRequest = creditNoteRequest;
        this.creditNoteApprovalID = creditNoteRequest.getCreditNoteRequestID();
        this.approvalDate = approvalDate;
        this.notes = notes;
        this.approvalStatus = approvalStatus;
        this.approvedBy = approvedBy;

    }

    public String getCreditNoteApprovalID() {
        return creditNoteApprovalID;
    }

    public void setCreditNoteApprovalID(String creditNoteApprovalID) {
        this.creditNoteApprovalID = creditNoteApprovalID;
    }

    public CreditNoteRequest getCreditNoteRequest() {
        return creditNoteRequest;
    }

    public void setCreditNoteRequest(CreditNoteRequest creditNoteRequest) {
        this.creditNoteRequest = creditNoteRequest;
    }

    public LocalDate getApprovalDate() {
        return approvalDate;
    }

    public void setApprovalDate(LocalDate approvalDate) {
        this.approvalDate = approvalDate;
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    public RequestStatus getRequestStatus() {
        return approvalStatus;
    }

    public void setRequestStatus(RequestStatus approvalStatus) {
        this.approvalStatus = approvalStatus;
    }

    public Staff getApprovedBy() {
        return approvedBy;
    }

    public void setApprovedBy(Staff approvedBy) {
        this.approvedBy = approvedBy;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof CreditNoteApproval)) {
            return false;
        }

        CreditNoteApproval creditNoteApproval = (CreditNoteApproval) o;

        return this.getId().equals(creditNoteApproval.getId());
    }

    @Override
    public int hashCode() {
        return this.creditNoteApprovalID.hashCode();

    }

    @Override
    public Object getId() {
        return this.creditNoteApprovalID;
    }

    @Override
    public String getDisplayKey() {
        return this.creditNoteRequest.getDisplayKey();
    }

}
