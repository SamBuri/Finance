/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.entities;

import java.util.Objects;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import com.saburi.common.entities.DBEntity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.validation.constraints.NotNull;
import com.saburi.finance.utils.FinanceEnums.AccountGroups;
import javax.persistence.Enumerated;
import javax.persistence.EnumType;
import javax.persistence.JoinColumn;
import javax.persistence.ForeignKey;
import javax.persistence.OneToOne;
import javax.validation.constraints.Size;
import com.saburi.finance.utils.FinanceEnums.AccountTypes;
import com.saburi.finance.utils.FinanceEnums.AccountActions;
import com.saburi.common.entities.LookupData;

@Entity
@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
@Table(
        uniqueConstraints = @UniqueConstraint(columnNames = {"accountGroup", "journalEntryID", "accountID"}, name = "uqAccountGroupJournalEntryAccountID")
)
public class JournalEntryDetail extends DBEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(updatable = false, nullable = false)
    private int journalEntryDetailID;
    @NotNull(message = "The field: Account Group cannot be null")
   @Enumerated(EnumType.STRING)
    @Column(length = 100)
    private AccountGroups accountGroup;
    @NotNull(message = "The field: Journal Entry cannot be null")
    @OneToOne
    @JoinColumn(name = "journalEntryID", foreignKey = @ForeignKey(name = "fkJournalEntryIDJournalEntryDetail"))
    private JournalEntry journalEntry;
    @Size(max = 100, message = "The field: Account ID size cannot be greater than 100")
    @NotNull(message = "The field: Account ID cannot be null")
    @Column(length = 100)
    private String accountID;
    @Size(max = 100, message = "The field: Account Name size cannot be greater than 100")
    @NotNull(message = "The field: Account Name cannot be null")
    @Column(length = 100)
    private String accountName;
    @Enumerated(EnumType.STRING)
    @Column(length = 20)
    private AccountTypes accountType;
    @Enumerated(EnumType.STRING)
    @Column(length = 10)
    private AccountActions accountAction;
    @Column(name = "quantity")
    private int quantity;
    @Column(name = "unitPrice")
    private double unitPrice;
    @Column(name = "amount")
    private double amount;
    @Size(max = 100, message = "The field: Notes size cannot be greater than 100")
    @Column(length = 100)
    private String notes;
    @OneToOne
    @JoinColumn(name = "locationID", foreignKey = @ForeignKey(name = "fkLocationIDJournalEntryDetail"))
    private LookupData location;

    public JournalEntryDetail() {
    }

    public JournalEntryDetail(AccountGroups accountGroup, JournalEntry journalEntry, String accountID, String accountName, AccountTypes accountType, AccountActions accountAction, int quantity, double unitPrice, double amount, String notes, LookupData location) {
        this.accountGroup = accountGroup;
        this.journalEntry = journalEntry;
        this.accountID = accountID;
        this.accountName = accountName;
        this.accountType = accountType;
        this.accountAction = accountAction;
        this.quantity = quantity;
        this.unitPrice = unitPrice;
        this.amount = amount;
        this.notes = notes;
        this.location = location;

    }

    public int getJournalEntryDetailID() {
        return journalEntryDetailID;
    }

    public void setJournalEntryDetailID(int journalEntryDetailID) {
        this.journalEntryDetailID = journalEntryDetailID;
    }

    public AccountGroups getAccountGroup() {
        return accountGroup;
    }

    public void setAccountGroup(AccountGroups accountGroup) {
        this.accountGroup = accountGroup;
    }

    public JournalEntry getJournalEntry() {
        return journalEntry;
    }

    public void setJournalEntry(JournalEntry journalEntry) {
        this.journalEntry = journalEntry;
    }

    public String getAccountID() {
        return accountID;
    }

    public void setAccountID(String accountID) {
        this.accountID = accountID;
    }

    public String getAccountName() {
        return accountName;
    }

    public void setAccountName(String accountName) {
        this.accountName = accountName;
    }

    public AccountTypes getAccountType() {
        return accountType;
    }

    public void setAccountType(AccountTypes accountType) {
        this.accountType = accountType;
    }

    public AccountActions getAccountAction() {
        return accountAction;
    }

    public void setAccountAction(AccountActions accountAction) {
        this.accountAction = accountAction;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public double getUnitPrice() {
        return unitPrice;
    }

    public void setUnitPrice(double unitPrice) {
        this.unitPrice = unitPrice;
    }

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    public LookupData getLocation() {
        return location;
    }

    public void setLocation(LookupData location) {
        this.location = location;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null) {
            return false;
        }
        if (getClass() != o.getClass()) {
            return false;
        }
        final JournalEntryDetail journalEntryDetail = (JournalEntryDetail) o;
        if (!Objects.equals(this.accountGroup, journalEntryDetail.accountGroup)) {
            return false;
        }
        if (!Objects.equals(this.journalEntry, journalEntryDetail.journalEntry)) {
            return false;
        }
        return Objects.equals(this.accountID, journalEntryDetail.accountID);
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(this.accountGroup) + Objects.hashCode(this.journalEntry) + Objects.hashCode(this.accountID);
    }

    @Override
    public Object getId() {
        return this.journalEntryDetailID;
    }

    @Override
    public String getDisplayKey() {
        return this.accountName;
    }

}
