/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.entities;

import com.saburi.common.entities.DBEntity;
import javax.persistence.Entity;
import javax.persistence.Id;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;
import javax.validation.constraints.NotNull;
import com.saburi.finance.utils.FinanceEnums.AccountTypes;
import javax.persistence.Enumerated;
import javax.persistence.Column;
import javax.validation.constraints.Size;
import javax.persistence.JoinColumn;
import javax.persistence.ForeignKey;
import javax.persistence.OneToOne;

@Entity
@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
public class AccountCategory extends DBEntity {

    @Column(updatable = false)
    private int idHelper;
    @NotNull(message = "The field: Account Type cannot be null")
    @Enumerated
    private AccountTypes accountType;
    @Id
    @NotNull(message = "The field: Category ID cannot be null")
    @Size(max = 100, message = "The field: Category ID size cannot be greater than 100")
    @Column(length = 100, updatable = false)
    private String categoryID;
    @Size(max = 100, message = "The field: Category Name size cannot be greater than 100")
    @NotNull(message = "The field: Category Name cannot be null")
    @Column(length = 100)
    private String categoryName;
    @OneToOne
    @JoinColumn(name = "parentCategoryID", foreignKey = @ForeignKey(name = "fkParentCategoryIDAccountCategory"))
    private AccountCategory parentCategory;
    private boolean readOnly;
    private boolean hidden;

    public AccountCategory() {
    }

    public AccountCategory(int idHelper, AccountTypes accountType, String categoryID, String categoryName, AccountCategory parentCategory, boolean readOnly, boolean hidden) {
        this.idHelper = idHelper;
        this.accountType = accountType;
        this.categoryID = categoryID;
        this.categoryName = categoryName;
        this.parentCategory = parentCategory;
        this.readOnly = readOnly;
        this.hidden = hidden;

    }

    public int getIdHelper() {
        return idHelper;
    }

    public void setIdHelper(int idHelper) {
        this.idHelper = idHelper;
    }

    public AccountTypes getAccountType() {
        return accountType;
    }

    public void setAccountType(AccountTypes accountType) {
        this.accountType = accountType;
    }

    public String getCategoryID() {
        return categoryID;
    }

    public void setCategoryID(String categoryID) {
        this.categoryID = categoryID;
    }

    public String getCategoryName() {
        return categoryName;
    }

    public void setCategoryName(String categoryName) {
        this.categoryName = categoryName;
    }

    public AccountCategory getParentCategory() {
        return parentCategory;
    }

    public void setParentCategory(AccountCategory parentCategory) {
        this.parentCategory = parentCategory;
    }

    public boolean isReadOnly() {
        return readOnly;
    }

    public void setReadOnly(boolean readOnly) {
        this.readOnly = readOnly;
    }

    public boolean isHidden() {
        return hidden;
    }

    public void setHidden(boolean hidden) {
        this.hidden = hidden;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof AccountCategory)) {
            return false;
        }

        AccountCategory accountCategory = (AccountCategory) o;

        return this.getId().equals(accountCategory.getId());
    }

    @Override
    public int hashCode() {
        return this.categoryID.hashCode();

    }

    @Override
    public Object getId() {
        return this.categoryID;
    }

    @Override
    public String getDisplayKey() {
        return this.categoryName;
    }

}
