/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.entities;

import com.saburi.common.entities.DBEntity;
import javax.persistence.Entity;
import javax.persistence.Id;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;
import javax.validation.constraints.NotNull;
import javax.persistence.JoinColumn;
import javax.persistence.ForeignKey;
import javax.persistence.OneToOne;
import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.Size;

@Entity
@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
@Table(
        name = "CreditNoteRequestDetails",
        uniqueConstraints = @UniqueConstraint(columnNames = {"creditNoteRequestID", "invoiceDetailID"},
        name = "uqCreditNoteRequestinvoiceDetailIDCreditNoteRequestDetails")
)
public class CreditNoteRequestDetails extends DBEntity {

    @Id
    @NotNull(message = "The field: CreditNote Detail ID cannot be null")
    @GeneratedValue
    private int creditNoteDetailID;
    @NotNull(message = "The field: Credit Note Request cannot be null")
    @OneToOne
    @JoinColumn(name = "creditNoteRequestID", foreignKey = @ForeignKey(name = "fkCreditNoteRequestIDCreditNoteRequestDetails"))
    private CreditNoteRequest creditNoteRequest;
    @OneToOne
    @JoinColumn(name = "invoiceDetailID", foreignKey = @ForeignKey(name = "fkInvoiceDetailsIDCreditNoteRequestDetails"))
    private InvoiceDetails invoiceDetail;
    private int baseQuantity;
    @Size(max = 100, message = "The field: Unit Measure size cannot be greater than 100")
    @Column(length = 100)
    private String unitMeasure;
    private int measureSize;
    private int quantity;
    private double unitPrice;
    private double amount;
    @Size(max = 100, message = "The field: Notes size cannot be greater than 100")
    @Column(length = 100)
    private String notes;

    public CreditNoteRequestDetails() {
    }

    public CreditNoteRequestDetails(int creditNoteDetailID, CreditNoteRequest creditNote, InvoiceDetails invoiceDetail, int baseQuantity, String unitMeasure, int measureSize, int quantity, double unitPrice, double amount, String notes) {
        this.creditNoteDetailID = creditNoteDetailID;
        this.creditNoteRequest = creditNote;
        this.invoiceDetail = invoiceDetail;
        this.baseQuantity = baseQuantity;
        this.unitMeasure = unitMeasure;
        this.measureSize = measureSize;
        this.quantity = quantity;
        this.unitPrice = unitPrice;
        this.amount = amount;
        this.notes = notes;

    }

    public int getCreditNoteDetailID() {
        return creditNoteDetailID;
    }

    public void setCreditNoteDetailID(int creditNoteDetailID) {
        this.creditNoteDetailID = creditNoteDetailID;
    }

    public CreditNoteRequest getCreditNoteRequest() {
        return creditNoteRequest;
    }

    public void setCreditNoteRequest(CreditNoteRequest creditNote) {
        this.creditNoteRequest = creditNote;
    }

    public InvoiceDetails getInvoiceDetails() {
        return invoiceDetail;
    }

    public void setInvoiceDetails(InvoiceDetails invoiceDetail) {
        this.invoiceDetail = invoiceDetail;
    }

    public int getBaseQuantity() {
        return baseQuantity;
    }

    public void setBaseQuantity(int baseQuantity) {
        this.baseQuantity = baseQuantity;
    }

    public String getUnitMeasure() {
        return unitMeasure;
    }

    public void setUnitMeasure(String unitMeasure) {
        this.unitMeasure = unitMeasure;
    }

    public int getMeasureSize() {
        return measureSize;
    }

    public void setMeasureSize(int measureSize) {
        this.measureSize = measureSize;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public double getUnitPrice() {
        return unitPrice;
    }

    public void setUnitPrice(double unitPrice) {
        this.unitPrice = unitPrice;
    }

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof CreditNoteRequestDetails)) {
            return false;
        }

        CreditNoteRequestDetails creditNoteRequestDetails = (CreditNoteRequestDetails) o;
        if (this.invoiceDetail != null) {
            return this.getInvoiceDetails().equals(creditNoteRequestDetails.getInvoiceDetails())
                    && this.getCreditNoteRequest().equals(creditNoteRequestDetails.getCreditNoteRequest());
        }
        return false;
    }

    @Override
    public int hashCode() {
        return invoiceDetail.hashCode() + creditNoteRequest.hashCode();

    }

    @Override
    public Object getId() {
        return this.creditNoteDetailID;
    }

    @Override
    public String getDisplayKey() {
        return this.invoiceDetail.getDisplayKey();
    }

}
