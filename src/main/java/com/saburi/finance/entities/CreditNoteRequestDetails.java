/*
 Sam Buriima
generated by Saburi Tools
*/
package com.saburi.finance.entities;

import java.util.Objects;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import com.saburi.common.entities.DBEntity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.validation.constraints.NotNull;
import javax.persistence.JoinColumn;
import javax.persistence.ForeignKey;
import javax.persistence.OneToOne;
import javax.validation.constraints.Size;


@Entity
@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
@Table(
        uniqueConstraints = @UniqueConstraint(columnNames = {"creditNoteRequestID","invoiceDetailsID"}, name = "uqCreditNoteRequestInvoiceDetails")
)
public class CreditNoteRequestDetails extends DBEntity{

@Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(updatable = false, nullable = false)
private int creditNoteDetailID;
@NotNull(message =  "The field: Credit Note Request cannot be null")
@OneToOne
@JoinColumn(name = "creditNoteRequestID",foreignKey = @ForeignKey(name = "fkCreditNoteRequestIDCreditNoteRequestDetails"))private CreditNoteRequest creditNoteRequest;
@NotNull(message =  "The field: Invoice Details cannot be null")
@OneToOne
@JoinColumn(name = "invoiceDetailsID",foreignKey = @ForeignKey(name = "fkInvoiceDetailsIDCreditNoteRequestDetails"))private InvoiceDetails invoiceDetails;
@Column(name = "baseQuantity")private int baseQuantity;
@Size(max =  100, message =  "The field: Unit Measure size cannot be greater than 100")
@Column(length =  100)
private String unitMeasure;
@Column(name = "measureSize")private int measureSize;
@Column(name = "quantity")private int quantity;
@Column(name = "unitPrice")private double unitPrice;
@Column(name = "amount")private double amount;
@Size(max =  100, message =  "The field: Notes size cannot be greater than 100")
@Column(length =  100)
private String notes;

public CreditNoteRequestDetails(){
}
public  CreditNoteRequestDetails(int creditNoteDetailID,CreditNoteRequest creditNoteRequest,InvoiceDetails invoiceDetails,int baseQuantity,String unitMeasure,int measureSize,int quantity,double unitPrice,double amount,String notes){
 this.creditNoteDetailID = creditNoteDetailID;
this.creditNoteRequest = creditNoteRequest;
this.invoiceDetails = invoiceDetails;
this.baseQuantity = baseQuantity;
this.unitMeasure = unitMeasure;
this.measureSize = measureSize;
this.quantity = quantity;
this.unitPrice = unitPrice;
this.amount = amount;
this.notes = notes;

}

public int getCreditNoteDetailID(){
 return creditNoteDetailID;
}
public void setCreditNoteDetailID(int creditNoteDetailID){
this.creditNoteDetailID = creditNoteDetailID;
}public CreditNoteRequest getCreditNoteRequest(){
 return creditNoteRequest;
}
public void setCreditNoteRequest(CreditNoteRequest creditNoteRequest){
this.creditNoteRequest = creditNoteRequest;
}public InvoiceDetails getInvoiceDetails(){
 return invoiceDetails;
}
public void setInvoiceDetails(InvoiceDetails invoiceDetails){
this.invoiceDetails = invoiceDetails;
}public int getBaseQuantity(){
 return baseQuantity;
}
public void setBaseQuantity(int baseQuantity){
this.baseQuantity = baseQuantity;
}public String getUnitMeasure(){
 return unitMeasure;
}
public void setUnitMeasure(String unitMeasure){
this.unitMeasure = unitMeasure;
}public int getMeasureSize(){
 return measureSize;
}
public void setMeasureSize(int measureSize){
this.measureSize = measureSize;
}public int getQuantity(){
 return quantity;
}
public void setQuantity(int quantity){
this.quantity = quantity;
}public double getUnitPrice(){
 return unitPrice;
}
public void setUnitPrice(double unitPrice){
this.unitPrice = unitPrice;
}public double getAmount(){
 return amount;
}
public void setAmount(double amount){
this.amount = amount;
}public String getNotes(){
 return notes;
}
public void setNotes(String notes){
this.notes = notes;
}
@Override
public boolean equals(Object o){
 if (this == o) {
            return true;
        }
        if (o == null) {
            return false;
        }
        if (getClass() != o.getClass()) {
            return false;
        }
        final CreditNoteRequestDetails creditNoteRequestDetails = (CreditNoteRequestDetails) o; if (!Objects.equals(this.creditNoteRequest, creditNoteRequestDetails.creditNoteRequest)) {
            return false;
        }return Objects.equals(this.invoiceDetails, creditNoteRequestDetails.invoiceDetails);
}
@Override
public int hashCode(){
 return  Objects.hashCode(this.creditNoteRequest)+Objects.hashCode(this.invoiceDetails);
}
 @Override
public Object getId(){
return this.creditNoteDetailID;
}
 @Override
public String getDisplayKey(){
return this.invoiceDetails.getDisplayKey();
}


}
