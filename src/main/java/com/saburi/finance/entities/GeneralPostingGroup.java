/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.entities;

import com.saburi.common.entities.DBEntity;
import com.saburi.common.entities.LookupData;
import javax.persistence.Entity;
import javax.persistence.Id;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;
import javax.persistence.Column;
import javax.validation.constraints.Size;
import javax.validation.constraints.NotNull;
import javax.persistence.JoinColumn;
import javax.persistence.ForeignKey;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

@Entity
@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
@Table(
        name = "GeneralPostingGroup",
        uniqueConstraints = @UniqueConstraint(columnNames = {"businessGroupID", "itemGroupID"}, name = "uqBusinessGroupIDItemGroupIDGeneralPostingGroup")
)
public class GeneralPostingGroup extends DBEntity {

    @Column(updatable = false)
    private int idHelper;
    @Id
    @NotNull(message = "The field: General Posting ID cannot be null")
    @Size(max = 20, message = "The field: General Posting ID size cannot be greater than 20")
    @Column(length = 20, updatable = false)
    private String generalPostingID;
    @NotNull(message = "The field: Business Group cannot be null")
    @OneToOne
    @JoinColumn(name = "businessGroupID", foreignKey = @ForeignKey(name = "fkBusinessGroupIDGeneralPostingGroup"))
    private LookupData businessGroup;
    @NotNull(message = "The field: Item Group cannot be null")
    @OneToOne
    @JoinColumn(name = "itemGroupID", foreignKey = @ForeignKey(name = "fkItemGroupIDGeneralPostingGroup"))
    private LookupData itemGroup;
    @OneToOne
    @JoinColumn(name = "salesAccountID", foreignKey = @ForeignKey(name = "fkSalesAccountIDGeneralPostingGroup"))
    private ChartAccount salesAccount;
    @OneToOne
    @JoinColumn(name = "salesDiscountAccountID", foreignKey = @ForeignKey(name = "fkSalesDiscountAccountIDGeneralPostingGroup"))
    private ChartAccount salesDiscountAccount;
    @OneToOne
    @JoinColumn(name = "salesReturnAccountID", foreignKey = @ForeignKey(name = "fkSalesReturnAccountIDGeneralPostingGroup"))
    private ChartAccount salesReturnAccount;
    @OneToOne
    @JoinColumn(name = "purchasesAccountID", foreignKey = @ForeignKey(name = "fkPurchasesAccountIDGeneralPostingGroup"))
    private ChartAccount purchasesAccount;
    @OneToOne
    @JoinColumn(name = "directCostAppliedAccountID", foreignKey = @ForeignKey(name = "fkDirectCostAppliedAccountIDGeneralPostingGroup"))
    private ChartAccount directCostAppliedAccount;
    @OneToOne
    @JoinColumn(name = "purchaseDiscountAccountID", foreignKey = @ForeignKey(name = "fkPurchaseDiscountAccountIDGeneralPostingGroup"))
    private ChartAccount purchaseDiscountAccount;
    @OneToOne
    @JoinColumn(name = "purchaseReturnAccountID", foreignKey = @ForeignKey(name = "fkPurchaseReturnAccountIDGeneralPostingGroup"))
    private ChartAccount purchaseReturnAccount;

    public GeneralPostingGroup() {
    }

    public GeneralPostingGroup(int idHelper, String generalPostingID, LookupData businessGroup, LookupData itemGroup, ChartAccount salesAccount, ChartAccount salesDiscountAccount, ChartAccount salesReturnAccount, ChartAccount purchasesAccount, ChartAccount directCostAppliedAccount, ChartAccount purchaseDiscountAccount, ChartAccount purchaseReturnAccount) {
        this.idHelper = idHelper;
        this.generalPostingID = generalPostingID;
        this.businessGroup = businessGroup;
        this.itemGroup = itemGroup;
        this.salesAccount = salesAccount;
        this.salesDiscountAccount = salesDiscountAccount;
        this.salesReturnAccount = salesReturnAccount;
        this.purchasesAccount = purchasesAccount;
        this.directCostAppliedAccount = directCostAppliedAccount;
        this.purchaseDiscountAccount = purchaseDiscountAccount;
        this.purchaseReturnAccount = purchaseReturnAccount;

    }

    public int getIdHelper() {
        return idHelper;
    }

    public void setIdHelper(int idHelper) {
        this.idHelper = idHelper;
    }

    public String getGeneralPostingID() {
        return generalPostingID;
    }

    public void setGeneralPostingID(String generalPostingID) {
        this.generalPostingID = generalPostingID;
    }

    public LookupData getBusinessGroup() {
        return businessGroup;
    }

    public void setBusinessGroup(LookupData businessGroup) {
        this.businessGroup = businessGroup;
    }

    public LookupData getItemGroup() {
        return itemGroup;
    }

    public void setItemGroup(LookupData itemGroup) {
        this.itemGroup = itemGroup;
    }

    public ChartAccount getSalesAccount() {
        return salesAccount;
    }

    public void setSalesAccount(ChartAccount salesAccount) {
        this.salesAccount = salesAccount;
    }

    public ChartAccount getSalesDiscountAccount() {
        return salesDiscountAccount;
    }

    public void setSalesDiscountAccount(ChartAccount salesDiscountAccount) {
        this.salesDiscountAccount = salesDiscountAccount;
    }

    public ChartAccount getSalesReturnAccount() {
        return salesReturnAccount;
    }

    public void setSalesReturnAccount(ChartAccount salesReturnAccount) {
        this.salesReturnAccount = salesReturnAccount;
    }

    public ChartAccount getPurchasesAccount() {
        return purchasesAccount;
    }

    public void setPurchasesAccount(ChartAccount purchasesAccount) {
        this.purchasesAccount = purchasesAccount;
    }

    public ChartAccount getDirectCostAppliedAccount() {
        return directCostAppliedAccount;
    }

    public void setDirectCostAppliedAccount(ChartAccount directCostAppliedAccount) {
        this.directCostAppliedAccount = directCostAppliedAccount;
    }

    public ChartAccount getPurchaseDiscountAccount() {
        return purchaseDiscountAccount;
    }

    public void setPurchaseDiscountAccount(ChartAccount purchaseDiscountAccount) {
        this.purchaseDiscountAccount = purchaseDiscountAccount;
    }

    public ChartAccount getPurchaseReturnAccount() {
        return purchaseReturnAccount;
    }

    public void setPurchaseReturnAccount(ChartAccount purchaseReturnAccount) {
        this.purchaseReturnAccount = purchaseReturnAccount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof GeneralPostingGroup)) {
            return false;
        }

        GeneralPostingGroup generalPostingGroup = (GeneralPostingGroup) o;

        return this.getId().equals(generalPostingGroup.getId());
    }

    @Override
    public int hashCode() {
        return this.generalPostingID.hashCode();

    }

    @Override
    public Object getId() {
        return this.generalPostingID;
    }

    @Override
    public String getDisplayKey() {
        return this.itemGroup.getDisplayKey() + " " + this.salesAccount.getDisplayKey();
    }

}
