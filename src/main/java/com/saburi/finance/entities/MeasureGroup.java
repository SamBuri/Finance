/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.entities;

import com.saburi.common.entities.DBEntity;
import com.saburi.common.entities.LookupData;
import javax.persistence.Entity;
import javax.persistence.Id;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;
import javax.validation.constraints.NotNull;
import javax.persistence.Column;
import javax.validation.constraints.Size;
import javax.persistence.JoinColumn;
import javax.persistence.ForeignKey;
import javax.persistence.OneToOne;
import java.util.List;
import javax.persistence.CascadeType;
import java.util.ArrayList;
import javax.persistence.OneToMany;

@Entity
@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
public class MeasureGroup extends DBEntity {

    @Column(updatable = false)
    private int idHelper;
    @Id
    @NotNull(message = "The field: Measure Group ID cannot be null")
    @Size(max = 20, message = "The field: Measure Group ID size cannot be greater than 20")
    @Column(length = 20, updatable = false)
    private String measureGroupID;
    @Size(max = 40, message = "The field: Measure Group Name size cannot be greater than 40")
    @NotNull(message = "The field: Measure Group Name cannot be null")
    @Column(length = 40, unique = true)
    private String measureGroupName;
    @OneToOne
    @JoinColumn(name = "baseUnitMeasureID", foreignKey = @ForeignKey(name = "fkBaseUnitMeasureIDMeasureGroup"))
    private LookupData baseUnitMeasure;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "measureGroup")
    
    private List<MeasureRelation> measureRelations = new ArrayList<>();

    public MeasureGroup() {
    }

    public MeasureGroup(int idHelper, String measureGroupID, String measureGroupName, LookupData baseUnitMeasure) {
        this.idHelper = idHelper;
        this.measureGroupID = measureGroupID;
        this.measureGroupName = measureGroupName;
        this.baseUnitMeasure = baseUnitMeasure;

    }

    public int getIdHelper() {
        return idHelper;
    }

    public void setIdHelper(int idHelper) {
        this.idHelper = idHelper;
    }

    public String getMeasureGroupID() {
        return measureGroupID;
    }

    public void setMeasureGroupID(String measureGroupID) {
        this.measureGroupID = measureGroupID;
    }

    public String getMeasureGroupName() {
        return measureGroupName;
    }

    public void setMeasureGroupName(String measureGroupName) {
        this.measureGroupName = measureGroupName;
    }

    public LookupData getBaseUnitMeasure() {
        return baseUnitMeasure;
    }

    public void setBaseUnitMeasure(LookupData baseUnitMeasure) {
        this.baseUnitMeasure = baseUnitMeasure;
    }

    public List<MeasureRelation> getMeasureRelations() {
        return measureRelations;
    }

    public void setMeasureRelations(List<MeasureRelation> measureRelations) {
        this.measureRelations = measureRelations;
    
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof MeasureGroup)) {
            return false;
        }

        MeasureGroup measureGroup = (MeasureGroup) o;

        return this.getId().equals(measureGroup.getId());
    }

    @Override
    public int hashCode() {
        return this.measureGroupID.hashCode();

    }

    @Override
    public Object getId() {
        return this.measureGroupID;
    }

    @Override
    public String getDisplayKey() {
        return this.measureGroupName;
    }

}
