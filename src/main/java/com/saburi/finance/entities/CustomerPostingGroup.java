/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.entities;

import com.saburi.common.entities.DBEntity;
import com.saburi.common.entities.LookupData;
import javax.persistence.Entity;
import javax.persistence.Id;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;
import javax.validation.constraints.NotNull;
import javax.persistence.Column;
import javax.validation.constraints.Size;
import javax.persistence.JoinColumn;
import javax.persistence.ForeignKey;
import javax.persistence.OneToOne;

@Entity
@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
public class CustomerPostingGroup extends DBEntity {

    @Column(updatable = false)
    private int idHelper;
    @Id
    @NotNull(message = "The field: Customer Posting Group ID cannot be null")
    @Size(max = 20, message = "The field: Customer Posting Group ID size cannot be greater than 20")
    @Column(length = 20, updatable = false)
    private String customerPostingGroupID;
    @NotNull(message = "The field: Customer Group cannot be null")
    @OneToOne
    @JoinColumn(name = "customerGroupID", unique = true, foreignKey = @ForeignKey(name = "fkCustomerGroupIDCustomerPostingGroup"))
    private LookupData customerGroup;
    @OneToOne
    @JoinColumn(name = "receivableAccountID", foreignKey = @ForeignKey(name = "fkReceivableAccountIDCustomerPostingGroup"))
    private ChartAccount receivableAccount;
    @OneToOne
    @JoinColumn(name = "serviceChargeAccountID", foreignKey = @ForeignKey(name = "fkServiceChargeAccountIDCustomerPostingGroup"))
    private ChartAccount serviceChargeAccount;
    @OneToOne
    @JoinColumn(name = "paymentDiscountAccountID", foreignKey = @ForeignKey(name = "fkPaymentDiscountAccountIDCustomerPostingGroup"))
    private ChartAccount paymentDiscountAccount;
    @OneToOne
    @JoinColumn(name = "unPaidRefundsID", foreignKey = @ForeignKey(name = "fkUnPaidRefundsIDCustomerPostingGroup"))
    private ChartAccount unPaidRefunds;
    @OneToOne
    @JoinColumn(name = "customerDepositsID", foreignKey = @ForeignKey(name = "fkCustomerDepositsIDCustomerPostingGroup"))
    private ChartAccount customerDeposits;

    public CustomerPostingGroup() {
    }

    public CustomerPostingGroup(int idHelper, String customerPostingGroupID, LookupData customerGroup, ChartAccount receivableAccount, ChartAccount serviceChargeAccount, ChartAccount paymentDiscountAccount, ChartAccount unPaidRefunds, ChartAccount customerDeposits) {
        this.idHelper = idHelper;
        this.customerPostingGroupID = customerPostingGroupID;
        this.customerGroup = customerGroup;
        this.receivableAccount = receivableAccount;
        this.serviceChargeAccount = serviceChargeAccount;
        this.paymentDiscountAccount = paymentDiscountAccount;
        this.unPaidRefunds = unPaidRefunds;
        this.customerDeposits = customerDeposits;

    }

    public int getIdHelper() {
        return idHelper;
    }

    public void setIdHelper(int idHelper) {
        this.idHelper = idHelper;
    }

    public String getCustomerPostingGroupID() {
        return customerPostingGroupID;
    }

    public void setCustomerPostingGroupID(String customerPostingGroupID) {
        this.customerPostingGroupID = customerPostingGroupID;
    }

    public LookupData getCustomerGroup() {
        return customerGroup;
    }

    public void setCustomerGroup(LookupData customerGroup) {
        this.customerGroup = customerGroup;
    }

    public ChartAccount getReceivableAccount() {
        return receivableAccount;
    }

    public void setReceivableAccount(ChartAccount receivableAccount) {
        this.receivableAccount = receivableAccount;
    }

    public ChartAccount getServiceChargeAccount() {
        return serviceChargeAccount;
    }

    public void setServiceChargeAccount(ChartAccount serviceChargeAccount) {
        this.serviceChargeAccount = serviceChargeAccount;
    }

    public ChartAccount getPaymentDiscountAccount() {
        return paymentDiscountAccount;
    }

    public void setPaymentDiscountAccount(ChartAccount paymentDiscountAccount) {
        this.paymentDiscountAccount = paymentDiscountAccount;
    }

    public ChartAccount getUnPaidRefunds() {
        return unPaidRefunds;
    }

    public void setUnPaidRefunds(ChartAccount unPaidRefunds) {
        this.unPaidRefunds = unPaidRefunds;
    }

    public ChartAccount getCustomerDeposits() {
        return customerDeposits;
    }

    public void setCustomerDeposits(ChartAccount customerDeposits) {
        this.customerDeposits = customerDeposits;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof CustomerPostingGroup)) {
            return false;
        }

        CustomerPostingGroup customerPostingGroup = (CustomerPostingGroup) o;

        return this.getId().equals(customerPostingGroup.getId());
    }

    @Override
    public int hashCode() {
        return this.customerPostingGroupID.hashCode();

    }

    @Override
    public Object getId() {
        return this.customerPostingGroupID;
    }

    @Override
    public String getDisplayKey() {
        return this.customerGroup.getDisplayKey();
    }

}
