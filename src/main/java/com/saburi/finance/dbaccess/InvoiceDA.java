/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.dbaccess;

import com.saburi.common.dbaccess.DBAccess;
import com.saburi.common.dbaccess.IDGeneratorDA;
import com.saburi.common.dbaccess.OptionsDA;
import com.saburi.finance.entities.Invoice;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import com.saburi.finance.entities.ChartAccount;
import com.saburi.finance.entities.Currency;
import java.util.List;
import javafx.util.Pair;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import java.time.LocalDate;
import static com.saburi.common.utils.Utilities.formatDate;
import com.saburi.finance.utils.FinanceEnums.InvoiceTypes;
import com.saburi.finance.entities.Customer;
import com.saburi.common.entities.DBEntity;
import com.saburi.finance.entities.FinancialPeriod;
import com.saburi.finance.entities.GeneralPostingGroup;
import static com.saburi.common.utils.Utilities.formatNumber;
import com.saburi.finance.entities.InvoiceDetails;
import com.saburi.finance.entities.JournalEntry;
import com.saburi.finance.entities.JournalEntryDetail;
import com.saburi.common.entities.LookupData;
import com.saburi.finance.entities.SaleOrderDetail;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;
import com.saburi.finance.utils.FinanceEnums;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import com.saburi.finance.utils.AccountAmount;
import com.saburi.finance.utils.FinanceEnums.AccountActions;
import com.saburi.finance.utils.FinanceEnums.AccountGroups;
import com.saburi.finance.utils.FinanceEnums.DocumentTypes;
import com.saburi.common.utils.CommonEnums.EntryModes;
import com.saburi.common.utils.CommonEnums.Rights;
import com.saburi.finance.utils.FinanceEnums.JournalTypes;
import com.saburi.finance.utils.FinanceEnums.PostStatus;
import com.saburi.finance.utils.FinanceOptionKeys;
import com.saburi.finance.utils.CurrentFinacialPeriod;
import static com.saburi.common.utils.Utilities.toWords;

public class InvoiceDA extends DBAccess {

    private Invoice invoice = new Invoice();
    private final SimpleIntegerProperty idHelper = new SimpleIntegerProperty(this, "idHelper");
    private final SimpleStringProperty invoiceID = new SimpleStringProperty(this, "invoiceID");
    private final SimpleObjectProperty invoiceDate = new SimpleObjectProperty(this, "invoiceDate");
    private final SimpleStringProperty invoiceDateDisplay = new SimpleStringProperty(this, "invoiceDateDisplay");
    private final SimpleObjectProperty invoiceType = new SimpleObjectProperty(this, "invoiceType");
    private final SimpleStringProperty billToDisplay = new SimpleStringProperty(this, "billToDisplay");
    private final SimpleObjectProperty billToID = new SimpleObjectProperty(this, "billToID");
    private Customer billTo;
    private final SimpleDoubleProperty originalAmount = new SimpleDoubleProperty(this, "originalAmount");
    private final SimpleStringProperty originalAmountDisplay = new SimpleStringProperty(this, "originalAmountDisplay");
    private final SimpleDoubleProperty amount = new SimpleDoubleProperty(this, "amount");
    private final SimpleStringProperty amountDisplay = new SimpleStringProperty(this, "amountDisplay");
    private final SimpleStringProperty amountWords = new SimpleStringProperty(this, "amountWords");
    private final SimpleDoubleProperty amountPaid = new SimpleDoubleProperty(this, "amountPaid");
    private final SimpleStringProperty amountPaidDisplay = new SimpleStringProperty(this, "amountPaidDisplay");

    private List<InvoiceDetails> invoiceDetails = new ArrayList<>();

    public InvoiceDA() {
        createSearchColumns();
    }

    public InvoiceDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public InvoiceDA(Invoice invoice) {
        this.invoice = invoice;
        initialseProprties();
        createSearchColumns();
    }

    public InvoiceDA(String persistenceUnit, Invoice invoice) {
        super(persistenceUnit);
        this.invoice = invoice;
        initialseProprties();
        createSearchColumns();
    }

    public InvoiceDA(String invoiceID, LocalDate invoiceDate, InvoiceTypes invoiceType, Customer billTo, double amount, String amountWords) {
        this.invoice = new Invoice(getNextIdHelper(), invoiceID, invoiceDate, invoiceType, billTo, amount, amountWords);
        initialseProprties();
        createSearchColumns();
    }

    public InvoiceDA(String persistenceUnit, String invoiceID, LocalDate invoiceDate, InvoiceTypes invoiceType, Customer billTo, double amount, String amountWords) {
        super(persistenceUnit);
        this.invoice = new Invoice(getNextIdHelper(), invoiceID, invoiceDate, invoiceType, billTo, amount, amountWords);
        initialseProprties();
        createSearchColumns();
    }

    public int getIdHelper() {
        return idHelper.get();
    }

    public void setIdHelper(int idHelper) {
        invoice.setIdHelper(idHelper);
        this.idHelper.set(idHelper);
    }

    public String getInvoiceID() {
        return invoiceID.get();
    }

    public void setInvoiceID(String invoiceID) {
        invoice.setInvoiceID(invoiceID);
        this.invoiceID.set(invoiceID);
    }

    public LocalDate getInvoiceDate() {
        return (LocalDate) invoiceDate.get();
    }

    public String getInvoiceDateDisplay() {
        return invoiceDateDisplay.get();
    }

    public void setInvoiceDate(LocalDate invoiceDate) {
        invoice.setInvoiceDate(invoiceDate);
        this.invoiceDate.set(invoiceDate);
    }

    public Object getInvoiceType() {
        return invoiceType.get();
    }

    public void setInvoiceType(InvoiceTypes invoiceType) {
        invoice.setInvoiceType(invoiceType);
        this.invoiceType.set(invoiceType);
    }

    public Customer getBillTo() {
        return billTo;
    }

    public Object getBillToID() {
        return billToID.get();
    }

    public String getBillToDisplay() {
        return billToDisplay.get();
    }

    public CustomerDA getBillToDA() {
        if (this.billTo == null) {
            return new CustomerDA();
        } else {
            return new CustomerDA(this.billTo);
        }
    }

    public Pair<String, Object> getBillToPair() {
        if (this.getBillToDA() == null) {
            return new Pair<>("", "");
        } else {
            return this.getBillToDA().keyValuePair();
        }
    }

    public void setBillTo(Customer billTo) {
        invoice.setBillTo(billTo);
        this.billTo = billTo;
    }

    public double getOriginalAmount() {
        return originalAmount.get();
    }

    public String getOriginalAmountDisplay() {
        return originalAmountDisplay.get();
    }

    public double getAmount() {
        return amount.get();
    }

    public String getAmountDisplay() {
        return amountDisplay.get();
    }

    public void setAmount(double amount) {
        invoice.setAmount(amount);
        this.amount.set(amount);
        this.amountDisplay.set(formatNumber(amount));
    }

    public String getAmountWords() {
        return amountWords.get();
    }

    public void setAmountWords(String amountWords) {
        invoice.setAmountWords(amountWords);
        this.amountWords.set(amountWords);
    }

    public double getAmountPaid() {
        return amountPaid.get();
    }

    public String getAmountPaidDisplay() {
        return amountPaidDisplay.get();
    }

    public void setAmountPaid(double amountPaid) {
        invoice.setAmountPaid(amountPaid);
        this.amountPaid.set(amountPaid);
        this.amountPaidDisplay.set(formatNumber(amountPaid));
    }

    public List<InvoiceDetails> getInvoiceDetails() {
        return invoiceDetails;
    }

    public List<InvoiceDetailsDA> getInvoiceDetailsDAs() {
        return InvoiceDetailsDA.getInvoiceDetailsDAs(invoice.getInvoiceDetails());
    }

    public void setInvoiceDetails(List<InvoiceDetails> invoiceDetails) {
        invoice.setInvoiceDetails(invoiceDetails);
        this.invoiceDetails = invoiceDetails;
    }

    public void setInvoiceDetailsDAs(List<InvoiceDetailsDA> invoiceDetailsDAs) {
        this.invoice.setInvoiceDetails(InvoiceDetailsDA.getInvoiceDetailsList(invoiceDetailsDAs));

    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof InvoiceDA)) {
            return false;
        }

        InvoiceDA invoiceDA = (InvoiceDA) o;

        if (invoiceDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(invoiceDA.getId());
    }

    @Override
    public int hashCode() {
        return invoice.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = invoice;
        this.idHelper.set(invoice.getIdHelper());
        this.invoiceID.set(invoice.getInvoiceID());
        this.invoiceDate.set(invoice.getInvoiceDate());
        this.invoiceDateDisplay.set(formatDate(invoice.getInvoiceDate()));
        this.invoiceType.set(invoice.getInvoiceType());
        this.billTo = invoice.getBillTo();
        if (this.billTo != null) {
            this.billToID.set(billTo.getId());
            this.billToDisplay.set(billTo.getDisplayKey());
        }
        this.originalAmount.set(invoice.getOriginalAmount());
        this.originalAmountDisplay.set(formatNumber(originalAmount.get()));
        this.amount.set(invoice.getAmount());
        this.amountDisplay.set(formatNumber(invoice.getAmount()));
        this.amountWords.set(invoice.getAmountWords());
        this.amountPaid.set(invoice.getAmountPaid() - invoice.getAmountRefunded());
        this.amountPaidDisplay.set(formatNumber(amountPaid.get()));

        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("invoiceID", "Invoice ID", this.invoiceID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("invoiceDate", "Invoice Date", this.invoiceDate.get(), invoiceDateDisplay.get(), SearchDataTypes.DATE));
        this.searchColumns.add(new SearchColumn("invoiceType", "Invoice Type", this.invoiceType.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("billToID", "Bill To ID", this.billToID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("billToDisplay", "Bill To", this.billToDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("originalAmount", "Original Amount", this.originalAmount.get(), originalAmountDisplay.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("amount", "Amount", this.amount.get(), amountDisplay.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("amountWords", "Amount Words", this.amountWords.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("amountPaid", "Amount Paid", this.amountPaid.get(), amountPaidDisplay.get(), SearchDataTypes.NUMBER));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.invoice.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.invoice.getDisplayKey();
    }

    public static List<InvoiceDA> getInvoiceDAs(List<Invoice> invoices) {
        List<InvoiceDA> list = new ArrayList<>();
        invoices.forEach((invoice) -> {
            list.add(new InvoiceDA(invoice));
        });
        return list;
    }

    public static List<Invoice> getInvoiceList(List<InvoiceDA> invoiceDAs) {
        List<Invoice> invoices = new ArrayList<>();
        invoiceDAs.forEach(a -> invoices.add(a.invoice));
        return invoices;
    }

    public boolean save() throws Exception {

        Map<List<? extends DBEntity>, Rights> map = new HashMap<>();
        List<Invoice> invoices = new ArrayList<>();
        List<JournalEntry> journalEntries = new ArrayList<>();
        JournalEntry journalEntry = this.makeJournalEntries();
        journalEntries.add(journalEntry);
        invoices.add(invoice);
        map.put(invoices, Rights.Create);
        map.put(journalEntries, Rights.Create);

        if (invoice.getInvoiceType().equals(InvoiceTypes.Ordered)) {
            List<SaleOrderDetail> saleOrderDetails = new ArrayList<>();
            invoice.getInvoiceDetails().forEach(inv -> {
                SaleOrderDetail sODetail = inv.getSaleOrderDetails();
                sODetail.setInvoiceID(getInvoiceID());
                sODetail.setInvoiceStatus(FinanceEnums.InvoiceStatus.Invoiced);
                saleOrderDetails.add(sODetail);
            });
            map.put(saleOrderDetails, Rights.Update);
        }
        super.processBatchList(map);
        if (OptionsDA.getBooleanOptionValue(FinanceOptionKeys.ENABLE_AUTO_GENERAL_LEDGER_POSTING)) {
            new JournalEntryDA(journalEntry).post();
        }
        return true;

    }

    public boolean update() throws Exception {
        return super.merge(this.invoice);

    }

    public boolean delete() {
        return super.remove(this.invoice);

    }

    public Invoice getInvoice(String invoiceID) {
        return (Invoice) super.findJoin(Invoice.class, invoiceID, "invoiceDetails");
    }

    public Invoice getInvoice() {
        return this.invoice;
    }

    public List<Invoice> getInvoices() {
        return super.find(Invoice.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(Invoice.class).forEach(o -> list.add(new InvoiceDA((Invoice) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public InvoiceDA get(String invoiceID) throws Exception {
        Invoice oInvoice = getInvoice(invoiceID);
        if (oInvoice == null) {
            throw new Exception("No Record with id: " + invoiceID);
        }
        return new InvoiceDA(oInvoice);
    }

    public List<InvoiceDA> get(String columName, Object value) {
        List<InvoiceDA> list = new ArrayList<>();
        super.selectQuery(Invoice.class, columName, value).forEach(da -> list.add(new InvoiceDA((Invoice) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<InvoiceDA> toDaList(List<Invoice> invoices) {
        List<InvoiceDA> invoiceDAs = new ArrayList<>();
        invoices.forEach(s -> invoiceDAs.add(new InvoiceDA(s)));
        return invoiceDAs;
    }

    public List<DBAccess> toDBAccessList(List<Invoice> invoices) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        invoices.forEach(s -> dbAccesses.add(new InvoiceDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(Invoice.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(Invoice.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIdHelper() {
        return this.getMax("idHelper") + 1;
    }

    public String getNextInvoiceID(int idHelper) {
        return new IDGeneratorDA().getToAppendString(Invoice.class.getSimpleName(), idHelper);
    }

    public List<Invoice> getInvoices(String columName, Object value) {
        return super.find(Invoice.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(Invoice.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                InvoiceDA invoiceDA = new InvoiceDA((Invoice) e[0]);
                invoiceDA.revisionEntity = (AppRevisionEntity) e[1];
                invoiceDA.oRevisionType = (RevisionType) e[2];
                invoiceDA.initRevProprties();
                invoiceDA.searchColumns.addAll(invoiceDA.getRevSearchColumns());
                dBAccesses.add(invoiceDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    public List<Invoice> getDueInvoices(Customer client) {
        try {
            entityManager = entityManagerFactory.createEntityManager();
            CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
            CriteriaQuery<Invoice> criteriaQuery = criteriaBuilder.createQuery(Invoice.class);
            Root<Invoice> root = criteriaQuery.from(Invoice.class);
            criteriaQuery.where(criteriaBuilder.greaterThan(root.get("amount"), root.get("amountPaid")),
                    criteriaBuilder.equal(root.get("billTo"), client));
            criteriaQuery.orderBy(criteriaBuilder.asc(root.get("recordDateTime")));
            TypedQuery<Invoice> typedQuery = entityManager.createQuery(criteriaQuery);
            return typedQuery.getResultList();
        } catch (Exception e) {
            throw e;
        } finally {
            entityManager.close();
        }

    }

    public JournalEntry makeJournalEntries() throws Exception {
        JournalEntryDA journalEntryDA = new JournalEntryDA();
        FinancialPeriod financialPeriod = FinancialPeriodDA.getCurrentFinancialPeriodDA().getFinancialPeriod();
        int invoiceIdHelper = journalEntryDA.getNextIdHelper(financialPeriod);
        Currency currency = new CurrencyDA().getDefaultCurrency();
        String journalID = journalEntryDA.getNextJournalID(invoiceIdHelper, financialPeriod.getPeriodID());
        String narration = "Sales on Invoice ID: " + invoice.getInvoiceID() + " invoice to: " + invoice.getBillTo().getDisplayKey();
        String referenceNo = "";
        Customer billToCustomer = invoice.getBillTo();
        LookupData businessGroup = billToCustomer.getBusinessGroup();
        List<JournalEntryDetail> journalEntryDetails = new ArrayList<>();
        List<AccountAmount> discAccountAmounts = new ArrayList<>();
        List<AccountAmount> saleAccountAmounts = new ArrayList<>();

        double totalAmout = 0;
        for (InvoiceDetails e : invoice.getInvoiceDetails()) {
            double discount = e.getDiscount();
            double lineAmount = e.getUnitPrice() * e.getQuantity();
            GeneralPostingGroup generalPostingGroup = new GeneralPostingGroupDA().getGeneralPostingGroup(businessGroup, e.getItem().getItemGroup());
            saleAccountAmounts.add(new AccountAmount(generalPostingGroup.getSalesAccount(), lineAmount));
            totalAmout += lineAmount;
            if (discount > 0) {
                ChartAccount chartAccount = new GeneralPostingGroupDA().getSaleDiscountAccount(businessGroup, e.getItem().getItemGroup());
                discAccountAmounts.add(new AccountAmount(chartAccount, discount));
            }
        }

        JournalEntry journalEntry = new JournalEntry(invoiceIdHelper, financialPeriod, journalID,
                invoice.getInvoiceDate(), narration, DocumentTypes.Invoice, invoice.getInvoiceID(), referenceNo, currency,
                totalAmout, currency.getBuying(), totalAmout, toWords(totalAmout), PostStatus.Pending, JournalTypes.Sales, EntryModes.System);

        journalEntryDetails.add(new JournalEntryDetail(AccountGroups.Customer, journalEntry, billToCustomer.getCustomerID(),
                billToCustomer.getDisplayKey(), FinanceEnums.AccountTypes.Asset, AccountActions.Debit, 1, 1, invoice.getAmount(),
                narration, null));
        Map<ChartAccount, Double> groupedSalesAccounts = saleAccountAmounts.stream()
                .collect(Collectors.groupingBy(AccountAmount::getChartAccount, Collectors.summingDouble(AccountAmount::getAmount)));

        Map<ChartAccount, Double> groupedDiscAccounts = discAccountAmounts.stream()
                .collect(Collectors.groupingBy(AccountAmount::getChartAccount, Collectors.summingDouble(AccountAmount::getAmount)));

        groupedSalesAccounts.entrySet().forEach((entry) -> {
            journalEntryDetails.add(new JournalEntryDetail(AccountGroups.COA, journalEntry, entry.getKey().getAccountID(),
                    entry.getKey().getAccountName(), entry.getKey().getAccountCategory().getAccountType(), AccountActions.Credit, 1, 1, entry.getValue(),
                    narration, null));
        });

        groupedDiscAccounts.entrySet().forEach((entry) -> {
            journalEntryDetails.add(new JournalEntryDetail(AccountGroups.COA, journalEntry, entry.getKey().getAccountID(),
                    entry.getKey().getAccountName(), entry.getKey().getAccountCategory().getAccountType(), AccountActions.Debit, 1, 1, entry.getValue(),
                    narration, null));
        });

        journalEntry.setJournalEntryDetails(journalEntryDetails);
        return journalEntry;
    }

}
