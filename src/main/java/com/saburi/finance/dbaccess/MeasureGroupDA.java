/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.dbaccess;

import com.saburi.common.dbaccess.DBAccess;
import com.saburi.common.dbaccess.IDGeneratorDA;
import com.saburi.common.dbaccess.LookupDataDA;
import com.saburi.finance.entities.MeasureGroup;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.common.entities.LookupData;
import com.saburi.finance.entities.MeasureRelation;


public class MeasureGroupDA extends DBAccess {

    private MeasureGroup measureGroup = new MeasureGroup();
    private final SimpleIntegerProperty idHelper = new SimpleIntegerProperty(this, "idHelper");
    private final SimpleStringProperty measureGroupID = new SimpleStringProperty(this, "measureGroupID");
    private final SimpleStringProperty measureGroupName = new SimpleStringProperty(this, "measureGroupName");
    private final SimpleStringProperty baseUnitMeasureDisplay = new SimpleStringProperty(this, "baseUnitMeasureDisplay");
    private final SimpleObjectProperty baseUnitMeasureID = new SimpleObjectProperty(this, "baseUnitMeasureID");
    private LookupData baseUnitMeasure;
    private List<MeasureRelation> measureRelations = new ArrayList<>();

    public MeasureGroupDA() {
        createSearchColumns();
    }

    public MeasureGroupDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public MeasureGroupDA(MeasureGroup measureGroup) {
        this.measureGroup = measureGroup;
        initialseProprties();
        createSearchColumns();
    }

    public MeasureGroupDA(String persistenceUnit, MeasureGroup measureGroup) {
        super(persistenceUnit);
        this.measureGroup = measureGroup;
        initialseProprties();
        createSearchColumns();
    }

    public MeasureGroupDA(String measureGroupID, String measureGroupName, LookupData baseUnitMeasure) {
        this.measureGroup = new MeasureGroup(getNextIdHelper(), measureGroupID, measureGroupName, baseUnitMeasure);
        initialseProprties();
        createSearchColumns();
    }

    public MeasureGroupDA(String persistenceUnit, String measureGroupID, String measureGroupName, LookupData baseUnitMeasure) {
        super(persistenceUnit);
        this.measureGroup = new MeasureGroup(getNextIdHelper(), measureGroupID, measureGroupName, baseUnitMeasure);
        initialseProprties();
        createSearchColumns();
    }

    public int getIdHelper() {
        return idHelper.get();
    }

    public void setIdHelper(int idHelper) {
        measureGroup.setIdHelper(idHelper);
        this.idHelper.set(idHelper);
    }

    public String getMeasureGroupID() {
        return measureGroupID.get();
    }

    public void setMeasureGroupID(String measureGroupID) {
        measureGroup.setMeasureGroupID(measureGroupID);
        this.measureGroupID.set(measureGroupID);
    }

    public String getMeasureGroupName() {
        return measureGroupName.get();
    }

    public void setMeasureGroupName(String measureGroupName) {
        measureGroup.setMeasureGroupName(measureGroupName);
        this.measureGroupName.set(measureGroupName);
    }

    public LookupData getBaseUnitMeasure() {
        return baseUnitMeasure;
    }

    public Object getBaseUnitMeasureID() {
        return baseUnitMeasureID.get();
    }

    public String getBaseUnitMeasureDisplay() {
        return baseUnitMeasureDisplay.get();
    }

    public LookupDataDA getBaseUnitMeasureDA() {
        return this.baseUnitMeasure != null ? new LookupDataDA(this.baseUnitMeasure) : null;
    }

    public void setBaseUnitMeasure(LookupData baseUnitMeasure) {
        measureGroup.setBaseUnitMeasure(baseUnitMeasure);
        this.baseUnitMeasure = baseUnitMeasure;
        this.baseUnitMeasureID.set(baseUnitMeasure.getId());
        this.baseUnitMeasureDisplay.set(baseUnitMeasure.getDisplayKey());
    }

    public List<MeasureRelation> getMeasureRelations() {
        return measureRelations;
    }

    public List<MeasureRelationDA> getMeasureRelationsDAs() {
        return MeasureRelationDA.getMeasureRelationDAs(measureGroup.getMeasureRelations());
    }

    public void setMeasureRelations(List<MeasureRelation> measureRelations) {
        measureGroup.setMeasureRelations(measureRelations);
        this.measureRelations = measureRelations;
    }

    public void setMeasureRelationsDAs(List<MeasureRelationDA> measureRelationDAs) {
        this.measureGroup.setMeasureRelations(MeasureRelationDA.getMeasureRelationList(measureRelationDAs));

    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof MeasureGroupDA)) {
            return false;
        }

        MeasureGroupDA measureGroupDA = (MeasureGroupDA) o;

        if (measureGroupDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(measureGroupDA.getId());
    }

    @Override
    public int hashCode() {
        return measureGroup.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = measureGroup;
        this.idHelper.set(measureGroup.getIdHelper());
        this.measureGroupID.set(measureGroup.getMeasureGroupID());
        this.measureGroupName.set(measureGroup.getMeasureGroupName());
        this.baseUnitMeasure = measureGroup.getBaseUnitMeasure();
        if (this.baseUnitMeasure != null) {
            this.baseUnitMeasureID.set(baseUnitMeasure.getId());
            this.baseUnitMeasureDisplay.set(baseUnitMeasure.getDisplayKey());
        }
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("measureGroupID", "Measure Group ID", this.measureGroupID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("measureGroupName", "Measure Group Name", this.measureGroupName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("baseUnitMeasureID", "Base Unit Measure ID", this.baseUnitMeasureID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("baseUnitMeasureDisplay", "Base Unit Measure", this.baseUnitMeasureDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.measureGroup.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.measureGroup.getDisplayKey();
    }

    public static List<MeasureGroupDA> getMeasureGroupDAs(List<MeasureGroup> measureGroups) {
        List<MeasureGroupDA> list = new ArrayList<>();
        measureGroups.forEach((measureGroup) -> {
            list.add(new MeasureGroupDA(measureGroup));
        });
        return list;
    }

    public static List<MeasureGroup> getMeasureGroupList(List<MeasureGroupDA> measureGroupDAs) {
        List<MeasureGroup> measureGroups = new ArrayList<>();
        measureGroupDAs.forEach(a -> measureGroups.add(a.measureGroup));
        return measureGroups;
    }

    public boolean save() throws Exception {
        return super.persist(this.measureGroup);

    }

    public boolean update() throws Exception, Exception {
        return super.merge(this.measureGroup);

    }

    public boolean delete() {
        return super.remove(this.measureGroup);

    }

    public MeasureGroup getMeasureGroup(String measureGroupID) {
        return (MeasureGroup) super.findJoin(MeasureGroup.class, measureGroupID, "measureRelations");
    }

    public MeasureGroup getMeasureGroup() {
        return this.measureGroup;
    }

    public List<MeasureGroup> getMeasureGroups() {
        return super.find(MeasureGroup.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(MeasureGroup.class).forEach(o -> list.add(new MeasureGroupDA((MeasureGroup) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public MeasureGroupDA get(String measureGroupID) throws Exception {
        MeasureGroup oMeasureGroup = getMeasureGroup(measureGroupID);
        if (oMeasureGroup == null) {
            throw new Exception("No Record with id: " + measureGroupID);
        }
        return new MeasureGroupDA(oMeasureGroup);
    }

    public List<MeasureGroupDA> get(String columName, Object value) {
        List<MeasureGroupDA> list = new ArrayList<>();
        super.selectQuery(MeasureGroup.class, columName, value).forEach(da -> list.add(new MeasureGroupDA((MeasureGroup) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<MeasureGroupDA> toDaList(List<MeasureGroup> measureGroups) {
        List<MeasureGroupDA> measureGroupDAs = new ArrayList<>();
        measureGroups.forEach(s -> measureGroupDAs.add(new MeasureGroupDA(s)));
        return measureGroupDAs;
    }

    public List<DBAccess> toDBAccessList(List<MeasureGroup> measureGroups) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        measureGroups.forEach(s -> dbAccesses.add(new MeasureGroupDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(MeasureGroup.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(MeasureGroup.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIdHelper() {
        return this.getMax("idHelper") + 1;
    }

    public String getNextMeasureGroupID(int idHelper) {
        return new IDGeneratorDA().getToAppendString(MeasureGroup.class.getSimpleName(), idHelper);
    }

    public List<MeasureGroup> getMeasureGroups(String columName, Object value) {
        return super.find(MeasureGroup.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(MeasureGroup.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                MeasureGroupDA measureGroupDA = new MeasureGroupDA((MeasureGroup) e[0]);
                measureGroupDA.revisionEntity = (AppRevisionEntity) e[1];
                measureGroupDA.oRevisionType = (RevisionType) e[2];
                measureGroupDA.initRevProprties();
                measureGroupDA.searchColumns.addAll(measureGroupDA.getRevSearchColumns());
                dBAccesses.add(measureGroupDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    public MeasureRelation getDefaultMeasureRelation() {
        return new MeasureRelation(measureGroup, baseUnitMeasure, 1, null);
    }

    public MeasureRelationDA getDefaultMeasureRelationDA() {
        return new MeasureRelationDA(getDefaultMeasureRelation());
    }

    public List<MeasureRelation> getAllMeasureRelations() {
        measureRelations.add(0, getDefaultMeasureRelation());
        return measureRelations;
    }

    public List<MeasureRelationDA> getAllMeasureRelationsDAs() {
        List<MeasureRelationDA> measureRelationDAs = MeasureRelationDA.getMeasureRelationDAs(measureGroup.getMeasureRelations());
        measureRelationDAs.add(0, getDefaultMeasureRelationDA());
        return measureRelationDAs;
    }

}
