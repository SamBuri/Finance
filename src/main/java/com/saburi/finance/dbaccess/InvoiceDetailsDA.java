/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.dbaccess;

import com.saburi.common.dbaccess.DBAccess;
import com.saburi.common.dbaccess.LookupDataDA;
import com.saburi.finance.entities.InvoiceDetails;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.finance.entities.Invoice;
import com.saburi.finance.entities.Item;
import com.saburi.finance.entities.Customer;
import static com.saburi.common.utils.Utilities.formatNumber;
import com.saburi.common.entities.LookupData;
import com.saburi.finance.entities.MeasureRelation;
import java.time.LocalDate;
import java.util.Optional;
import com.saburi.finance.utils.FinanceEnums;
import static com.saburi.common.utils.Utilities.formatInteger;
import com.saburi.finance.entities.SaleOrderDetail;

public class InvoiceDetailsDA extends DBAccess {

    private InvoiceDetails invoiceDetails = new InvoiceDetails();
    private final SimpleIntegerProperty invoiceDetailID = new SimpleIntegerProperty(this, "invoiceDetailID");
    private final SimpleStringProperty invoiceDetailIDDisplay = new SimpleStringProperty(this, "invoiceDetailIDDisplay");
    private final SimpleStringProperty invoiceDisplay = new SimpleStringProperty(this, "invoiceDisplay");
    private final SimpleObjectProperty invoiceID = new SimpleObjectProperty(this, "invoiceID");
    private Invoice invoice;
    private final SimpleStringProperty itemDisplay = new SimpleStringProperty(this, "itemDisplay");
    private final SimpleObjectProperty itemID = new SimpleObjectProperty(this, "itemID");
    private Item item;
    private final SimpleStringProperty invoiceSourceID = new SimpleStringProperty(this, "invoiceSourceID");
    private final SimpleIntegerProperty baseQuantity = new SimpleIntegerProperty(this, "baseQuantity");
    private final SimpleStringProperty baseQuantityDisplay = new SimpleStringProperty(this, "baseQuantityDisplay");
    private final SimpleStringProperty unitMeasure = new SimpleStringProperty(this, "unitMeasure");
    private final SimpleIntegerProperty measureSize = new SimpleIntegerProperty(this, "measureSize");
    private final SimpleStringProperty measureSizeDisplay = new SimpleStringProperty(this, "measureSizeDisplay");
    private final SimpleIntegerProperty quantity = new SimpleIntegerProperty(this, "quantity");
    private final SimpleStringProperty quantityDisplay = new SimpleStringProperty(this, "quantityDisplay");
    private final SimpleDoubleProperty unitPrice = new SimpleDoubleProperty(this, "unitPrice");
    private final SimpleStringProperty unitPriceDisplay = new SimpleStringProperty(this, "unitPriceDisplay");
    private final SimpleDoubleProperty discount = new SimpleDoubleProperty(this, "discount");
    private final SimpleStringProperty discountDisplay = new SimpleStringProperty(this, "discountDisplay");
    private final SimpleDoubleProperty amount = new SimpleDoubleProperty(this, "amount");
    private final SimpleStringProperty amountDisplay = new SimpleStringProperty(this, "amountDisplay");
    private final SimpleIntegerProperty originalQuantity = new SimpleIntegerProperty(this, "originalQuantity");
    private final SimpleStringProperty originalQuantityDisplay = new SimpleStringProperty(this, "originalQuantityDisplay");
    private final SimpleDoubleProperty originalAmount = new SimpleDoubleProperty(this, "originalAmount");
    private final SimpleStringProperty originalAmountDisplay = new SimpleStringProperty(this, "originalAmountDisplay");
    private final SimpleStringProperty locationDisplay = new SimpleStringProperty(this, "locationDisplay");
    private final SimpleObjectProperty locationID = new SimpleObjectProperty(this, "locationID");
    private LookupData location;

    //Invoices
    private final SimpleStringProperty sellToDisplay = new SimpleStringProperty(this, "sellToDisplay");
    private final SimpleObjectProperty sellToID = new SimpleObjectProperty(this, "sellToID");
    private Customer sellTo;
    private final SimpleStringProperty billToDisplay = new SimpleStringProperty(this, "billToDisplay");
    private final SimpleObjectProperty billToID = new SimpleObjectProperty(this, "billToID");
    private Customer billTo;
    private final SimpleObjectProperty invoiceDate = new SimpleObjectProperty(this, "invoiceDate");
    private final SimpleStringProperty invoiceDateDisplay = new SimpleStringProperty(this, "invoiceDateDisplay");
    private final SimpleStringProperty invoiceSource = new SimpleStringProperty(this, "invoiceSource");
    private final SimpleObjectProperty entryMode = new SimpleObjectProperty(this, "entryMode");
    
    public InvoiceDetailsDA() {
        createSearchColumns();
    }

    public InvoiceDetailsDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public InvoiceDetailsDA(InvoiceDetails invoiceDetails) {
        this.invoiceDetails = invoiceDetails;
        initialseProprties();
        createSearchColumns();
    }

    public InvoiceDetailsDA(String persistenceUnit, InvoiceDetails invoiceDetails) {
        super(persistenceUnit);
        this.invoiceDetails = invoiceDetails;
        initialseProprties();
        createSearchColumns();
    }

    public InvoiceDetailsDA(int invoiceDetailID, Invoice invoice, Item item, String invoiceSourceID, int baseQuantity, String unitMeasure, int measureSize, int quantity, double unitPrice, double discount, double amount, int originalQuantity, double originalAmount, LookupData location) {
        this.invoiceDetails = new InvoiceDetails(invoiceDetailID, invoice, item, invoiceSourceID, baseQuantity, unitMeasure, measureSize, quantity, unitPrice, discount, amount, originalQuantity, originalAmount, location);
        initialseProprties();
        createSearchColumns();
    }

    public InvoiceDetailsDA(String persistenceUnit, int invoiceDetailID, Invoice invoice, Item item, String invoiceSourceID, int baseQuantity, String unitMeasure, int measureSize, int quantity, double unitPrice, double discount, double amount, int originalQuantity, double originalAmount, LookupData location) {
        super(persistenceUnit);
        this.invoiceDetails = new InvoiceDetails(invoiceDetailID, invoice, item, invoiceSourceID, baseQuantity, unitMeasure, measureSize, quantity, unitPrice, discount, amount, originalQuantity, originalAmount, location);
        initialseProprties();
        createSearchColumns();
    }

    public Invoice getInvoice() {
        return invoice;
    }

    public Object getInvoiceID() {
        return invoiceID.get();
    }

    public String getInvoiceDisplay() {
        return invoiceDisplay.get();
    }

    public InvoiceDA getInvoiceDA() {
        return this.invoice != null ? new InvoiceDA(this.invoice) : null;
    }

    public void setInvoice(Invoice invoice) {
        invoiceDetails.setInvoice(invoice);
        this.invoice = invoice;
        this.invoiceID.set(invoice.getId());
        this.invoiceDisplay.set(invoice.getDisplayKey());
    }

    public Item getItem() {
        return item;
    }

    public Object getItemID() {
        return itemID.get();
    }

    public String getItemDisplay() {
        return itemDisplay.get();
    }

    public ItemDA getItemDA() {
        return this.item != null ? new ItemDA(this.item) : null;
    }

    public void setItem(Item item) {
        invoiceDetails.setItem(item);
        this.item = item;
        this.itemID.set(item.getId());
        this.itemDisplay.set(item.getDisplayKey());
        List<MeasureRelation> measureRelations = new MeasureGroupDA().getMeasureGroup(item.getMeasureGroup().getMeasureGroupID()).getMeasureRelations();

        Optional<MeasureRelation> invoiceMeasureRelation = measureRelations.stream()
                .filter((p) -> p.getDefaultUsage() != null)
                .filter((p) -> p.getDefaultUsage().equals(FinanceEnums.UnitMeasureUsages.Invoicing))
                .findFirst();
        if (invoiceMeasureRelation.isEmpty()) {
            this.setUnitMeasure(this.item.getMeasureGroup().getBaseUnitMeasure().getLookupDataName());
            this.setMeasureSize(1);
        } else {
            MeasureRelation invMeasureRelation = invoiceMeasureRelation.get();
            this.setUnitMeasure(invMeasureRelation.getUnitMeasure().getLookupDataName());
            this.setMeasureSize(invMeasureRelation.getBaseSize());
        }
        this.setBaseQuantity(1);
    }

    public int getInvoiceDetailID() {
        return invoiceDetailID.get();
    }

    public String getInvoiceDetailIDDisplay() {
        return invoiceDetailIDDisplay.get();
    }

    public void setInvoiceDetailID(int invoiceDetailID) {
        invoiceDetails.setInvoiceDetailID(invoiceDetailID);
        this.invoiceDetailID.set(invoiceDetailID);
        this.invoiceDetailIDDisplay.set(formatInteger(invoiceDetailID));
    }

    public String getInvoiceSourceID() {
        return invoiceSourceID.get();
    }

    public void setInvoiceSourceID(String invoiceSourceID) {
        invoiceDetails.setInvoiceSourceID(invoiceSourceID);
        this.invoiceSourceID.set(invoiceSourceID);
    }

    public Customer getSellTo() {
        return sellTo;
    }

    public Object getSellToID() {
        return sellToID.get();
    }

    public String getSellToDisplay() {
        return sellToDisplay.get();
    }

    public CustomerDA getSellToDA() {
        return this.sellTo != null ? new CustomerDA(this.sellTo) : null;
    }

    public int getBaseQuantity() {
        return baseQuantity.get();
    }

    public void setBaseQuantity(int baseQuantity) {
        invoiceDetails.setBaseQuantity(baseQuantity);
        this.baseQuantity.set(baseQuantity);
        this.baseQuantityDisplay.set(formatInteger(baseQuantity));
        this.setQuantity();
    }

    public String getBaseQuantityDisplay() {
        return baseQuantityDisplay.get();
    }

    public String getUnitMeasure() {
        return unitMeasure.get();
    }

    public void setUnitMeasure(String unitMeasure) {
        invoiceDetails.setUnitMeasure(unitMeasure);
        this.unitMeasure.set(unitMeasure);
    }

    public int getMeasureSize() {
        return measureSize.get();
    }

    public void setMeasureSize(int measureSize) {
        invoiceDetails.setMeasureSize(measureSize);
        this.measureSize.set(measureSize);
        this.measureSizeDisplay.set(formatInteger(measureSize));
        this.setQuantity();
    }

    public String getMeasureSizeDisplay() {
        return measureSizeDisplay.get();
    }

    public int getOriginalQuantity() {
        return originalQuantity.get();
    }

    public int getQuantity() {
        return quantity.get();
    }

    private void setQuantity() {
        int calQuantity = this.baseQuantity.get() * this.measureSize.get();
        invoiceDetails.setQuantity(calQuantity);
        this.quantity.set(calQuantity);
        this.quantityDisplay.set(formatInteger(calQuantity));
        this.invoiceDetails.setOriginalQuantity(calQuantity);
        this.setAmount();
    }

    public String getQuantityDisplay() {
        return quantityDisplay.get();
    }

    public double getUnitPrice() {
        return unitPrice.get();
    }

    public String getUnitPriceDisplay() {
        return unitPriceDisplay.get();
    }

    public void setUnitPrice(double unitPrice) {
        invoiceDetails.setUnitPrice(unitPrice);
        this.unitPrice.set(unitPrice);
        this.unitPriceDisplay.set(formatNumber(unitPrice));
        this.setAmount();
    }

    public double getDiscount() {
        return discount.get();
    }

    public String getDiscountDisplay() {
        return discountDisplay.get();
    }

    public void setDiscount(double discount) {
        invoiceDetails.setDiscount(discount);
        this.discount.set(discount);
        this.discountDisplay.set(formatNumber(discount));
        this.setAmount();
    }

    public double getOriginalAmount() {
        return originalAmount.get();
    }

    public String getOriginalAmountDisplay() {
        return originalAmountDisplay.get();
    }

    public double getAmount() {
        return amount.get();
    }

    public String getAmountDisplay() {
        return amountDisplay.get();
    }

    private void setAmount() {
        double amountCalc = (this.quantity.get() * this.unitPrice.get()) - this.discount.get();
        this.amount.set(amountCalc);
        this.amountDisplay.set(formatNumber(amountCalc));
        invoiceDetails.setAmount(amountCalc);
        this.invoiceDetails.setOriginalAmount(amountCalc);

    }

    public LookupData getLocation() {
        return location;
    }

    public Object getLocationID() {
        return locationID.get();
    }

    public String getLocationDisplay() {
        return locationDisplay.get();
    }

    public LookupDataDA getLocationDA() {
        return this.location != null ? new LookupDataDA(this.location) : null;
    }

    public void setLocation(LookupData location) {
        invoiceDetails.setLocation(location);
        this.location = location;
        this.locationID.set(location.getId());
        this.locationDisplay.set(location.getDisplayKey());
    }

    //Invoice getters start here
    public Object getInvoiceDate() {
        return invoiceDate.get();
    }

    public String getInvoiceDateDisplay() {
        return invoiceDateDisplay.get();
    }

    public void setInvoiceDate(LocalDate invoiceDate) {
        invoice.setInvoiceDate(invoiceDate);
        this.invoiceDate.set(invoiceDate);
    }

    public Customer getBillTo() {
        return billTo;
    }

    public Object getBillToID() {
        return billToID.get();
    }

    public String getBillToDisplay() {
        return billToDisplay.get();
    }

    public CustomerDA getBillToDA() {
        if (this.billTo == null) {
            return new CustomerDA();
        } else {
            return new CustomerDA(this.billTo);
        }
    }
    //Invoice getters end here

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof InvoiceDetailsDA)) {
            return false;
        }

        InvoiceDetailsDA invoiceDetailsDA = (InvoiceDetailsDA) o;

        return this.invoiceDetails.equals(invoiceDetailsDA.getInvoiceDetails());
    }

    @Override
    public int hashCode() {
        return invoiceDetails.hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = invoiceDetails;
        this.invoice = invoiceDetails.getInvoice();
        if (this.invoice != null) {
            this.invoiceID.set(invoice.getId());
            this.invoiceDisplay.set(invoice.getDisplayKey());
            this.sellTo = invoice.getSellTo();
            if (this.sellTo != null) {
                this.sellToID.set(sellTo.getId());
                this.sellToDisplay.set(sellTo.getDisplayKey());
            }
            this.billTo = invoice.getBillTo();
            if (this.billTo != null) {
                this.billToID.set(billTo.getId());
                this.billToDisplay.set(billTo.getDisplayKey());
            }
            this.invoiceSource.set(invoice.getInvoiceSource());
            this.entryMode.set(invoice.getEntryMode());
        }
        this.item = invoiceDetails.getItem();
        if (this.item != null) {
            this.itemID.set(item.getId());
            this.itemDisplay.set(item.getDisplayKey());
        }
        this.invoiceDetailID.set(invoiceDetails.getInvoiceDetailID());
        this.invoiceSourceID.set(invoiceDetails.getInvoiceSourceID());

        this.baseQuantity.set(invoiceDetails.getBaseQuantity());
        this.baseQuantityDisplay.set(formatInteger(invoiceDetails.getBaseQuantity()));
        this.unitMeasure.set(invoiceDetails.getUnitMeasure());
        this.measureSize.set(invoiceDetails.getMeasureSize());
        this.measureSizeDisplay.set(formatInteger(invoiceDetails.getMeasureSize()));
        this.quantity.set(invoiceDetails.getQuantity());
        this.quantityDisplay.set(formatInteger(invoiceDetails.getQuantity()));
        this.unitPrice.set(invoiceDetails.getUnitPrice());
        this.unitPriceDisplay.set(formatNumber(invoiceDetails.getUnitPrice()));
        this.discount.set(invoiceDetails.getDiscount());
        this.discountDisplay.set(formatNumber(invoiceDetails.getDiscount()));
        this.amount.set(invoiceDetails.getAmount());
        this.amountDisplay.set(formatNumber(invoiceDetails.getAmount()));
        this.originalQuantity.set(invoiceDetails.getOriginalQuantity());
        this.originalQuantityDisplay.set(formatInteger(invoiceDetails.getOriginalQuantity()));
        this.originalAmount.set(invoiceDetails.getOriginalAmount());
        this.originalAmountDisplay.set(formatNumber(invoiceDetails.getOriginalAmount()));
        this.location = invoiceDetails.getLocation();
        if (this.location != null) {
            this.locationID.set(location.getId());
            this.locationDisplay.set(location.getDisplayKey());
        }
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("invoiceDetailID", "Invoice Detail ID", this.invoiceDetailID.get(), invoiceDetailIDDisplay.get(), SearchDataTypes.INTEGER));
        this.searchColumns.add(new SearchColumn("invoiceID", "Invoice ID", this.invoiceID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("invoiceDisplay", "Invoice", this.invoiceDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("itemID", "Item ID", this.itemID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("itemDisplay", "Item", this.itemDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("sellToID", "Sell To ID", this.sellToID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("sellToDisplay", "Sell To", this.sellToDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("billToID", "Bill To ID", this.billToID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("billToDisplay", "Bill To", this.billToDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("baseQuantity", "Base Quantity", this.baseQuantity.get(), baseQuantityDisplay.get(), SearchDataTypes.INTEGER));
        this.searchColumns.add(new SearchColumn("unitMeasure", "Unit Measure", this.unitMeasure.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("measureSize", "Measure Size", this.measureSize.get(), measureSizeDisplay.get(), SearchDataTypes.INTEGER));
        this.searchColumns.add(new SearchColumn("quantity", "Quantity", this.quantity.get(), quantityDisplay.get(), SearchDataTypes.INTEGER));
        this.searchColumns.add(new SearchColumn("unitPrice", "Unit Price", this.unitPrice.get(), unitPriceDisplay.get(), SearchDataTypes.MONEY));
        this.searchColumns.add(new SearchColumn("discount", "Discount", this.discount.get(), discountDisplay.get(), SearchDataTypes.MONEY));
        this.searchColumns.add(new SearchColumn("amount", "Amount", this.amount.get(), amountDisplay.get(), SearchDataTypes.MONEY));
        this.searchColumns.add(new SearchColumn("originalQuantity", "Original Quantity", this.originalQuantity.get(), originalQuantityDisplay.get(), SearchDataTypes.INTEGER));
        this.searchColumns.add(new SearchColumn("originalAmount", "Original Amount", this.originalAmount.get(), originalAmountDisplay.get(), SearchDataTypes.MONEY));
        this.searchColumns.add(new SearchColumn("locationID", "Location ID", this.locationID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("locationDisplay", "Location", this.locationDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("invoiceSource", "Invoice Source", this.invoiceSource.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("invoiceSourceID", "Invoice Source ID", this.invoiceSourceID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("entryMode", "Entry Mode", this.entryMode.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.invoiceDetails.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.invoiceDetails.getDisplayKey();
    }

    public static List<InvoiceDetailsDA> getInvoiceDetailsDAs(List<InvoiceDetails> invoiceDetailss) {
        List<InvoiceDetailsDA> list = new ArrayList<>();
        invoiceDetailss.forEach((invoiceDetails) -> {
            list.add(new InvoiceDetailsDA(invoiceDetails));
        });
        return list;
    }

    public static List<InvoiceDetails> getInvoiceDetailsList(List<InvoiceDetailsDA> invoiceDetailsDAs) {
        List<InvoiceDetails> invoiceDetailss = new ArrayList<>();
        invoiceDetailsDAs.forEach(a -> invoiceDetailss.add(a.invoiceDetails));
        return invoiceDetailss;
    }

    public boolean save() throws Exception {
        if (!isValid()) {
            return false;
        }
        return super.persist(this.invoiceDetails);

    }

    public boolean update() throws Exception {
        if (!isValid()) {
            return false;
        }
        return super.merge(this.invoiceDetails);

    }

    public boolean delete() {
        return super.remove(this.invoiceDetails);

    }

    public InvoiceDetails getInvoiceDetails(int invoiceDetailID) {
        return (InvoiceDetails) super.find(InvoiceDetails.class,
                invoiceDetailID);
    }

    public InvoiceDetails getInvoiceDetails() {
        return this.invoiceDetails;
    }

    public List<InvoiceDetails> getInvoiceDetailss() {
        return super.find(InvoiceDetails.class
        );
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(InvoiceDetails.class
        ).forEach(o -> list.add(new InvoiceDetailsDA((InvoiceDetails) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public InvoiceDetailsDA get(int invoiceDetailID) throws Exception {
        InvoiceDetails oInvoiceDetails = getInvoiceDetails(invoiceDetailID);
        if (oInvoiceDetails == null) {
            throw new Exception("No Record with id: " + invoiceDetailID);
        }
        return new InvoiceDetailsDA(oInvoiceDetails);
    }

    public List<InvoiceDetailsDA> get(String columName, Object value) {
        List<InvoiceDetailsDA> list = new ArrayList<>();
        super.selectQuery(InvoiceDetails.class,
                columName, value).forEach(da -> list.add(new InvoiceDetailsDA((InvoiceDetails) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<InvoiceDetailsDA> toDaList(List<InvoiceDetails> invoiceDetailss) {
        List<InvoiceDetailsDA> invoiceDetailsDAs = new ArrayList<>();
        invoiceDetailss.forEach(s -> invoiceDetailsDAs.add(new InvoiceDetailsDA(s)));
        return invoiceDetailsDAs;
    }

    public List<DBAccess> toDBAccessList(List<InvoiceDetails> invoiceDetailss) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        invoiceDetailss.forEach(s -> dbAccesses.add(new InvoiceDetailsDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(InvoiceDetails.class,
                columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(InvoiceDetails.class,
                columnName, comparatorColumn, comparatorVaue);
    }

    public List<InvoiceDetails> getInvoiceDetailss(String columName, Object value) {
        return super.find(InvoiceDetails.class,
                columName, value);
    }

    public List<InvoiceDetails> getInvoiceDetailsByInvoice(Invoice invoice) {
        return super.find(InvoiceDetails.class,
                "invoice", invoice);
    }

    public List<InvoiceDetailsDA> getInvoiceDetailsDAByInvoice(Invoice invoice) {
        return toDaList(getInvoiceDetailsByInvoice(invoice));
    }

    public boolean isValid() throws Exception {
        List<SearchColumn> lSearchColumns = new ArrayList<>();
        lSearchColumns.add(new SearchColumn("invoice", invoiceDetails.getInvoice(), SearchColumn.SearchType.Equal));
        lSearchColumns.add(new SearchColumn("item", invoiceDetails.getItem(), SearchColumn.SearchType.Equal));
        lSearchColumns.add(new SearchColumn("invoiceSourceID", invoiceDetails.getInvoiceSourceID(), SearchColumn.SearchType.Equal));
        List<InvoiceDetails> lInvoiceDetails = super.find(InvoiceDetails.class,
                lSearchColumns);
        lInvoiceDetails.removeIf((p) -> p.getId().equals(invoiceDetails.getId()));
        if (lInvoiceDetails.size() > 0) {
            throw new Exception("The record with Invoice: " + invoiceDetails.getInvoice().getDisplayKey() + " and Item: " + invoiceDetails.getItem().getDisplayKey() + " and Invoice Source ID: " + invoiceDetails.getInvoiceSourceID() + "already exists");
        }
        return true;
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(InvoiceDetails.class
            );
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                InvoiceDetailsDA invoiceDetailsDA = new InvoiceDetailsDA((InvoiceDetails) e[0]);
                invoiceDetailsDA.revisionEntity = (AppRevisionEntity) e[1];
                invoiceDetailsDA.oRevisionType = (RevisionType) e[2];
                invoiceDetailsDA.initRevProprties();
                invoiceDetailsDA.searchColumns.addAll(invoiceDetailsDA.getRevSearchColumns());
                dBAccesses.add(invoiceDetailsDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    public void setSaleOrderDetail(SaleOrderDetail saleOrderDetail) {
        this.setItem(saleOrderDetail.getItem());
        this.setBaseQuantity(saleOrderDetail.getBaseQuantity());
        this.setUnitMeasure(saleOrderDetail.getUnitMeasure());
        this.setMeasureSize(saleOrderDetail.getMeasureSize());
        this.setUnitPrice(saleOrderDetail.getUnitPrice());
        this.setDiscount(saleOrderDetail.getDiscount());
        this.setInvoiceSourceID(saleOrderDetail.getSaleOrder().getSaleOrderID());
    }

}
