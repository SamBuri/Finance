/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.dbaccess;

import com.saburi.common.dbaccess.DBAccess;
import com.saburi.common.dbaccess.IDGeneratorDA;
import com.saburi.common.dbaccess.LookupDataDA;
import com.saburi.finance.entities.CustomerPostingGroup;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.common.entities.LookupData;
import com.saburi.finance.entities.ChartAccount;

public class CustomerPostingGroupDA extends DBAccess {

    private CustomerPostingGroup customerPostingGroup = new CustomerPostingGroup();
    private final SimpleIntegerProperty idHelper = new SimpleIntegerProperty(this, "idHelper");
    private final SimpleStringProperty customerPostingGroupID = new SimpleStringProperty(this, "customerPostingGroupID");
    private final SimpleStringProperty customerGroupDisplay = new SimpleStringProperty(this, "customerGroupDisplay");
    private final SimpleObjectProperty customerGroupID = new SimpleObjectProperty(this, "customerGroupID");
    private LookupData customerGroup;
    private final SimpleStringProperty receivableAccountDisplay = new SimpleStringProperty(this, "receivableAccountDisplay");
    private final SimpleObjectProperty receivableAccountID = new SimpleObjectProperty(this, "receivableAccountID");
    private ChartAccount receivableAccount;
    private final SimpleStringProperty serviceChargeAccountDisplay = new SimpleStringProperty(this, "serviceChargeAccountDisplay");
    private final SimpleObjectProperty serviceChargeAccountID = new SimpleObjectProperty(this, "serviceChargeAccountID");
    private ChartAccount serviceChargeAccount;
    private final SimpleStringProperty paymentDiscountAccountDisplay = new SimpleStringProperty(this, "paymentDiscountAccountDisplay");
    private final SimpleObjectProperty paymentDiscountAccountID = new SimpleObjectProperty(this, "paymentDiscountAccountID");
    private ChartAccount paymentDiscountAccount;
    private final SimpleStringProperty unPaidRefundsDisplay = new SimpleStringProperty(this, "unPaidRefundsDisplay");
    private final SimpleObjectProperty unPaidRefundsID = new SimpleObjectProperty(this, "unPaidRefundsID");
    private ChartAccount unPaidRefunds;
    private final SimpleStringProperty customerDepositsDisplay = new SimpleStringProperty(this, "customerDepositsDisplay");
    private final SimpleObjectProperty customerDepositsID = new SimpleObjectProperty(this, "customerDepositsID");
    private ChartAccount customerDeposits;

    public CustomerPostingGroupDA() {
        createSearchColumns();
    }

    public CustomerPostingGroupDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public CustomerPostingGroupDA(CustomerPostingGroup customerPostingGroup) {
        this.customerPostingGroup = customerPostingGroup;
        initialseProprties();
        createSearchColumns();
    }

    public CustomerPostingGroupDA(String persistenceUnit, CustomerPostingGroup customerPostingGroup) {
        super(persistenceUnit);
        this.customerPostingGroup = customerPostingGroup;
        initialseProprties();
        createSearchColumns();
    }

    public CustomerPostingGroupDA(String customerPostingGroupID, LookupData customerGroup, ChartAccount receivableAccount, ChartAccount serviceChargeAccount, ChartAccount paymentDiscountAccount, ChartAccount unPaidRefunds, ChartAccount customerDeposits) {
        this.customerPostingGroup = new CustomerPostingGroup(getNextIdHelper(), customerPostingGroupID, customerGroup, receivableAccount, serviceChargeAccount, paymentDiscountAccount, unPaidRefunds, customerDeposits);
        initialseProprties();
        createSearchColumns();
    }

    public CustomerPostingGroupDA(String persistenceUnit, String customerPostingGroupID, LookupData customerGroup, ChartAccount receivableAccount, ChartAccount serviceChargeAccount, ChartAccount paymentDiscountAccount, ChartAccount unPaidRefunds, ChartAccount customerDeposits) {
        super(persistenceUnit);
        this.customerPostingGroup = new CustomerPostingGroup(getNextIdHelper(), customerPostingGroupID, customerGroup, receivableAccount, serviceChargeAccount, paymentDiscountAccount, unPaidRefunds, customerDeposits);
        initialseProprties();
        createSearchColumns();
    }

    public int getIdHelper() {
        return idHelper.get();
    }

    public void setIdHelper(int idHelper) {
        customerPostingGroup.setIdHelper(idHelper);
        this.idHelper.set(idHelper);
    }

    public String getCustomerPostingGroupID() {
        return customerPostingGroupID.get();
    }

    public void setCustomerPostingGroupID(String customerPostingGroupID) {
        customerPostingGroup.setCustomerPostingGroupID(customerPostingGroupID);
        this.customerPostingGroupID.set(customerPostingGroupID);
    }

    public LookupData getCustomerGroup() {
        return customerGroup;
    }

    public Object getCustomerGroupID() {
        return customerGroupID.get();
    }

    public String getCustomerGroupDisplay() {
        return customerGroupDisplay.get();
    }

    public LookupDataDA getCustomerGroupDA() {
        return this.customerGroup != null ? new LookupDataDA(this.customerGroup) : null;
    }

    public void setCustomerGroup(LookupData customerGroup) {
        customerPostingGroup.setCustomerGroup(customerGroup);
        this.customerGroup = customerGroup;
        this.customerGroupID.set(customerGroup.getId());
        this.customerGroupDisplay.set(customerGroup.getDisplayKey());
    }

    public ChartAccount getReceivableAccount() {
        return receivableAccount;
    }

    public Object getReceivableAccountID() {
        return receivableAccountID.get();
    }

    public String getReceivableAccountDisplay() {
        return receivableAccountDisplay.get();
    }

    public ChartAccountDA getReceivableAccountDA() {
        return this.receivableAccount != null ? new ChartAccountDA(this.receivableAccount) : null;
    }

    public void setReceivableAccount(ChartAccount receivableAccount) {
        customerPostingGroup.setReceivableAccount(receivableAccount);
        this.receivableAccount = receivableAccount;
        this.receivableAccountID.set(receivableAccount.getId());
        this.receivableAccountDisplay.set(receivableAccount.getDisplayKey());
    }

    public ChartAccount getServiceChargeAccount() {
        return serviceChargeAccount;
    }

    public Object getServiceChargeAccountID() {
        return serviceChargeAccountID.get();
    }

    public String getServiceChargeAccountDisplay() {
        return serviceChargeAccountDisplay.get();
    }

    public ChartAccountDA getServiceChargeAccountDA() {
        return this.serviceChargeAccount != null ? new ChartAccountDA(this.serviceChargeAccount) : null;
    }

    public void setServiceChargeAccount(ChartAccount serviceChargeAccount) {
        customerPostingGroup.setServiceChargeAccount(serviceChargeAccount);
        this.serviceChargeAccount = serviceChargeAccount;
        this.serviceChargeAccountID.set(serviceChargeAccount.getId());
        this.serviceChargeAccountDisplay.set(serviceChargeAccount.getDisplayKey());
    }

    public ChartAccount getPaymentDiscountAccount() {
        return paymentDiscountAccount;
    }

    public Object getPaymentDiscountAccountID() {
        return paymentDiscountAccountID.get();
    }

    public String getPaymentDiscountAccountDisplay() {
        return paymentDiscountAccountDisplay.get();
    }

    public ChartAccountDA getPaymentDiscountAccountDA() {
        return this.paymentDiscountAccount != null ? new ChartAccountDA(this.paymentDiscountAccount) : null;
    }

    public void setPaymentDiscountAccount(ChartAccount paymentDiscountAccount) {
        customerPostingGroup.setPaymentDiscountAccount(paymentDiscountAccount);
        this.paymentDiscountAccount = paymentDiscountAccount;
        this.paymentDiscountAccountID.set(paymentDiscountAccount.getId());
        this.paymentDiscountAccountDisplay.set(paymentDiscountAccount.getDisplayKey());
    }

    public ChartAccount getUnPaidRefunds() {
        return unPaidRefunds;
    }

    public Object getUnPaidRefundsID() {
        return unPaidRefundsID.get();
    }

    public String getUnPaidRefundsDisplay() {
        return unPaidRefundsDisplay.get();
    }

    public ChartAccountDA getUnPaidRefundsDA() {
        return this.unPaidRefunds != null ? new ChartAccountDA(this.unPaidRefunds) : null;
    }

    public void setUnPaidRefunds(ChartAccount unPaidRefunds) {
        customerPostingGroup.setUnPaidRefunds(unPaidRefunds);
        this.unPaidRefunds = unPaidRefunds;
        this.unPaidRefundsID.set(unPaidRefunds.getId());
        this.unPaidRefundsDisplay.set(unPaidRefunds.getDisplayKey());
    }

    public ChartAccount getCustomerDeposits() {
        return customerDeposits;
    }

    public Object getCustomerDepositsID() {
        return customerDepositsID.get();
    }

    public String getCustomerDepositsDisplay() {
        return customerDepositsDisplay.get();
    }

    public ChartAccountDA getCustomerDepositsDA() {
        return this.customerDeposits != null ? new ChartAccountDA(this.customerDeposits) : null;
    }

    public void setCustomerDeposits(ChartAccount customerDeposits) {
        customerPostingGroup.setCustomerDeposits(customerDeposits);
        this.customerDeposits = customerDeposits;
        this.customerDepositsID.set(customerDeposits.getId());
        this.customerDepositsDisplay.set(customerDeposits.getDisplayKey());
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof CustomerPostingGroupDA)) {
            return false;
        }

        CustomerPostingGroupDA customerPostingGroupDA = (CustomerPostingGroupDA) o;

        if (customerPostingGroupDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(customerPostingGroupDA.getId());
    }

    @Override
    public int hashCode() {
        return customerPostingGroup.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = customerPostingGroup;
        this.idHelper.set(customerPostingGroup.getIdHelper());
        this.customerPostingGroupID.set(customerPostingGroup.getCustomerPostingGroupID());
        this.customerGroup = customerPostingGroup.getCustomerGroup();
        if (this.customerGroup != null) {
            this.customerGroupID.set(customerGroup.getId());
            this.customerGroupDisplay.set(customerGroup.getDisplayKey());
        }
        this.receivableAccount = customerPostingGroup.getReceivableAccount();
        if (this.receivableAccount != null) {
            this.receivableAccountID.set(receivableAccount.getId());
            this.receivableAccountDisplay.set(receivableAccount.getDisplayKey());
        }
        this.serviceChargeAccount = customerPostingGroup.getServiceChargeAccount();
        if (this.serviceChargeAccount != null) {
            this.serviceChargeAccountID.set(serviceChargeAccount.getId());
            this.serviceChargeAccountDisplay.set(serviceChargeAccount.getDisplayKey());
        }
        this.paymentDiscountAccount = customerPostingGroup.getPaymentDiscountAccount();
        if (this.paymentDiscountAccount != null) {
            this.paymentDiscountAccountID.set(paymentDiscountAccount.getId());
            this.paymentDiscountAccountDisplay.set(paymentDiscountAccount.getDisplayKey());
        }
        this.unPaidRefunds = customerPostingGroup.getUnPaidRefunds();
        if (this.unPaidRefunds != null) {
            this.unPaidRefundsID.set(unPaidRefunds.getId());
            this.unPaidRefundsDisplay.set(unPaidRefunds.getDisplayKey());
        }
        this.customerDeposits = customerPostingGroup.getCustomerDeposits();
        if (this.customerDeposits != null) {
            this.customerDepositsID.set(customerDeposits.getId());
            this.customerDepositsDisplay.set(customerDeposits.getDisplayKey());
        }
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("customerPostingGroupID", "Customer Posting Group ID", this.customerPostingGroupID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("customerGroupID", "Customer Group ID", this.customerGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("customerGroupDisplay", "Customer Group", this.customerGroupDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("receivableAccountID", "Receivable Account ID", this.receivableAccountID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("receivableAccountDisplay", "Receivable Account", this.receivableAccountDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("serviceChargeAccountID", "Service Charge Account ID", this.serviceChargeAccountID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("serviceChargeAccountDisplay", "Service Charge Account", this.serviceChargeAccountDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("paymentDiscountAccountID", "Payment Discount Account ID", this.paymentDiscountAccountID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("paymentDiscountAccountDisplay", "Payment Discount Account", this.paymentDiscountAccountDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("unPaidRefundsID", "Un paid Refunds ID", this.unPaidRefundsID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("unPaidRefundsDisplay", "Un paid Refunds", this.unPaidRefundsDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("customerDepositsID", "Customer Deposits ID", this.customerDepositsID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("customerDepositsDisplay", "Customer Deposits", this.customerDepositsDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.customerPostingGroup.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.customerPostingGroup.getDisplayKey();
    }

    public static List<CustomerPostingGroupDA> getCustomerPostingGroupDAs(List<CustomerPostingGroup> customerPostingGroups) {
        List<CustomerPostingGroupDA> list = new ArrayList<>();
        customerPostingGroups.forEach((customerPostingGroup) -> {
            list.add(new CustomerPostingGroupDA(customerPostingGroup));
        });
        return list;
    }

    public static List<CustomerPostingGroup> getCustomerPostingGroupList(List<CustomerPostingGroupDA> customerPostingGroupDAs) {
        List<CustomerPostingGroup> customerPostingGroups = new ArrayList<>();
        customerPostingGroupDAs.forEach(a -> customerPostingGroups.add(a.customerPostingGroup));
        return customerPostingGroups;
    }

    public boolean save() throws Exception {
        if (!isValid()) {
            return false;
        }
        return super.persist(this.customerPostingGroup);

    }

    public boolean update() throws Exception {
        if (!isValid()) {
            return false;
        }
        return super.merge(this.customerPostingGroup);

    }

    public boolean delete() {
        return super.remove(this.customerPostingGroup);

    }

    public CustomerPostingGroup getCustomerPostingGroup(String customerPostingGroupID) {
        return (CustomerPostingGroup) super.find(CustomerPostingGroup.class, customerPostingGroupID);
    }

    public CustomerPostingGroup getCustomerPostingGroup() {
        return this.customerPostingGroup;
    }

    public List<CustomerPostingGroup> getCustomerPostingGroups() {
        return super.find(CustomerPostingGroup.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(CustomerPostingGroup.class).forEach(o -> list.add(new CustomerPostingGroupDA((CustomerPostingGroup) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public CustomerPostingGroupDA get(String customerPostingGroupID) throws Exception {
        CustomerPostingGroup oCustomerPostingGroup = getCustomerPostingGroup(customerPostingGroupID);
        if (oCustomerPostingGroup == null) {
            throw new Exception("No Record with id: " + customerPostingGroupID);
        }
        return new CustomerPostingGroupDA(oCustomerPostingGroup);
    }

    public List<CustomerPostingGroupDA> get(String columName, Object value) {
        List<CustomerPostingGroupDA> list = new ArrayList<>();
        super.selectQuery(CustomerPostingGroup.class, columName, value).forEach(da -> list.add(new CustomerPostingGroupDA((CustomerPostingGroup) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<CustomerPostingGroupDA> toDaList(List<CustomerPostingGroup> customerPostingGroups) {
        List<CustomerPostingGroupDA> customerPostingGroupDAs = new ArrayList<>();
        customerPostingGroups.forEach(s -> customerPostingGroupDAs.add(new CustomerPostingGroupDA(s)));
        return customerPostingGroupDAs;
    }

    public List<DBAccess> toDBAccessList(List<CustomerPostingGroup> customerPostingGroups) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        customerPostingGroups.forEach(s -> dbAccesses.add(new CustomerPostingGroupDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(CustomerPostingGroup.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(CustomerPostingGroup.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIdHelper() {
        return this.getMax("idHelper") + 1;
    }

    public String getNextCustomerPostingGroupID(int idHelper) {
        return new IDGeneratorDA().getToAppendString(CustomerPostingGroup.class.getSimpleName(), idHelper);
    }

    public List<CustomerPostingGroup> getCustomerPostingGroups(String columName, Object value) {
        return super.find(CustomerPostingGroup.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(CustomerPostingGroup.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                CustomerPostingGroupDA customerPostingGroupDA = new CustomerPostingGroupDA((CustomerPostingGroup) e[0]);
                customerPostingGroupDA.revisionEntity = (AppRevisionEntity) e[1];
                customerPostingGroupDA.oRevisionType = (RevisionType) e[2];
                customerPostingGroupDA.initRevProprties();
                customerPostingGroupDA.searchColumns.addAll(customerPostingGroupDA.getRevSearchColumns());
                dBAccesses.add(customerPostingGroupDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    public boolean isValid() throws Exception {
        List<CustomerPostingGroup> vendorPostingGroups = getCustomerPostingGroups("customerGroup", this.customerGroup);
        vendorPostingGroups.remove(this.customerPostingGroup);
        if (!vendorPostingGroups.isEmpty()) {
            throw new Exception("There is an existing customer posting group for customer group: " + customerGroup.getLookupDataName()
                    + " you can't have another one");
        }
        return true;
    }

}
