/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.dbaccess;

import com.saburi.common.dbaccess.DBAccess;
import com.saburi.common.dbaccess.LookupDataDA;
import com.saburi.finance.entities.ItemTemplate;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.finance.entities.ItemCategory;
import com.saburi.common.entities.LookupData;
import com.saburi.finance.entities.MeasureGroup;

public class ItemTemplateDA extends DBAccess {

    private ItemTemplate itemTemplate = new ItemTemplate();
    private final SimpleStringProperty templateName = new SimpleStringProperty(this, "templateName");
    private final SimpleStringProperty itemCategoryDisplay = new SimpleStringProperty(this, "itemCategoryDisplay");
    private final SimpleObjectProperty itemCategoryID = new SimpleObjectProperty(this, "itemCategoryID");
    private ItemCategory itemCategory;
    private final SimpleObjectProperty itemCategoryGroup = new SimpleObjectProperty(this, "itemCategoryGroup");
    private final SimpleStringProperty itemGroupDisplay = new SimpleStringProperty(this, "itemGroupDisplay");
    private final SimpleObjectProperty itemGroupID = new SimpleObjectProperty(this, "itemGroupID");
    private LookupData itemGroup;
    private final SimpleStringProperty vATItemGroupDisplay = new SimpleStringProperty(this, "vATItemGroupDisplay");
    private final SimpleObjectProperty vATItemGroupID = new SimpleObjectProperty(this, "vATItemGroupID");
    private LookupData vATItemGroup;
    private final SimpleStringProperty inventoryGroupDisplay = new SimpleStringProperty(this, "inventoryGroupDisplay");
    private final SimpleObjectProperty inventoryGroupID = new SimpleObjectProperty(this, "inventoryGroupID");
    private LookupData inventoryGroup;
    private final SimpleStringProperty measureGroupDisplay = new SimpleStringProperty(this, "measureGroupDisplay");
    private final SimpleObjectProperty measureGroupID = new SimpleObjectProperty(this, "measureGroupID");
    private MeasureGroup measureGroup;

    public ItemTemplateDA() {
        createSearchColumns();
    }

    public ItemTemplateDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public ItemTemplateDA(ItemTemplate itemTemplate) {
        this.itemTemplate = itemTemplate;
        initialseProprties();
        createSearchColumns();
    }

    public ItemTemplateDA(String persistenceUnit, ItemTemplate itemTemplate) {
        super(persistenceUnit);
        this.itemTemplate = itemTemplate;
        initialseProprties();
        createSearchColumns();
    }

    public ItemTemplateDA(String templateName, ItemCategory itemCategory,  LookupData itemGroup, LookupData vATItemGroup, LookupData inventoryGroup, MeasureGroup measureGroup) {
        this.itemTemplate = new ItemTemplate(templateName, itemCategory, itemGroup, vATItemGroup, inventoryGroup, measureGroup);
        initialseProprties();
        createSearchColumns();
    }

    public ItemTemplateDA(String persistenceUnit, String templateName, ItemCategory itemCategory,  LookupData itemGroup, LookupData vATItemGroup, LookupData inventoryGroup, MeasureGroup measureGroup) {
        super(persistenceUnit);
        this.itemTemplate = new ItemTemplate(templateName, itemCategory,  itemGroup, vATItemGroup, inventoryGroup, measureGroup);
        initialseProprties();
        createSearchColumns();
    }

    public String getTemplateName() {
        return templateName.get();
    }

    public void setTemplateName(String templateName) {
        itemTemplate.setTemplateName(templateName);
        this.templateName.set(templateName);
    }

    public ItemCategory getItemCategory() {
        return itemCategory;
    }

    public Object getItemCategoryID() {
        return itemCategoryID.get();
    }

    public String getItemCategoryDisplay() {
        return itemCategoryDisplay.get();
    }

    public ItemCategoryDA getItemCategoryDA() {
        return this.itemCategory != null ? new ItemCategoryDA(this.itemCategory) : null;
    }

    public void setItemCategory(ItemCategory itemCategory) {
        itemTemplate.setItemCategory(itemCategory);
        this.itemCategory = itemCategory;
        this.itemCategoryID.set(itemCategory.getId());
        this.itemCategoryDisplay.set(itemCategory.getDisplayKey());
        this.itemCategoryGroup.set(itemCategory.getItemCategoryGroup());
    }

    public Object getItemCategoryGroup() {
        return itemCategoryGroup.get();
    }

    public LookupData getItemGroup() {
        return itemGroup;
    }

    public Object getItemGroupID() {
        return itemGroupID.get();
    }

    public String getItemGroupDisplay() {
        return itemGroupDisplay.get();
    }

    public LookupDataDA getItemGroupDA() {
        return this.itemGroup != null ? new LookupDataDA(this.itemGroup) : null;
    }

    public void setItemGroup(LookupData itemGroup) {
        itemTemplate.setItemGroup(itemGroup);
        this.itemGroup = itemGroup;
        this.itemGroupID.set(itemGroup.getId());
        this.itemGroupDisplay.set(itemGroup.getDisplayKey());
    }

    public LookupData getVATItemGroup() {
        return vATItemGroup;
    }

    public Object getVATItemGroupID() {
        return vATItemGroupID.get();
    }

    public String getVATItemGroupDisplay() {
        return vATItemGroupDisplay.get();
    }

    public LookupDataDA getVATItemGroupDA() {
        return this.vATItemGroup != null ? new LookupDataDA(this.vATItemGroup) : null;
    }

    public void setVATItemGroup(LookupData vATItemGroup) {
        itemTemplate.setVATItemGroup(vATItemGroup);
        this.vATItemGroup = vATItemGroup;
        this.vATItemGroupID.set(vATItemGroup.getId());
        this.vATItemGroupDisplay.set(vATItemGroup.getDisplayKey());
    }

    public LookupData getInventoryGroup() {
        return inventoryGroup;
    }

    public Object getInventoryGroupID() {
        return inventoryGroupID.get();
    }

    public String getInventoryGroupDisplay() {
        return inventoryGroupDisplay.get();
    }

    public LookupDataDA getInventoryGroupDA() {
        return this.inventoryGroup != null ? new LookupDataDA(this.inventoryGroup) : null;
    }

    public void setInventoryGroup(LookupData inventoryGroup) {
        itemTemplate.setInventoryGroup(inventoryGroup);
        this.inventoryGroup = inventoryGroup;
        this.inventoryGroupID.set(inventoryGroup.getId());
        this.inventoryGroupDisplay.set(inventoryGroup.getDisplayKey());
    }

    public MeasureGroup getMeasureGroup() {
        return measureGroup;
    }

    public Object getMeasureGroupID() {
        return measureGroupID.get();
    }

    public String getMeasureGroupDisplay() {
        return measureGroupDisplay.get();
    }

    public MeasureGroupDA getMeasureGroupDA() {
        return this.measureGroup != null ? new MeasureGroupDA(this.measureGroup) : null;
    }

    public void setMeasureGroup(MeasureGroup measureGroup) {
        itemTemplate.setMeasureGroup(measureGroup);
        this.measureGroup = measureGroup;
        this.measureGroupID.set(measureGroup.getId());
        this.measureGroupDisplay.set(measureGroup.getDisplayKey());
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof ItemTemplateDA)) {
            return false;
        }

        ItemTemplateDA itemTemplateDA = (ItemTemplateDA) o;

        if (itemTemplateDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(itemTemplateDA.getId());
    }

    @Override
    public int hashCode() {
        return itemTemplate.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = itemTemplate;
        this.templateName.set(itemTemplate.getTemplateName());
        this.itemCategory = itemTemplate.getItemCategory();
        if (this.itemCategory != null) {
            this.itemCategoryID.set(itemCategory.getId());
            this.itemCategoryDisplay.set(itemCategory.getDisplayKey());
             this.itemCategoryGroup.set(itemCategory.getItemCategoryGroup());
        }
       
        this.itemGroup = itemTemplate.getItemGroup();
        if (this.itemGroup != null) {
            this.itemGroupID.set(itemGroup.getId());
            this.itemGroupDisplay.set(itemGroup.getDisplayKey());
        }
        this.vATItemGroup = itemTemplate.getVATItemGroup();
        if (this.vATItemGroup != null) {
            this.vATItemGroupID.set(vATItemGroup.getId());
            this.vATItemGroupDisplay.set(vATItemGroup.getDisplayKey());
        }
        this.inventoryGroup = itemTemplate.getInventoryGroup();
        if (this.inventoryGroup != null) {
            this.inventoryGroupID.set(inventoryGroup.getId());
            this.inventoryGroupDisplay.set(inventoryGroup.getDisplayKey());
        }
        this.measureGroup = itemTemplate.getMeasureGroup();
        if (this.measureGroup != null) {
            this.measureGroupID.set(measureGroup.getId());
            this.measureGroupDisplay.set(measureGroup.getDisplayKey());
        }
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("templateName", "Template Name", this.templateName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("itemCategoryID", "Item Category ID", this.itemCategoryID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("itemCategoryDisplay", "Item Category", this.itemCategoryDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("itemCategoryGroup", "Item Category Group", this.itemCategoryGroup.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("itemGroupID", "Item Group ID", this.itemGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("itemGroupDisplay", "Item Group", this.itemGroupDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("vATItemGroupID", "VAT Item Group ID", this.vATItemGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("vATItemGroupDisplay", "VAT Item Group", this.vATItemGroupDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("inventoryGroupID", "Inventory Group ID", this.inventoryGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("inventoryGroupDisplay", "Inventory Group", this.inventoryGroupDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("measureGroupID", "Measure Group ID", this.measureGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("measureGroupDisplay", "Measure Group", this.measureGroupDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.itemTemplate.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.itemTemplate.getDisplayKey();
    }

    public static List<ItemTemplateDA> getItemTemplateDAs(List<ItemTemplate> itemTemplates) {
        List<ItemTemplateDA> list = new ArrayList<>();
        itemTemplates.forEach((itemTemplate) -> {
            list.add(new ItemTemplateDA(itemTemplate));
        });
        return list;
    }

    public static List<ItemTemplate> getItemTemplateList(List<ItemTemplateDA> itemTemplateDAs) {
        List<ItemTemplate> itemTemplates = new ArrayList<>();
        itemTemplateDAs.forEach(a -> itemTemplates.add(a.itemTemplate));
        return itemTemplates;
    }

    public boolean save() throws Exception {
        return super.persist(this.itemTemplate);

    }

    public boolean update() throws Exception {
        return super.merge(this.itemTemplate);

    }

    public boolean delete() {
        return super.remove(this.itemTemplate);

    }

    public ItemTemplate getItemTemplate(String templateName) {
        return (ItemTemplate) super.find(ItemTemplate.class, templateName);
    }

    public ItemTemplate getItemTemplate() {
        return this.itemTemplate;
    }

    public List<ItemTemplate> getItemTemplates() {
        return super.find(ItemTemplate.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(ItemTemplate.class).forEach(o -> list.add(new ItemTemplateDA((ItemTemplate) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public ItemTemplateDA get(String templateName) throws Exception {
        ItemTemplate oItemTemplate = getItemTemplate(templateName);
        if (oItemTemplate == null) {
            throw new Exception("No Record with id: " + templateName);
        }
        return new ItemTemplateDA(oItemTemplate);
    }

    public List<ItemTemplateDA> get(String columName, Object value) {
        List<ItemTemplateDA> list = new ArrayList<>();
        super.selectQuery(ItemTemplate.class, columName, value).forEach(da -> list.add(new ItemTemplateDA((ItemTemplate) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<ItemTemplateDA> toDaList(List<ItemTemplate> itemTemplates) {
        List<ItemTemplateDA> itemTemplateDAs = new ArrayList<>();
        itemTemplates.forEach(s -> itemTemplateDAs.add(new ItemTemplateDA(s)));
        return itemTemplateDAs;
    }

    public List<DBAccess> toDBAccessList(List<ItemTemplate> itemTemplates) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        itemTemplates.forEach(s -> dbAccesses.add(new ItemTemplateDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(ItemTemplate.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(ItemTemplate.class, columnName, comparatorColumn, comparatorVaue);
    }

    public List<ItemTemplate> getItemTemplates(String columName, Object value) {
        return super.find(ItemTemplate.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(ItemTemplate.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                ItemTemplateDA itemTemplateDA = new ItemTemplateDA((ItemTemplate) e[0]);
                itemTemplateDA.revisionEntity = (AppRevisionEntity) e[1];
                itemTemplateDA.oRevisionType = (RevisionType) e[2];
                itemTemplateDA.initRevProprties();
                itemTemplateDA.searchColumns.addAll(itemTemplateDA.getRevSearchColumns());
                dBAccesses.add(itemTemplateDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

}
