/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.dbaccess;

import com.saburi.common.dbaccess.DBAccess;
import com.saburi.common.dbaccess.IDGeneratorDA;
import com.saburi.common.dbaccess.LookupDataDA;
import com.saburi.finance.entities.VATPostingGroup;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.common.entities.LookupData;
import static com.saburi.common.utils.Utilities.formatNumber;
import com.saburi.common.utils.ValidationMessages;
import com.saburi.finance.entities.ChartAccount;

public class VATPostingGroupDA extends DBAccess {

    private VATPostingGroup vATPostingGroup = new VATPostingGroup();
    private final SimpleIntegerProperty idHelper = new SimpleIntegerProperty(this, "idHelper");
    private final SimpleStringProperty vATPostingGroupID = new SimpleStringProperty(this, "vATPostingGroupID");
    private final SimpleStringProperty vATBusinessGroupDisplay = new SimpleStringProperty(this, "vATBusinessGroupDisplay");
    private final SimpleObjectProperty vATBusinessGroupID = new SimpleObjectProperty(this, "vATBusinessGroupID");
    private LookupData vATBusinessGroup;
    private final SimpleStringProperty vATItemGroupDisplay = new SimpleStringProperty(this, "vATItemGroupDisplay");
    private final SimpleObjectProperty vATItemGroupID = new SimpleObjectProperty(this, "vATItemGroupID");
    private LookupData vATItemGroup;
    private final SimpleFloatProperty vATPercent = new SimpleFloatProperty(this, "vATPercent");
    private final SimpleStringProperty vATPercentDisplay = new SimpleStringProperty(this, "vATPercentDisplay");
    private final SimpleStringProperty vATSalesAccountDisplay = new SimpleStringProperty(this, "vATSalesAccountDisplay");
    private final SimpleObjectProperty vATSalesAccountID = new SimpleObjectProperty(this, "vATSalesAccountID");
    private ChartAccount vATSalesAccount;
    private final SimpleStringProperty vATPurchaseAccountDisplay = new SimpleStringProperty(this, "vATPurchaseAccountDisplay");
    private final SimpleObjectProperty vATPurchaseAccountID = new SimpleObjectProperty(this, "vATPurchaseAccountID");
    private ChartAccount vATPurchaseAccount;

    public VATPostingGroupDA() {
        createSearchColumns();
    }

    public VATPostingGroupDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public VATPostingGroupDA(VATPostingGroup vATPostingGroup) {
        this.vATPostingGroup = vATPostingGroup;
        initialseProprties();
        createSearchColumns();
    }

    public VATPostingGroupDA(String persistenceUnit, VATPostingGroup vATPostingGroup) {
        super(persistenceUnit);
        this.vATPostingGroup = vATPostingGroup;
        initialseProprties();
        createSearchColumns();
    }

    public VATPostingGroupDA(String vATPostingGroupID, LookupData vATBusinessGroup, LookupData vATItemGroup, float vATPercent, ChartAccount vATSalesAccount, ChartAccount vATPurchaseAccount) {
        this.vATPostingGroup = new VATPostingGroup(getNextIdHelper(), vATPostingGroupID, vATBusinessGroup, vATItemGroup, vATPercent, vATSalesAccount, vATPurchaseAccount);
        initialseProprties();
        createSearchColumns();
    }

    public VATPostingGroupDA(String persistenceUnit, String vATPostingGroupID, LookupData vATBusinessGroup, LookupData vATItemGroup, float vATPercent, ChartAccount vATSalesAccount, ChartAccount vATPurchaseAccount) {
        super(persistenceUnit);
        this.vATPostingGroup = new VATPostingGroup(getNextIdHelper(), vATPostingGroupID, vATBusinessGroup, vATItemGroup, vATPercent, vATSalesAccount, vATPurchaseAccount);
        initialseProprties();
        createSearchColumns();
    }

    public int getIdHelper() {
        return idHelper.get();
    }

    public void setIdHelper(int idHelper) {
        vATPostingGroup.setIdHelper(idHelper);
        this.idHelper.set(idHelper);
    }

    public String getVATPostingGroupID() {
        return vATPostingGroupID.get();
    }

    public void setVATPostingGroupID(String vATPostingGroupID) {
        vATPostingGroup.setVATPostingGroupID(vATPostingGroupID);
        this.vATPostingGroupID.set(vATPostingGroupID);
    }

    public LookupData getVATBusinessGroup() {
        return vATBusinessGroup;
    }

    public Object getVATBusinessGroupID() {
        return vATBusinessGroupID.get();
    }

    public String getVATBusinessGroupDisplay() {
        return vATBusinessGroupDisplay.get();
    }

    public LookupDataDA getVATBusinessGroupDA() {
        return this.vATBusinessGroup != null ? new LookupDataDA(this.vATBusinessGroup) : null;
    }

    public void setVATBusinessGroup(LookupData vATBusinessGroup) {
        vATPostingGroup.setVATBusinessGroup(vATBusinessGroup);
        this.vATBusinessGroup = vATBusinessGroup;
        this.vATBusinessGroupID.set(vATBusinessGroup.getId());
        this.vATBusinessGroupDisplay.set(vATBusinessGroup.getDisplayKey());
    }

    public LookupData getVATItemGroup() {
        return vATItemGroup;
    }

    public Object getVATItemGroupID() {
        return vATItemGroupID.get();
    }

    public String getVATItemGroupDisplay() {
        return vATItemGroupDisplay.get();
    }

    public LookupDataDA getVATItemGroupDA() {
        return this.vATItemGroup != null ? new LookupDataDA(this.vATItemGroup) : null;
    }

    public void setVATItemGroup(LookupData vATItemGroup) {
        vATPostingGroup.setVATItemGroup(vATItemGroup);
        this.vATItemGroup = vATItemGroup;
        this.vATItemGroupID.set(vATItemGroup.getId());
        this.vATItemGroupDisplay.set(vATItemGroup.getDisplayKey());
    }

    public float getVATPercent() {
        return vATPercent.get();
    }

    public String getVATPercentDisplay() {
        return vATPercentDisplay.get();
    }

    public void setVATPercent(float vATPercent) {
        vATPostingGroup.setVATPercent(vATPercent);
        this.vATPercent.set(vATPercent);
        this.vATPercentDisplay.set(formatNumber(vATPercent));
    }

    public ChartAccount getVATSalesAccount() {
        return vATSalesAccount;
    }

    public Object getVATSalesAccountID() {
        return vATSalesAccountID.get();
    }

    public String getVATSalesAccountDisplay() {
        return vATSalesAccountDisplay.get();
    }

    public ChartAccountDA getVATSalesAccountDA() {
        return this.vATSalesAccount != null ? new ChartAccountDA(this.vATSalesAccount) : null;
    }

    public void setVATSalesAccount(ChartAccount vATSalesAccount) {
        vATPostingGroup.setVATSalesAccount(vATSalesAccount);
        this.vATSalesAccount = vATSalesAccount;
        this.vATSalesAccountID.set(vATSalesAccount.getId());
        this.vATSalesAccountDisplay.set(vATSalesAccount.getDisplayKey());
    }

    public ChartAccount getVATPurchaseAccount() {
        return vATPurchaseAccount;
    }

    public Object getVATPurchaseAccountID() {
        return vATPurchaseAccountID.get();
    }

    public String getVATPurchaseAccountDisplay() {
        return vATPurchaseAccountDisplay.get();
    }

    public ChartAccountDA getVATPurchaseAccountDA() {
        return this.vATPurchaseAccount != null ? new ChartAccountDA(this.vATPurchaseAccount) : null;
    }

    public void setVATPurchaseAccount(ChartAccount vATPurchaseAccount) {
        vATPostingGroup.setVATPurchaseAccount(vATPurchaseAccount);
        this.vATPurchaseAccount = vATPurchaseAccount;
        this.vATPurchaseAccountID.set(vATPurchaseAccount.getId());
        this.vATPurchaseAccountDisplay.set(vATPurchaseAccount.getDisplayKey());
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof VATPostingGroupDA)) {
            return false;
        }

        VATPostingGroupDA vATPostingGroupDA = (VATPostingGroupDA) o;

        if (vATPostingGroupDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(vATPostingGroupDA.getId());
    }

    @Override
    public int hashCode() {
        return vATPostingGroup.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = vATPostingGroup;
        this.idHelper.set(vATPostingGroup.getIdHelper());
        this.vATPostingGroupID.set(vATPostingGroup.getVATPostingGroupID());
        this.vATBusinessGroup = vATPostingGroup.getVATBusinessGroup();
        if (this.vATBusinessGroup != null) {
            this.vATBusinessGroupID.set(vATBusinessGroup.getId());
            this.vATBusinessGroupDisplay.set(vATBusinessGroup.getDisplayKey());
        }
        this.vATItemGroup = vATPostingGroup.getVATItemGroup();
        if (this.vATItemGroup != null) {
            this.vATItemGroupID.set(vATItemGroup.getId());
            this.vATItemGroupDisplay.set(vATItemGroup.getDisplayKey());
        }
        this.vATPercent.set(vATPostingGroup.getVATPercent());
        this.vATPercentDisplay.set(formatNumber(vATPostingGroup.getVATPercent()));
        this.vATSalesAccount = vATPostingGroup.getVATSalesAccount();
        if (this.vATSalesAccount != null) {
            this.vATSalesAccountID.set(vATSalesAccount.getId());
            this.vATSalesAccountDisplay.set(vATSalesAccount.getDisplayKey());
        }
        this.vATPurchaseAccount = vATPostingGroup.getVATPurchaseAccount();
        if (this.vATPurchaseAccount != null) {
            this.vATPurchaseAccountID.set(vATPurchaseAccount.getId());
            this.vATPurchaseAccountDisplay.set(vATPurchaseAccount.getDisplayKey());
        }
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("vATPostingGroupID", "VAT Posting Group ID", this.vATPostingGroupID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("vATBusinessGroupID", "VAT Business Group ID", this.vATBusinessGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("vATBusinessGroupDisplay", "VAT Business Group", this.vATBusinessGroupDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("vATItemGroupID", "VAT Item Group ID", this.vATItemGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("vATItemGroupDisplay", "VAT Item Group", this.vATItemGroupDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("vATPercent", "VAT Percent", this.vATPercent.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("vATSalesAccountID", "VAT Sales Account ID", this.vATSalesAccountID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("vATSalesAccountDisplay", "VAT Sales Account", this.vATSalesAccountDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("vATPurchaseAccountID", "VAT Purchase Account ID", this.vATPurchaseAccountID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("vATPurchaseAccountDisplay", "VAT Purchase Account", this.vATPurchaseAccountDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.vATPostingGroup.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.vATPostingGroup.getDisplayKey();
    }

    public static List<VATPostingGroupDA> getVATPostingGroupDAs(List<VATPostingGroup> vATPostingGroups) {
        List<VATPostingGroupDA> list = new ArrayList<>();
        vATPostingGroups.forEach((vATPostingGroup) -> {
            list.add(new VATPostingGroupDA(vATPostingGroup));
        });
        return list;
    }

    public static List<VATPostingGroup> getVATPostingGroupList(List<VATPostingGroupDA> vATPostingGroupDAs) {
        List<VATPostingGroup> vATPostingGroups = new ArrayList<>();
        vATPostingGroupDAs.forEach(a -> vATPostingGroups.add(a.vATPostingGroup));
        return vATPostingGroups;
    }

    public boolean save() throws Exception {
        if (!isValid()) {
            return false;
        }
        return super.persist(this.vATPostingGroup);

    }

    public boolean update() throws Exception {
        if (!isValid()) {
            return false;
        }
        return super.merge(this.vATPostingGroup);

    }

    public boolean delete() {
        return super.remove(this.vATPostingGroup);

    }

    public VATPostingGroup getVATPostingGroup(String vATPostingGroupID) {
        return (VATPostingGroup) super.find(VATPostingGroup.class, vATPostingGroupID);
    }

    public VATPostingGroup getVATPostingGroup() {
        return this.vATPostingGroup;
    }

    public List<VATPostingGroup> getVATPostingGroups() {
        return super.find(VATPostingGroup.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(VATPostingGroup.class).forEach(o -> list.add(new VATPostingGroupDA((VATPostingGroup) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public VATPostingGroupDA get(String vATPostingGroupID) throws Exception {
        VATPostingGroup oVATPostingGroup = getVATPostingGroup(vATPostingGroupID);
        if (oVATPostingGroup == null) {
            throw new Exception("No Record with id: " + vATPostingGroupID);
        }
        return new VATPostingGroupDA(oVATPostingGroup);
    }

    public List<VATPostingGroupDA> get(String columName, Object value) {
        List<VATPostingGroupDA> list = new ArrayList<>();
        super.selectQuery(VATPostingGroup.class, columName, value).forEach(da -> list.add(new VATPostingGroupDA((VATPostingGroup) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<VATPostingGroupDA> toDaList(List<VATPostingGroup> vATPostingGroups) {
        List<VATPostingGroupDA> vATPostingGroupDAs = new ArrayList<>();
        vATPostingGroups.forEach(s -> vATPostingGroupDAs.add(new VATPostingGroupDA(s)));
        return vATPostingGroupDAs;
    }

    public List<DBAccess> toDBAccessList(List<VATPostingGroup> vATPostingGroups) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        vATPostingGroups.forEach(s -> dbAccesses.add(new VATPostingGroupDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(VATPostingGroup.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(VATPostingGroup.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIdHelper() {
        return this.getMax("idHelper") + 1;
    }

    public String getNextVATPostingGroupID(int idHelper) {
        return new IDGeneratorDA().getToAppendString(VATPostingGroup.class.getSimpleName(), idHelper);
    }

    public List<VATPostingGroup> getVATPostingGroups(String columName, Object value) {
        return super.find(VATPostingGroup.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(VATPostingGroup.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                VATPostingGroupDA vATPostingGroupDA = new VATPostingGroupDA((VATPostingGroup) e[0]);
                vATPostingGroupDA.revisionEntity = (AppRevisionEntity) e[1];
                vATPostingGroupDA.oRevisionType = (RevisionType) e[2];
                vATPostingGroupDA.initRevProprties();
                vATPostingGroupDA.searchColumns.addAll(vATPostingGroupDA.getRevSearchColumns());
                dBAccesses.add(vATPostingGroupDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    public boolean isValid() throws Exception {
        List<VATPostingGroup> inventoryPostingGroups = super.find(VATPostingGroup.class, "vATBusinessGroup", vATBusinessGroup, "vATItemGroup", vATItemGroup);
        inventoryPostingGroups.remove(vATPostingGroup);
        if (!inventoryPostingGroups.isEmpty()) {
            throw new Exception(ValidationMessages.uniqueMessage("VAT Posting Group", "VAT Business Group", vATBusinessGroup.getLookupDataName(), "VAT Item Group", vATItemGroup.getLookupDataName()));
        }
        return true;
    }

}
