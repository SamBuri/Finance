/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.dbaccess;

import com.saburi.common.dbaccess.DBAccess;
import com.saburi.common.dbaccess.IDGeneratorDA;
import com.saburi.common.dbaccess.LookupDataDA;
import com.saburi.finance.entities.InventoryPostingGroup;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.common.entities.LookupData;
import com.saburi.common.utils.ValidationMessages;
import com.saburi.finance.entities.ChartAccount;

public class InventoryPostingGroupDA extends DBAccess {

    private InventoryPostingGroup inventoryPostingGroup = new InventoryPostingGroup();
    private final SimpleIntegerProperty idHelper = new SimpleIntegerProperty(this, "idHelper");
    private final SimpleStringProperty inventoryPostingGroupID = new SimpleStringProperty(this, "inventoryPostingGroupID");
    private final SimpleStringProperty locationDisplay = new SimpleStringProperty(this, "locationDisplay");
    private final SimpleObjectProperty locationID = new SimpleObjectProperty(this, "locationID");
    private LookupData location;
    private final SimpleStringProperty inventoryGroupDisplay = new SimpleStringProperty(this, "inventoryGroupDisplay");
    private final SimpleObjectProperty inventoryGroupID = new SimpleObjectProperty(this, "inventoryGroupID");
    private LookupData inventoryGroup;
    private final SimpleStringProperty accountDisplay = new SimpleStringProperty(this, "accountDisplay");
    private final SimpleObjectProperty accountID = new SimpleObjectProperty(this, "accountID");
    private ChartAccount account;

    public InventoryPostingGroupDA() {
        createSearchColumns();
    }

    public InventoryPostingGroupDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public InventoryPostingGroupDA(InventoryPostingGroup inventoryPostingGroup) {
        this.inventoryPostingGroup = inventoryPostingGroup;
        initialseProprties();
        createSearchColumns();
    }

    public InventoryPostingGroupDA(String persistenceUnit, InventoryPostingGroup inventoryPostingGroup) {
        super(persistenceUnit);
        this.inventoryPostingGroup = inventoryPostingGroup;
        initialseProprties();
        createSearchColumns();
    }

    public InventoryPostingGroupDA(String inventoryPostingGroupID, LookupData location, LookupData inventoryGroup, ChartAccount account) {
        this.inventoryPostingGroup = new InventoryPostingGroup(getNextIdHelper(), inventoryPostingGroupID, location, inventoryGroup, account);
        initialseProprties();
        createSearchColumns();
    }

    public InventoryPostingGroupDA(String persistenceUnit, String inventoryPostingGroupID, LookupData location, LookupData inventoryGroup, ChartAccount account) {
        super(persistenceUnit);
        this.inventoryPostingGroup = new InventoryPostingGroup(getNextIdHelper(), inventoryPostingGroupID, location, inventoryGroup, account);
        initialseProprties();
        createSearchColumns();
    }

    public int getIdHelper() {
        return idHelper.get();
    }

    public void setIdHelper(int idHelper) {
        inventoryPostingGroup.setIdHelper(idHelper);
        this.idHelper.set(idHelper);
    }

    public String getInventoryPostingGroupID() {
        return inventoryPostingGroupID.get();
    }

    public void setInventoryPostingGroupID(String inventoryPostingGroupID) {
        inventoryPostingGroup.setInventoryPostingGroupID(inventoryPostingGroupID);
        this.inventoryPostingGroupID.set(inventoryPostingGroupID);
    }

    public LookupData getLocation() {
        return location;
    }

    public Object getLocationID() {
        return locationID.get();
    }

    public String getLocationDisplay() {
        return locationDisplay.get();
    }

    public LookupDataDA getLocationDA() {
        return this.location != null ? new LookupDataDA(this.location) : null;
    }

    public void setLocation(LookupData location) {
        inventoryPostingGroup.setLocation(location);
        this.location = location;
        this.locationID.set(location.getId());
        this.locationDisplay.set(location.getDisplayKey());
    }

    public LookupData getInventoryGroup() {
        return inventoryGroup;
    }

    public Object getInventoryGroupID() {
        return inventoryGroupID.get();
    }

    public String getInventoryGroupDisplay() {
        return inventoryGroupDisplay.get();
    }

    public LookupDataDA getInventoryGroupDA() {
        return this.inventoryGroup != null ? new LookupDataDA(this.inventoryGroup) : null;
    }

    public void setInventoryGroup(LookupData inventoryGroup) {
        inventoryPostingGroup.setInventoryGroup(inventoryGroup);
        this.inventoryGroup = inventoryGroup;
        this.inventoryGroupID.set(inventoryGroup.getId());
        this.inventoryGroupDisplay.set(inventoryGroup.getDisplayKey());
    }

    public ChartAccount getAccount() {
        return account;
    }

    public Object getAccountID() {
        return accountID.get();
    }

    public String getAccountDisplay() {
        return accountDisplay.get();
    }

    public ChartAccountDA getAccountDA() {
        return this.account != null ? new ChartAccountDA(this.account) : null;
    }

    public void setAccount(ChartAccount account) {
        inventoryPostingGroup.setAccount(account);
        this.account = account;
        this.accountID.set(account.getId());
        this.accountDisplay.set(account.getDisplayKey());
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof InventoryPostingGroupDA)) {
            return false;
        }

        InventoryPostingGroupDA inventoryPostingGroupDA = (InventoryPostingGroupDA) o;

        if (inventoryPostingGroupDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(inventoryPostingGroupDA.getId());
    }

    @Override
    public int hashCode() {
        return inventoryPostingGroup.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = inventoryPostingGroup;
        this.idHelper.set(inventoryPostingGroup.getIdHelper());
        this.inventoryPostingGroupID.set(inventoryPostingGroup.getInventoryPostingGroupID());
        this.location = inventoryPostingGroup.getLocation();
        if (this.location != null) {
            this.locationID.set(location.getId());
            this.locationDisplay.set(location.getDisplayKey());
        }
        this.inventoryGroup = inventoryPostingGroup.getInventoryGroup();
        if (this.inventoryGroup != null) {
            this.inventoryGroupID.set(inventoryGroup.getId());
            this.inventoryGroupDisplay.set(inventoryGroup.getDisplayKey());
        }
        this.account = inventoryPostingGroup.getAccount();
        if (this.account != null) {
            this.accountID.set(account.getId());
            this.accountDisplay.set(account.getDisplayKey());
        }
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("inventoryPostingGroupID", "Inventory Posting Group ID", this.inventoryPostingGroupID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("locationID", "Location ID", this.locationID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("locationDisplay", "Location", this.locationDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("inventoryGroupID", "Inventory Group ID", this.inventoryGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("inventoryGroupDisplay", "Inventory Group", this.inventoryGroupDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("accountID", "Account ID", this.accountID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("accountDisplay", "Account", this.accountDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.inventoryPostingGroup.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.inventoryPostingGroup.getDisplayKey();
    }

    public static List<InventoryPostingGroupDA> getInventoryPostingGroupDAs(List<InventoryPostingGroup> inventoryPostingGroups) {
        List<InventoryPostingGroupDA> list = new ArrayList<>();
        inventoryPostingGroups.forEach((inventoryPostingGroup) -> {
            list.add(new InventoryPostingGroupDA(inventoryPostingGroup));
        });
        return list;
    }

    public static List<InventoryPostingGroup> getInventoryPostingGroupList(List<InventoryPostingGroupDA> inventoryPostingGroupDAs) {
        List<InventoryPostingGroup> inventoryPostingGroups = new ArrayList<>();
        inventoryPostingGroupDAs.forEach(a -> inventoryPostingGroups.add(a.inventoryPostingGroup));
        return inventoryPostingGroups;
    }

    public boolean save() throws Exception {
        if (!isValid()) {
            return false;
        }
        return super.persist(this.inventoryPostingGroup);

    }

    public boolean update() throws Exception {
        if (!isValid()) {
            return false;
        }
        return super.merge(this.inventoryPostingGroup);

    }

    public boolean delete() {
        return super.remove(this.inventoryPostingGroup);

    }

    public InventoryPostingGroup getInventoryPostingGroup(String inventoryPostingGroupID) {
        return (InventoryPostingGroup) super.find(InventoryPostingGroup.class, inventoryPostingGroupID);
    }

    public InventoryPostingGroup getInventoryPostingGroup() {
        return this.inventoryPostingGroup;
    }

    public List<InventoryPostingGroup> getInventoryPostingGroups() {
        return super.find(InventoryPostingGroup.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(InventoryPostingGroup.class).forEach(o -> list.add(new InventoryPostingGroupDA((InventoryPostingGroup) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public InventoryPostingGroupDA get(String inventoryPostingGroupID) throws Exception {
        InventoryPostingGroup oInventoryPostingGroup = getInventoryPostingGroup(inventoryPostingGroupID);
        if (oInventoryPostingGroup == null) {
            throw new Exception("No Record with id: " + inventoryPostingGroupID);
        }
        return new InventoryPostingGroupDA(oInventoryPostingGroup);
    }

    public List<InventoryPostingGroupDA> get(String columName, Object value) {
        List<InventoryPostingGroupDA> list = new ArrayList<>();
        super.selectQuery(InventoryPostingGroup.class, columName, value).forEach(da -> list.add(new InventoryPostingGroupDA((InventoryPostingGroup) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<InventoryPostingGroupDA> toDaList(List<InventoryPostingGroup> inventoryPostingGroups) {
        List<InventoryPostingGroupDA> inventoryPostingGroupDAs = new ArrayList<>();
        inventoryPostingGroups.forEach(s -> inventoryPostingGroupDAs.add(new InventoryPostingGroupDA(s)));
        return inventoryPostingGroupDAs;
    }

    public List<DBAccess> toDBAccessList(List<InventoryPostingGroup> inventoryPostingGroups) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        inventoryPostingGroups.forEach(s -> dbAccesses.add(new InventoryPostingGroupDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(InventoryPostingGroup.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(InventoryPostingGroup.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIdHelper() {
        return this.getMax("idHelper") + 1;
    }

    public String getNextInventoryPostingGroupID(int idHelper) {
        return new IDGeneratorDA().getToAppendString(InventoryPostingGroup.class.getSimpleName(), idHelper);
    }

    public List<InventoryPostingGroup> getInventoryPostingGroups(String columName, Object value) {
        return super.find(InventoryPostingGroup.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(InventoryPostingGroup.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                InventoryPostingGroupDA inventoryPostingGroupDA = new InventoryPostingGroupDA((InventoryPostingGroup) e[0]);
                inventoryPostingGroupDA.revisionEntity = (AppRevisionEntity) e[1];
                inventoryPostingGroupDA.oRevisionType = (RevisionType) e[2];
                inventoryPostingGroupDA.initRevProprties();
                inventoryPostingGroupDA.searchColumns.addAll(inventoryPostingGroupDA.getRevSearchColumns());
                dBAccesses.add(inventoryPostingGroupDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    public boolean isValid() throws Exception {
        List<InventoryPostingGroup> inventoryPostingGroups = super.find(InventoryPostingGroup.class, "location", location, "inventoryGroup", inventoryGroup);
        inventoryPostingGroups.remove(inventoryPostingGroup);
        if (!inventoryPostingGroups.isEmpty()) {
            throw new Exception(ValidationMessages.uniqueMessage("Inventory Posting Group", "location", location.getLookupDataName(), "inventoryGroup", inventoryGroup.getLookupDataName()));
        }
        return true;
    }

}
