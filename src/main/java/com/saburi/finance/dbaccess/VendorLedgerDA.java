/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.dbaccess;

import com.saburi.common.dbaccess.DBAccess;
import com.saburi.common.dbaccess.IDGeneratorDA;
import com.saburi.finance.entities.VendorLedger;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import com.saburi.common.entities.Company;
import com.saburi.finance.entities.FinancialPeriod;
import com.saburi.finance.entities.JournalEntry;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import java.time.LocalDate;
import static com.saburi.common.utils.Utilities.formatDate;
import com.saburi.finance.entities.JournalEntryDetail;
import com.saburi.finance.entities.Vendor;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.Root;
import com.saburi.finance.utils.FinanceEnums.DocumentTypes;
import static com.saburi.common.utils.Utilities.formatNumber;

public class VendorLedgerDA extends DBAccess {

    private VendorLedger vendorLedger = new VendorLedger();
    private final SimpleIntegerProperty ledgerID = new SimpleIntegerProperty(this, "ledgerID");
    private final SimpleStringProperty journalEntryDetailDisplay = new SimpleStringProperty(this, "journalEntryDetailDisplay");
    private final SimpleObjectProperty journalEntryDetailID = new SimpleObjectProperty(this, "journalEntryDetailID");
    private JournalEntryDetail journalEntryDetail;
    private final SimpleStringProperty vendorID = new SimpleStringProperty(this, "vendorID");
    private final SimpleStringProperty vendorName = new SimpleStringProperty(this, "vendorName");
    private final SimpleObjectProperty postingDate = new SimpleObjectProperty(this, "postingDate");
    private final SimpleStringProperty postingDateDisplay = new SimpleStringProperty(this, "postingDateDisplay");
    private final SimpleObjectProperty documentType = new SimpleObjectProperty(this, "documentType");
    private final SimpleStringProperty description = new SimpleStringProperty(this, "description");
    private final SimpleStringProperty documentNo = new SimpleStringProperty(this, "documentNo");
    private final SimpleStringProperty referenceNo = new SimpleStringProperty(this, "referenceNo");
    private final SimpleDoubleProperty amount = new SimpleDoubleProperty(this, "amount");
    private final SimpleStringProperty amountDisplay = new SimpleStringProperty(this, "amountDisplay");
    private final SimpleDoubleProperty debit = new SimpleDoubleProperty(this, "debit");
    private final SimpleStringProperty debitDisplay = new SimpleStringProperty(this, "debitDisplay");
    private final SimpleDoubleProperty credit = new SimpleDoubleProperty(this, "credit");
    private final SimpleStringProperty creditDisplay = new SimpleStringProperty(this, "creditDisplay");
    private final SimpleDoubleProperty balance = new SimpleDoubleProperty(this, "balance");
    private final SimpleStringProperty balanceDisplay = new SimpleStringProperty(this, "balanceDisplay");

    public VendorLedgerDA() {
        createSearchColumns();
    }

    public VendorLedgerDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public VendorLedgerDA(VendorLedger vendorLedger) {
        this.vendorLedger = vendorLedger;
        initialseProprties();
        createSearchColumns();
    }

    public VendorLedgerDA(String persistenceUnit, VendorLedger vendorLedger) {
        super(persistenceUnit);
        this.vendorLedger = vendorLedger;
        initialseProprties();
        createSearchColumns();
    }

    public VendorLedgerDA(JournalEntryDetail journalEntryDetail, String vendorID, String vendorName, LocalDate postingDate, DocumentTypes documentType, String description, String documentNo, String referenceNo, double amount, double balance) {
        this.vendorLedger = new VendorLedger(journalEntryDetail, vendorID, vendorName, postingDate, documentType, description, documentNo, referenceNo, amount, balance);
        initialseProprties();
        createSearchColumns();
    }

    public VendorLedgerDA(String persistenceUnit, JournalEntryDetail journalEntryDetail, String vendorID, String vendorName, LocalDate postingDate, DocumentTypes documentType, String description, String documentNo, String referenceNo, double amount, double balance) {
        super(persistenceUnit);
        this.vendorLedger = new VendorLedger(journalEntryDetail, vendorID, vendorName, postingDate, documentType, description, documentNo, referenceNo, amount, balance);
        initialseProprties();
        createSearchColumns();
    }

    public int getLedgerID() {
        return ledgerID.get();
    }

    public void setLedgerID(int ledgerID) {
        vendorLedger.setLedgerID(ledgerID);
        this.ledgerID.set(ledgerID);
    }

    public JournalEntryDetail getJournalEntryDetail() {
        return journalEntryDetail;
    }

    public Object getJournalEntryDetailID() {
        return journalEntryDetailID.get();
    }

    public String getJournalEntryDetailDisplay() {
        return journalEntryDetailDisplay.get();
    }

    public JournalEntryDetailDA getJournalEntryDetailDA() {
        return this.journalEntryDetail != null ? new JournalEntryDetailDA(this.journalEntryDetail) : null;
    }

    public void setJournalEntryDetail(JournalEntryDetail journalEntryDetail) {
        vendorLedger.setJournalEntryDetail(journalEntryDetail);
        this.journalEntryDetail = journalEntryDetail;
        this.journalEntryDetailID.set(journalEntryDetail.getId());
        this.journalEntryDetailDisplay.set(journalEntryDetail.getDisplayKey());
    }

    public String getVendorID() {
        return vendorID.get();
    }

    public void setVendorID(String vendorID) {
        vendorLedger.setVendorID(vendorID);
        this.vendorID.set(vendorID);
    }

    public String getVendorName() {
        return vendorName.get();
    }

    public void setVendorName(String vendorName) {
        vendorLedger.setVendorName(vendorName);
        this.vendorName.set(vendorName);
    }

    public Object getPostingDate() {
        return postingDate.get();
    }

    public String getPostingDateDisplay() {
        return postingDateDisplay.get();
    }

    public void setPostingDate(LocalDate postingDate) {
        vendorLedger.setPostingDate(postingDate);
        this.postingDate.set(postingDate);
    }

    public Object getDocumentType() {
        return documentType.get();
    }

    public void setDocumentType(DocumentTypes documentType) {
        vendorLedger.setDocumentType(documentType);
        this.documentType.set(documentType);
    }

    public String getDescription() {
        return description.get();
    }

    public void setDescription(String description) {
        vendorLedger.setDescription(description);
        this.description.set(description);
    }

    public String getDocumentNo() {
        return documentNo.get();
    }

    public void setDocumentNo(String documentNo) {
        vendorLedger.setDocumentNo(documentNo);
        this.documentNo.set(documentNo);
    }

    public String getReferenceNo() {
        return referenceNo.get();
    }

    public void setReferenceNo(String referenceNo) {
        vendorLedger.setReferenceNo(referenceNo);
        this.referenceNo.set(referenceNo);
    }

    public double getAmount() {
        return amount.get();
    }

    public String getAmountDisplay() {
        return amountDisplay.get();
    }

    public void setAmount(double amount) {
        vendorLedger.setAmount(amount);
        this.amount.set(amount);
        this.amountDisplay.set(formatNumber(amount));
    }

    public double getDebit() {
        return debit.get();
    }

    public String getDebitDisplay() {
        return debitDisplay.get();
    }

    public void setDebit(double debit) {
        vendorLedger.setDebit(debit);
        this.debit.set(debit);
        this.debitDisplay.set(formatNumber(debit));
    }

    public double getCredit() {
        return credit.get();
    }

    public String getCreditDisplay() {
        return creditDisplay.get();
    }

    public void setCredit(double credit) {
        vendorLedger.setCredit(credit);
        this.credit.set(credit);
        this.creditDisplay.set(formatNumber(credit));
    }

    public double getBalance() {
        return balance.get();
    }

    public String getBalanceDisplay() {
        return balanceDisplay.get();
    }

    public void setBalance(double balance) {
        vendorLedger.setBalance(balance);
        this.balance.set(balance);
        this.balanceDisplay.set(formatNumber(balance));
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof VendorLedgerDA)) {
            return false;
        }

        VendorLedgerDA vendorLedgerDA = (VendorLedgerDA) o;

        if (vendorLedgerDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(vendorLedgerDA.getId());
    }

    @Override
    public int hashCode() {
        return vendorLedger.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = vendorLedger;
        this.ledgerID.set(vendorLedger.getLedgerID());
        this.journalEntryDetail = vendorLedger.getJournalEntryDetail();
        if (this.journalEntryDetail != null) {
            this.journalEntryDetailID.set(journalEntryDetail.getId());
            this.journalEntryDetailDisplay.set(journalEntryDetail.getDisplayKey());
        }
        this.vendorID.set(vendorLedger.getVendorID());
        this.vendorName.set(vendorLedger.getVendorName());
        this.postingDate.set(vendorLedger.getPostingDate());
        this.postingDateDisplay.set(formatDate(vendorLedger.getPostingDate()));
        this.documentType.set(vendorLedger.getDocumentType());
        this.description.set(vendorLedger.getDescription());
        this.documentNo.set(vendorLedger.getDocumentNo());
        this.referenceNo.set(vendorLedger.getReferenceNo());
        this.amount.set(vendorLedger.getAmount());
        this.amountDisplay.set(formatNumber(vendorLedger.getAmount()));
        this.debit.set(vendorLedger.getDebit());
        this.debitDisplay.set(formatNumber(vendorLedger.getDebit()));
        this.credit.set(vendorLedger.getCredit());
        this.creditDisplay.set(formatNumber(vendorLedger.getCredit()));
        this.balance.set(vendorLedger.getBalance());
        this.balanceDisplay.set(formatNumber(vendorLedger.getBalance()));
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("journalEntryDetailID", "Journal Entry Detail ID", this.journalEntryDetailID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("journalEntryDetailDisplay", "Journal Entry Detail", this.journalEntryDetailDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("vendorID", "Vendor ID", this.vendorID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("vendorName", "Vendor Name", this.vendorName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("postingDate", "Posting Date", this.postingDate.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("documentType", "Document Type", this.documentType.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("description", "Description", this.description.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("documentNo", "Document No", this.documentNo.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("referenceNo", "Reference No", this.referenceNo.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("amount", "Amount", this.amount.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("debit", "Debit", this.debit.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("credit", "Credit", this.credit.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("balance", "Balance", this.balance.get(), SearchDataTypes.NUMBER));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.vendorLedger.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.vendorLedger.getDisplayKey();
    }

    public static List<VendorLedgerDA> getVendorLedgerDAs(List<VendorLedger> vendorLedgers) {
        List<VendorLedgerDA> list = new ArrayList<>();
        vendorLedgers.forEach((vendorLedger) -> {
            list.add(new VendorLedgerDA(vendorLedger));
        });
        return list;
    }

    public static List<VendorLedger> getVendorLedgerList(List<VendorLedgerDA> vendorLedgerDAs) {
        List<VendorLedger> vendorLedgers = new ArrayList<>();
        vendorLedgerDAs.forEach(a -> vendorLedgers.add(a.vendorLedger));
        return vendorLedgers;
    }

    public boolean save() throws Exception {
        return super.persist(this.vendorLedger);

    }

    public boolean update() throws Exception {
        return super.merge(this.vendorLedger);

    }

    public boolean delete() {
        return super.remove(this.vendorLedger);

    }

    public VendorLedger getVendorLedger(String ledgerID) {
        return (VendorLedger) super.find(VendorLedger.class, ledgerID);
    }

    public VendorLedger getVendorLedger() {
        return this.vendorLedger;
    }

    public List<VendorLedger> getVendorLedgers() {
        return super.find(VendorLedger.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(VendorLedger.class).forEach(o -> list.add(new VendorLedgerDA((VendorLedger) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public VendorLedgerDA get(String ledgerID) throws Exception {
        VendorLedger oVendorLedger = getVendorLedger(ledgerID);
        if (oVendorLedger == null) {
            throw new Exception("No Record with id: " + ledgerID);
        }
        return new VendorLedgerDA(oVendorLedger);
    }

    public List<VendorLedgerDA> get(String columName, Object value) {
        List<VendorLedgerDA> list = new ArrayList<>();
        super.selectQuery(VendorLedger.class, columName, value).forEach(da -> list.add(new VendorLedgerDA((VendorLedger) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<VendorLedgerDA> toDaList(List<VendorLedger> vendorLedgers) {
        List<VendorLedgerDA> vendorLedgerDAs = new ArrayList<>();
        vendorLedgers.forEach(s -> vendorLedgerDAs.add(new VendorLedgerDA(s)));
        return vendorLedgerDAs;
    }

    public List<DBAccess> toDBAccessList(List<VendorLedger> vendorLedgers) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        vendorLedgers.forEach(s -> dbAccesses.add(new VendorLedgerDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(VendorLedger.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(VendorLedger.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextLedgerID() {
        return this.getMax("ledgerID") + 1;
    }

    public String getNextLedgerID(int ledgerID) {
        return new IDGeneratorDA().getToAppendString(VendorLedger.class.getSimpleName(), ledgerID);
    }

    public List<VendorLedger> getVendorLedgers(String columName, Object value) {
        return super.find(VendorLedger.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(VendorLedger.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                VendorLedgerDA vendorLedgerDA = new VendorLedgerDA((VendorLedger) e[0]);
                vendorLedgerDA.revisionEntity = (AppRevisionEntity) e[1];
                vendorLedgerDA.oRevisionType = (RevisionType) e[2];
                vendorLedgerDA.initRevProprties();
                vendorLedgerDA.searchColumns.addAll(vendorLedgerDA.getRevSearchColumns());
                dBAccesses.add(vendorLedgerDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    public double getAccountBalance(Vendor vendor, Company company) {

        try {
            entityManager = entityManagerFactory.createEntityManager();
            CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
            CriteriaQuery<Double> criteriaQuery = criteriaBuilder.createQuery(Double.class);
            Root<VendorLedger> root = criteriaQuery.from(VendorLedger.class);
            Join<VendorLedger, JournalEntryDetail> joinJED = root.join("journalEntryDetail");
            Join<JournalEntryDetail, JournalEntry> joinJE = joinJED.join("journalEntry");
            Join<JournalEntry, FinancialPeriod> joinJEFP = joinJE.join("financialPeriod");
            criteriaQuery.select(criteriaBuilder.sum(criteriaBuilder.diff(root.get("credit"), root.get("debit"))));
            criteriaQuery.where(criteriaBuilder.equal(root.get("vendorID"), vendor.getVendorID()),
                    criteriaBuilder.equal(joinJEFP.get("company"), company));
            Double result = entityManager.createQuery(criteriaQuery).getSingleResult();
            return result == null ? 0 : result;
        } catch (Exception e) {
            throw e;
        } finally {
            entityManager.close();
        }

    }

    public double getAccountBalance(Vendor vendor) {

        try {
            entityManager = entityManagerFactory.createEntityManager();
            CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
            CriteriaQuery<Double> criteriaQuery = criteriaBuilder.createQuery(Double.class);
            Root<VendorLedger> root = criteriaQuery.from(VendorLedger.class);
            criteriaQuery.select(criteriaBuilder.sum(criteriaBuilder.diff(root.get("credit"), root.get("debit"))));
            criteriaQuery.where(criteriaBuilder.equal(root.get("vendorID"), vendor.getVendorID()));
            Double result = entityManager.createQuery(criteriaQuery).getSingleResult();
            return result==null?0:result;
        } catch (Exception e) {
            throw e;
        } finally {
            entityManager.close();
        }

    }

}
