/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.dbaccess;

import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.common.dbaccess.DBAccess;
import com.saburi.common.dbaccess.IDGeneratorDA;
import static com.saburi.common.utils.Utilities.formatInteger;
import com.saburi.common.entities.LookupData;
import com.saburi.common.dbaccess.LookupDataDA;
import com.saburi.finance.entities.Customer;
import com.saburi.finance.entities.CustomerPostingGroup;
import static com.saburi.common.utils.Utilities.formatNumber;
import com.saburi.finance.entities.Invoice;
import com.saburi.finance.entities.SaleOrderDetail;

public class CustomerDA extends DBAccess {

    private Customer customer = new Customer();
    private final SimpleIntegerProperty idHelper = new SimpleIntegerProperty(this, "idHelper");
    private final SimpleStringProperty idHelperDisplay = new SimpleStringProperty(this, "idHelperDisplay");
    private final SimpleStringProperty customerID = new SimpleStringProperty(this, "customerID");
    private final SimpleStringProperty customerName = new SimpleStringProperty(this, "customerName");
    private final SimpleStringProperty customerCategoryDisplay = new SimpleStringProperty(this, "customerCategoryDisplay");
    private final SimpleObjectProperty customerCategoryID = new SimpleObjectProperty(this, "customerCategoryID");
    private LookupData customerCategory;
    private final SimpleStringProperty phoneNo = new SimpleStringProperty(this, "phoneNo");
    private final SimpleStringProperty email = new SimpleStringProperty(this, "email");
    private final SimpleStringProperty address = new SimpleStringProperty(this, "address");
    private final SimpleStringProperty priceGroupDisplay = new SimpleStringProperty(this, "priceGroupDisplay");
    private final SimpleObjectProperty priceGroupID = new SimpleObjectProperty(this, "priceGroupID");
    private LookupData priceGroup;
    private final SimpleStringProperty defaultSponserDisplay = new SimpleStringProperty(this, "defaultSponserDisplay");
    private final SimpleObjectProperty defaultSponserID = new SimpleObjectProperty(this, "defaultSponserID");
    private Customer defaultSponser;
    private final SimpleStringProperty customerPostingGroupDisplay = new SimpleStringProperty(this, "customerPostingGroupDisplay");
    private final SimpleObjectProperty customerPostingGroupID = new SimpleObjectProperty(this, "customerPostingGroupID");
    private CustomerPostingGroup customerPostingGroup;
    private final SimpleStringProperty businessGroupDisplay = new SimpleStringProperty(this, "businessGroupDisplay");
    private final SimpleObjectProperty businessGroupID = new SimpleObjectProperty(this, "businessGroupID");
    private LookupData businessGroup;
    private final SimpleStringProperty vATBusinessGroupDisplay = new SimpleStringProperty(this, "vATBusinessGroupDisplay");
    private final SimpleObjectProperty vATBusinessGroupID = new SimpleObjectProperty(this, "vATBusinessGroupID");
    private LookupData vATBusinessGroup;
    private final SimpleBooleanProperty sponser = new SimpleBooleanProperty(this, "sponser");
    private final SimpleBooleanProperty sponserOnly = new SimpleBooleanProperty(this, "sponserOnly");
    private final SimpleBooleanProperty allowCredit = new SimpleBooleanProperty(this, "allowCredit");
    private final SimpleStringProperty referenceNo = new SimpleStringProperty(this, "referenceNo");
    private final SimpleDoubleProperty balance = new SimpleDoubleProperty(this, "balance");
    private final SimpleStringProperty balanceDisplay = new SimpleStringProperty(this, "balanceDisplay");
    private List<Customer> possibleSponsers = new ArrayList<>();

    public CustomerDA() {
        createSearchColumns();
    }

    public CustomerDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public CustomerDA(Customer customer) {
        this.customer = customer;
        initialseProprties();
        createSearchColumns();
    }

    public CustomerDA(String persistenceUnit, Customer customer) {
        super(persistenceUnit);
        this.customer = customer;
        initialseProprties();
        createSearchColumns();
    }

    public CustomerDA(String customerID, String customerName, LookupData customerCategory, String phoneNo, String email, String address, LookupData priceGroup, Customer defaultSponser, CustomerPostingGroup customerPostingGroup, LookupData businessGroup, LookupData vATBusinessGroup, boolean sponser, boolean sponserOnly, boolean allowCredit, String referenceNo, double balance) {
        this.customer = new Customer(getNextIdHelper(), customerID, customerName, customerCategory, phoneNo, email, address, priceGroup, defaultSponser, customerPostingGroup, businessGroup, vATBusinessGroup, sponser, sponserOnly, allowCredit, referenceNo, balance);
        initialseProprties();
        createSearchColumns();
    }

    public CustomerDA(String persistenceUnit, String customerID, String customerName, LookupData customerCategory, String phoneNo, String email, String address, LookupData priceGroup, Customer defaultSponser, CustomerPostingGroup customerPostingGroup, LookupData businessGroup, LookupData vATBusinessGroup, boolean sponser, boolean sponserOnly, boolean allowCredit, String referenceNo, double balance) {
        super(persistenceUnit);
        this.customer = new Customer(getNextIdHelper(), customerID, customerName, customerCategory, phoneNo, email, address, priceGroup, defaultSponser, customerPostingGroup, businessGroup, vATBusinessGroup, sponser, sponserOnly, allowCredit, referenceNo, balance);
        initialseProprties();
        createSearchColumns();
    }

    public int getIdHelper() {
        return idHelper.get();
    }

    public String getIdHelperDisplay() {
        return idHelperDisplay.get();
    }

    public void setIdHelper(int idHelper) {
        customer.setIdHelper(idHelper);
        this.idHelper.set(idHelper);
    }

    public String getCustomerID() {
        return customerID.get();
    }

    public void setCustomerID(String customerID) {
        customer.setCustomerID(customerID);
        this.customerID.set(customerID);
    }

    public String getCustomerName() {
        return customerName.get();
    }

    public void setCustomerName(String customerName) {
        customer.setCustomerName(customerName);
        this.customerName.set(customerName);
    }

    public LookupData getCustomerCategory() {
        return customerCategory;
    }

    public Object getCustomerCategoryID() {
        return customerCategoryID.get();
    }

    public String getCustomerCategoryDisplay() {
        return customerCategoryDisplay.get();
    }

    public LookupDataDA getCustomerCategoryDA() {
        return this.customerCategory != null ? new LookupDataDA(this.customerCategory) : null;
    }

    public void setCustomerCategory(LookupData customerCategory) {
        customer.setCustomerCategory(customerCategory);
        this.customerCategory = customerCategory;
        this.customerCategoryID.set(customerCategory.getId());
        this.customerCategoryDisplay.set(customerCategory.getDisplayKey());
    }

    public String getPhoneNo() {
        return phoneNo.get();
    }

    public void setPhoneNo(String phoneNo) {
        customer.setPhoneNo(phoneNo);
        this.phoneNo.set(phoneNo);
    }

    public String getEmail() {
        return email.get();
    }

    public void setEmail(String email) {
        customer.setEmail(email);
        this.email.set(email);
    }

    public String getAddress() {
        return address.get();
    }

    public void setAddress(String address) {
        customer.setAddress(address);
        this.address.set(address);
    }

    public LookupData getPriceGroup() {
        return priceGroup;
    }

    public Object getPriceGroupID() {
        return priceGroupID.get();
    }

    public String getPriceGroupDisplay() {
        return priceGroupDisplay.get();
    }

    public LookupDataDA getPriceGroupDA() {
        return this.priceGroup != null ? new LookupDataDA(this.priceGroup) : null;
    }

    public void setPriceGroup(LookupData priceGroup) {
        customer.setPriceGroup(priceGroup);
        this.priceGroup = priceGroup;
        this.priceGroupID.set(priceGroup.getId());
        this.priceGroupDisplay.set(priceGroup.getDisplayKey());
    }

    public Customer getDefaultSponser() {
        return defaultSponser;
    }

    public Object getDefaultSponserID() {
        return defaultSponserID.get();
    }

    public String getDefaultSponserDisplay() {
        return defaultSponserDisplay.get();
    }

    public CustomerDA getDefaultSponserDA() {
        return this.defaultSponser != null ? new CustomerDA(this.defaultSponser) : null;
    }

    public void setDefaultSponser(Customer defaultSponser) {
        customer.setDefaultSponser(defaultSponser);
        this.defaultSponser = defaultSponser;
        this.defaultSponserID.set(defaultSponser.getId());
        this.defaultSponserDisplay.set(defaultSponser.getDisplayKey());
    }

    public CustomerPostingGroup getCustomerPostingGroup() {
        return customerPostingGroup;
    }

    public Object getCustomerPostingGroupID() {
        return customerPostingGroupID.get();
    }

    public String getCustomerPostingGroupDisplay() {
        return customerPostingGroupDisplay.get();
    }

    public CustomerPostingGroupDA getCustomerPostingGroupDA() {
        return this.customerPostingGroup != null ? new CustomerPostingGroupDA(this.customerPostingGroup) : null;
    }

    public void setCustomerPostingGroup(CustomerPostingGroup customerPostingGroup) {
        customer.setCustomerPostingGroup(customerPostingGroup);
        this.customerPostingGroup = customerPostingGroup;
        this.customerPostingGroupID.set(customerPostingGroup.getId());
        this.customerPostingGroupDisplay.set(customerPostingGroup.getDisplayKey());
    }

    public LookupData getBusinessGroup() {
        return businessGroup;
    }

    public Object getBusinessGroupID() {
        return businessGroupID.get();
    }

    public String getBusinessGroupDisplay() {
        return businessGroupDisplay.get();
    }

    public LookupDataDA getBusinessGroupDA() {
        return this.businessGroup != null ? new LookupDataDA(this.businessGroup) : null;
    }

    public void setBusinessGroup(LookupData businessGroup) {
        customer.setBusinessGroup(businessGroup);
        this.businessGroup = businessGroup;
        this.businessGroupID.set(businessGroup.getId());
        this.businessGroupDisplay.set(businessGroup.getDisplayKey());
    }

    public LookupData getVATBusinessGroup() {
        return vATBusinessGroup;
    }

    public Object getVATBusinessGroupID() {
        return vATBusinessGroupID.get();
    }

    public String getVATBusinessGroupDisplay() {
        return vATBusinessGroupDisplay.get();
    }

    public LookupDataDA getVATBusinessGroupDA() {
        return this.vATBusinessGroup != null ? new LookupDataDA(this.vATBusinessGroup) : null;
    }

    public void setVATBusinessGroup(LookupData vATBusinessGroup) {
        customer.setVATBusinessGroup(vATBusinessGroup);
        this.vATBusinessGroup = vATBusinessGroup;
        this.vATBusinessGroupID.set(vATBusinessGroup.getId());
        this.vATBusinessGroupDisplay.set(vATBusinessGroup.getDisplayKey());
    }

    public boolean isSponser() {
        return sponser.get();
    }

    public void setSponser(boolean sponser) {
        customer.setSponser(sponser);
        this.sponser.set(sponser);
    }

    public boolean isSponserOnly() {
        return sponserOnly.get();
    }

    public void setSponserOnly(boolean sponserOnly) {
        customer.setSponserOnly(sponserOnly);
        this.sponserOnly.set(sponserOnly);
    }

    public boolean isAllowCredit() {
        return allowCredit.get();
    }

    public void setAllowCredit(boolean allowCredit) {
        customer.setAllowCredit(allowCredit);
        this.allowCredit.set(allowCredit);
    }

    public String getReferenceNo() {
        return referenceNo.get();
    }

    public void setReferenceNo(String referenceNo) {
        customer.setReferenceNo(referenceNo);
        this.referenceNo.set(referenceNo);
    }

    public double getBalance() {
        return balance.get();
    }

    public String getBalanceDisplay() {
        return balanceDisplay.get();
    }

    public void setBalance(double balance) {
        customer.setBalance(balance);
        this.balance.set(balance);
        this.balanceDisplay.set(formatNumber(balance));
    }

    public List<Customer> getPossibleSponsers() {
        return possibleSponsers;
    }

    public List<CustomerDA> getPossibleSponsersDAs() {
        return CustomerDA.getCustomerDAs(customer.getPossibleSponsers());
    }

    public void setPossibleSponsers(List<Customer> possibleSponsers) {
        customer.setPossibleSponsers(possibleSponsers);
        this.possibleSponsers = possibleSponsers;
    }

    public void setPossibleSponsersDAs(List<CustomerDA> customerDAs) {
        this.customer.setPossibleSponsers(CustomerDA.getCustomerList(customerDAs));

    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof CustomerDA)) {
            return false;
        }

        CustomerDA customerDA = (CustomerDA) o;

        if (customerDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(customerDA.getId());
    }

    @Override
    public int hashCode() {
        return customer.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = customer;
        this.idHelper.set(customer.getIdHelper());
        this.idHelperDisplay.set(formatInteger(customer.getIdHelper()));
        this.customerID.set(customer.getCustomerID());
        this.customerName.set(customer.getCustomerName());
        this.customerCategory = customer.getCustomerCategory();
        if (this.customerCategory != null) {
            this.customerCategoryID.set(customerCategory.getId());
            this.customerCategoryDisplay.set(customerCategory.getDisplayKey());
        }
        this.phoneNo.set(customer.getPhoneNo());
        this.email.set(customer.getEmail());
        this.address.set(customer.getAddress());
        this.priceGroup = customer.getPriceGroup();
        if (this.priceGroup != null) {
            this.priceGroupID.set(priceGroup.getId());
            this.priceGroupDisplay.set(priceGroup.getDisplayKey());
        }
        this.defaultSponser = customer.getDefaultSponser();
        if (this.defaultSponser != null) {
            this.defaultSponserID.set(defaultSponser.getId());
            this.defaultSponserDisplay.set(defaultSponser.getDisplayKey());
        }
        this.customerPostingGroup = customer.getCustomerPostingGroup();
        if (this.customerPostingGroup != null) {
            this.customerPostingGroupID.set(customerPostingGroup.getId());
            this.customerPostingGroupDisplay.set(customerPostingGroup.getDisplayKey());
        }
        this.businessGroup = customer.getBusinessGroup();
        if (this.businessGroup != null) {
            this.businessGroupID.set(businessGroup.getId());
            this.businessGroupDisplay.set(businessGroup.getDisplayKey());
        }
        this.vATBusinessGroup = customer.getVATBusinessGroup();
        if (this.vATBusinessGroup != null) {
            this.vATBusinessGroupID.set(vATBusinessGroup.getId());
            this.vATBusinessGroupDisplay.set(vATBusinessGroup.getDisplayKey());
        }
        this.sponser.set(customer.isSponser());
        this.sponserOnly.set(customer.isSponserOnly());
        this.allowCredit.set(customer.isAllowCredit());
        this.referenceNo.set(customer.getReferenceNo());
        this.balance.set(customer.getBalance());
        this.balanceDisplay.set(formatNumber(customer.getBalance()));
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("customerID", "Customer ID", this.customerID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("customerName", "Customer Name", this.customerName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("customerCategoryID", "Customer Category ID", this.customerCategoryID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("customerCategoryDisplay", "Customer Category", this.customerCategoryDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("phoneNo", "PhoneNo", this.phoneNo.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("email", "Email", this.email.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("address", "Address", this.address.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("priceGroupID", "Price Group ID", this.priceGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("priceGroupDisplay", "Price Group", this.priceGroupDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("defaultSponserID", "Default Sponser ID", this.defaultSponserID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("defaultSponserDisplay", "Default Sponser", this.defaultSponserDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("customerPostingGroupID", "Customer Posting Group ID", this.customerPostingGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("customerPostingGroupDisplay", "Customer Posting Group", this.customerPostingGroupDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("businessGroupID", "Business Group ID", this.businessGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("businessGroupDisplay", "Business Group", this.businessGroupDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("vATBusinessGroupID", "VAT Business Group ID", this.vATBusinessGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("vATBusinessGroupDisplay", "VAT Business Group", this.vATBusinessGroupDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("sponser", "Can Sponser", this.sponser.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.add(new SearchColumn("sponserOnly", "Sponser Only", this.sponserOnly.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.add(new SearchColumn("allowCredit", "Allow Credit", this.allowCredit.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.add(new SearchColumn("referenceNo", "Reference No", this.referenceNo.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("balance", "Balance", this.balance.get(), balanceDisplay.get(), SearchDataTypes.MONEY));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.customer.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.customer.getDisplayKey();
    }

    public static List<CustomerDA> getCustomerDAs(List<Customer> customers) {
        List<CustomerDA> list = new ArrayList<>();
        customers.forEach((customer) -> {
            list.add(new CustomerDA(customer));
        });
        return list;
    }

    public static List<Customer> getCustomerList(List<CustomerDA> customerDAs) {
        List<Customer> customers = new ArrayList<>();
        customerDAs.forEach(a -> customers.add(a.customer));
        return customers;
    }

    public boolean save() throws Exception {
        return super.persist(this.customer);

    }

    public boolean update() throws Exception {
        return super.merge(this.customer);

    }

    public boolean delete() {
        return super.remove(this.customer);

    }

    public Customer getCustomer(String customerID) {
        return (Customer) super.findJoin(Customer.class, customerID, "possibleSponsers");
    }

    public Customer getCustomer() {
        return this.customer;
    }

    public List<Customer> getCustomers() {
        return super.find(Customer.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(Customer.class).forEach(o -> list.add(new CustomerDA((Customer) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public CustomerDA get(String customerID) throws Exception {
        Customer oCustomer = getCustomer(customerID);
        if (oCustomer == null) {
            throw new Exception("No Record with id: " + customerID);
        }
        return new CustomerDA(oCustomer);
    }

    public List<CustomerDA> get(String columName, Object value) {
        List<CustomerDA> list = new ArrayList<>();
        super.selectQuery(Customer.class, columName, value).forEach(da -> list.add(new CustomerDA((Customer) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<CustomerDA> toDaList(List<Customer> customers) {
        List<CustomerDA> customerDAs = new ArrayList<>();
        customers.forEach(s -> customerDAs.add(new CustomerDA(s)));
        return customerDAs;
    }

    public List<DBAccess> toDBAccessList(List<Customer> customers) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        customers.forEach(s -> dbAccesses.add(new CustomerDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(Customer.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(Customer.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIdHelper() {
        return this.getMax("idHelper") + 1;
    }

    public String getNextCustomerID(int idHelper) {
        return new IDGeneratorDA().getToAppendString(Customer.class.getSimpleName(), idHelper);
    }

    public List<Customer> getCustomers(String columName, Object value) {
        return super.find(Customer.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(Customer.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                CustomerDA customerDA = new CustomerDA((Customer) e[0]);
                customerDA.revisionEntity = (AppRevisionEntity) e[1];
                customerDA.oRevisionType = (RevisionType) e[2];
                customerDA.initRevProprties();
                customerDA.searchColumns.addAll(customerDA.getRevSearchColumns());
                dBAccesses.add(customerDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    public List<Customer> getSponseringCustomers() {
        return this.getCustomers("sponser", true);
    }

    public List<CustomerDA> getSponseringCustomerDAs() {
        return toDaList(getSponseringCustomers());
    }

    public List<Customer> getSellableCustomers() {
        return this.getCustomers("sponserOnly", false);
    }

    public List<CustomerDA> getSellableCustomerDAs() {
        return toDaList(getSellableCustomers());
    }

    public List<Customer> getAllSponseringCustomers() {
        List<Customer> allSponseringCustomers = this.customer.getPossibleSponsers();
        if (defaultSponser != null) {
            allSponseringCustomers.add(defaultSponser);
        }
        allSponseringCustomers.add(customer);
        return allSponseringCustomers;
    }

    public List<CustomerDA> getAllSponseringCustomerDAs() {
        return toDaList(getAllSponseringCustomers());
    }

    public Customer getTranDefaulSponser() {
        return defaultSponser == null ? customer : defaultSponser;
    }

    public List<SaleOrderDetail> getPendingSaleOrderDetails() {
        return new SaleOrderDetailDA().getPendingSaleOrderDetails(this.customer);
    }

    public List<InvoiceDetailsDA> getToCreatePendingInvoiceDetailsDA() {
        List<InvoiceDetailsDA> invoiceDetailsDAs = new ArrayList<>();
        getPendingSaleOrderDetails().forEach(bD -> {
            InvoiceDetailsDA invoiceDetailsDA = new InvoiceDetailsDA();
            invoiceDetailsDA.setSaleOrderDetails(bD);
            invoiceDetailsDAs.add(invoiceDetailsDA);
        });
        return invoiceDetailsDAs;
    }

    public List<Invoice> getDueInvoices() {
        return new InvoiceDA().getDueInvoices(this.customer);
    }

    public List<ReceiptInvoiceDA> getToCreateDueReceiptInvoiceDAs() {
        List<ReceiptInvoiceDA> receiptInvoiceDAs = new ArrayList<>();
        getDueInvoices().forEach(inv -> {
            ReceiptInvoiceDA receiptInvoiceDA = new ReceiptInvoiceDA();
            receiptInvoiceDA.setInvoice(inv);
            receiptInvoiceDAs.add(receiptInvoiceDA);
        });
        return receiptInvoiceDAs;
    }

}
