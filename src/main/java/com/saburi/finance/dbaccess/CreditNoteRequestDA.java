/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.dbaccess;

import com.saburi.common.dbaccess.DBAccess;
import com.saburi.common.dbaccess.IDGeneratorDA;
import com.saburi.finance.entities.CreditNoteRequest;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.finance.entities.Invoice;
import java.time.LocalDate;
import static com.saburi.common.utils.Utilities.formatDate;
import com.saburi.finance.utils.FinanceEnums.RequestStatus;
import static com.saburi.common.utils.Utilities.formatNumber;
import com.saburi.finance.entities.CreditNoteRequestDetails;

public class CreditNoteRequestDA extends DBAccess {

    private CreditNoteRequest creditNoteRequest = new CreditNoteRequest();
    private final SimpleIntegerProperty idHelper = new SimpleIntegerProperty(this, "idHelper");
    private final SimpleStringProperty invoiceDisplay = new SimpleStringProperty(this, "invoiceDisplay");
    private final SimpleStringProperty invoiceID = new SimpleStringProperty(this, "invoiceID");
    private final SimpleStringProperty billToID = new SimpleStringProperty(this, "billToID");
    private final SimpleStringProperty billToName = new SimpleStringProperty(this, "billToName");
    private final SimpleObjectProperty invoiceDate = new SimpleObjectProperty(this, "invoiceDate");
    private final SimpleStringProperty invoiceDateDisplay = new SimpleStringProperty(this, "invoiceDateDisplay");
    private Invoice invoice;
    private final SimpleStringProperty creditNoteRequestID = new SimpleStringProperty(this, "creditNoteRequestID");
    private final SimpleObjectProperty requestDate = new SimpleObjectProperty(this, "requestDate");
    private final SimpleStringProperty requestDateDisplay = new SimpleStringProperty(this, "requestDateDisplay");
    private final SimpleObjectProperty requestStatus = new SimpleObjectProperty(this, "requestStatus");
    private final SimpleDoubleProperty amount = new SimpleDoubleProperty(this, "amount");
    private final SimpleStringProperty amountDisplay = new SimpleStringProperty(this, "amountDisplay");
    private final SimpleStringProperty amountWords = new SimpleStringProperty(this, "amountWords");
    private final SimpleStringProperty notes = new SimpleStringProperty(this, "notes");
    private List<CreditNoteRequestDetails> creditNoteRequestDetails = new ArrayList<>();

    public CreditNoteRequestDA() {
        createSearchColumns();
    }

    public CreditNoteRequestDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public CreditNoteRequestDA(CreditNoteRequest creditNoteRequest) {
        this.creditNoteRequest = creditNoteRequest;
        initialseProprties();
        createSearchColumns();
    }

    public CreditNoteRequestDA(String persistenceUnit, CreditNoteRequest creditNoteRequest) {
        super(persistenceUnit);
        this.creditNoteRequest = creditNoteRequest;
        initialseProprties();
        createSearchColumns();
    }

    public CreditNoteRequestDA(Invoice invoice, String creditNoteRequestID, LocalDate requestDate, RequestStatus requestStatus, double amount, String amountWords, String notes) {
        this.creditNoteRequest = new CreditNoteRequest(getNextIdHelper(invoice), invoice, creditNoteRequestID, requestDate, requestStatus, amount, amountWords, notes);
        initialseProprties();
        createSearchColumns();
    }

    public CreditNoteRequestDA(String persistenceUnit, Invoice invoice, String creditNoteRequestID, LocalDate requestDate, RequestStatus requestStatus, double amount, String amountWords, String notes) {
        super(persistenceUnit);
        this.creditNoteRequest = new CreditNoteRequest(getNextIdHelper(invoice), invoice, creditNoteRequestID, requestDate, requestStatus, amount, amountWords, notes);
        initialseProprties();
        createSearchColumns();
    }

    public int getIdHelper() {
        return idHelper.get();
    }

    public void setIdHelper(int idHelper) {
        creditNoteRequest.setIdHelper(idHelper);
        this.idHelper.set(idHelper);
    }

    public Invoice getInvoice() {
        return invoice;
    }

    public String getInvoiceID() {
        return invoiceID.get();
    }

    public String getInvoiceDisplay() {
        return invoiceDisplay.get();
    }

    public InvoiceDA getInvoiceDA() {
        return this.invoice != null ? new InvoiceDA(this.invoice) : null;
    }

    public void setInvoice(Invoice invoice) {
        creditNoteRequest.setInvoice(invoice);
        this.invoice = invoice;
        this.invoiceID.set(invoice.getInvoiceID());
        this.invoiceDisplay.set(invoice.getDisplayKey());
        this.billToID.set(invoice.getBillTo().getCustomerID());
        this.billToName.set(invoice.getBillTo().getCustomerName());
    }
    
     public String getBillToID() {
        return billToID.get();
    }
     
     public String getBillToName() {
        return billToName.get();
    }

    public String getCreditNoteRequestID() {
        return creditNoteRequestID.get();
    }

    public void setCreditNoteRequestID(String creditNoteRequestID) {
        creditNoteRequest.setCreditNoteRequestID(creditNoteRequestID);
        this.creditNoteRequestID.set(creditNoteRequestID);
    }

    public Object getRequestDate() {
        return requestDate.get();
    }

    public String getRequestDateDisplay() {
        return requestDateDisplay.get();
    }

    public void setRequestDate(LocalDate requestDate) {
        creditNoteRequest.setRequestDate(requestDate);
        this.requestDate.set(requestDate);
    }

    public Object getRequestStatus() {
        return requestStatus.get();
    }

    public void setRequestStatus(RequestStatus requestStatus) {
        creditNoteRequest.setRequestStatus(requestStatus);
        this.requestStatus.set(requestStatus);
    }

    public double getAmount() {
        return amount.get();
    }

    public String getAmountDisplay() {
        return amountDisplay.get();
    }

    public void setAmount(double amount) {
        creditNoteRequest.setAmount(amount);
        this.amount.set(amount);
        this.amountDisplay.set(formatNumber(amount));
    }

    public String getAmountWords() {
        return amountWords.get();
    }

    public void setAmountWords(String amountWords) {
        creditNoteRequest.setAmountWords(amountWords);
        this.amountWords.set(amountWords);
    }

    public String getNotes() {
        return notes.get();
    }

    public void setNotes(String notes) {
        creditNoteRequest.setNotes(notes);
        this.notes.set(notes);
    }

    public List<CreditNoteRequestDetails> getCreditNoteRequestDetails() {
        return creditNoteRequestDetails;
    }

    public List<CreditNoteRequestDetailsDA> getCreditNoteRequestDetailsDAs() {
       return CreditNoteRequestDetailsDA.getCreditNoteRequestDetailsDAs(creditNoteRequest.getCreditNoteRequestDetails());
    }

    public void setCreditNoteRequestDetails(List<CreditNoteRequestDetails> creditNoteRequestDetails) {
        creditNoteRequest.setCreditNoteRequestDetails(creditNoteRequestDetails);
        this.creditNoteRequestDetails = creditNoteRequestDetails;
    }

    public void setCreditNoteRequestDetailsDAs(List<CreditNoteRequestDetailsDA> creditNoteRequestDetailsDAs) {
        this.creditNoteRequest.setCreditNoteRequestDetails(CreditNoteRequestDetailsDA.getCreditNoteRequestDetailsList(creditNoteRequestDetailsDAs));

    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof CreditNoteRequestDA)) {
            return false;
        }

        CreditNoteRequestDA creditNoteRequestDA = (CreditNoteRequestDA) o;

        if (creditNoteRequestDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(creditNoteRequestDA.getId());
    }

    @Override
    public int hashCode() {
        return creditNoteRequest.hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = creditNoteRequest;
        this.idHelper.set(creditNoteRequest.getIdHelper());
        this.invoice = creditNoteRequest.getInvoice();
        if (this.invoice != null) {
            this.invoiceID.set(invoice.getInvoiceID());
            this.invoiceDisplay.set(invoice.getDisplayKey());
            this.billToID.set(invoice.getBillTo().getCustomerID());
            this.billToName.set(invoice.getBillTo().getCustomerName());
            this.invoiceDate.set(invoice.getInvoiceDate());
            this.invoiceDateDisplay.set(formatDate(this.invoice.getInvoiceDate()));
        }
        this.creditNoteRequestID.set(creditNoteRequest.getCreditNoteRequestID());
        this.requestDate.set(creditNoteRequest.getRequestDate());
        this.requestDateDisplay.set(formatDate(creditNoteRequest.getRequestDate()));
        this.requestStatus.set(creditNoteRequest.getRequestStatus());
        this.amount.set(creditNoteRequest.getAmount());
        this.amountDisplay.set(formatNumber(creditNoteRequest.getAmount()));
        this.amountWords.set(creditNoteRequest.getAmountWords());
        this.notes.set(creditNoteRequest.getNotes());
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("invoiceID", "Invoice ID", this.invoiceID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("invoiceDisplay", "Invoice", this.invoiceDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("billToID", "Bill To Customer ID", this.billToID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("billToName", "Bill To Customer Name", this.billToName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("invoiceDate", "Invoice Date", this.invoiceDateDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("creditNoteRequestID", "Credit Note Request ID", this.creditNoteRequestID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("requestDate", "Request Date", this.requestDateDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("requestStatus", "RequestStatus", this.requestStatus.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("amount", "Amount", this.amount.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("amountWords", "AmountWords", this.amountWords.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("notes", "Notes", this.notes.get(), SearchDataTypes.STRING));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.creditNoteRequest.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.creditNoteRequest.getDisplayKey();
    }

    public static List<CreditNoteRequestDA> getCreditNoteRequestDAs(List<CreditNoteRequest> creditNoteRequests) {
        List<CreditNoteRequestDA> list = new ArrayList<>();
        creditNoteRequests.forEach((creditNoteRequest) -> {
            list.add(new CreditNoteRequestDA(creditNoteRequest));
        });
        return list;
    }

    public static List<CreditNoteRequest> getCreditNoteRequestList(List<CreditNoteRequestDA> creditNoteRequestDAs) {
        List<CreditNoteRequest> creditNoteRequests = new ArrayList<>();
        creditNoteRequestDAs.forEach(a -> creditNoteRequests.add(a.creditNoteRequest));
        return creditNoteRequests;
    }

    public boolean save() throws Exception {
        if (isValid()) {
            return super.persist(this.creditNoteRequest);
        }
        return false;
    }

    public boolean update() throws Exception {
        if (isValid()) {
            return super.merge(this.creditNoteRequest);
        }
        return false;

    }

    public boolean delete() {
        return super.remove(this.creditNoteRequest);

    }

    public CreditNoteRequest getCreditNoteRequest(String creditNoteRequestID) {
        return (CreditNoteRequest) super.findJoin(CreditNoteRequest.class, creditNoteRequestID, "creditNoteRequestDetails");
    }

    public CreditNoteRequest getCreditNoteRequest() {
        return this.creditNoteRequest;
    }

    public List<CreditNoteRequest> getCreditNoteRequests() {
        return super.find(CreditNoteRequest.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(CreditNoteRequest.class).forEach(o -> list.add(new CreditNoteRequestDA((CreditNoteRequest) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public CreditNoteRequestDA get(String creditNoteRequestID) throws Exception {
        CreditNoteRequest oCreditNoteRequest = getCreditNoteRequest(creditNoteRequestID);
        if (oCreditNoteRequest == null) {
            throw new Exception("No Record with id: " + creditNoteRequestID);
        }
        return new CreditNoteRequestDA(oCreditNoteRequest);
    }

    public List<CreditNoteRequestDA> get(String columName, Object value) {
        List<CreditNoteRequestDA> list = new ArrayList<>();
        super.selectQuery(CreditNoteRequest.class, columName, value).forEach(da -> list.add(new CreditNoteRequestDA((CreditNoteRequest) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<CreditNoteRequestDA> toDaList(List<CreditNoteRequest> creditNoteRequests) {
        List<CreditNoteRequestDA> creditNoteRequestDAs = new ArrayList<>();
        creditNoteRequests.forEach(s -> creditNoteRequestDAs.add(new CreditNoteRequestDA(s)));
        return creditNoteRequestDAs;
    }

    public List<DBAccess> toDBAccessList(List<CreditNoteRequest> creditNoteRequests) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        creditNoteRequests.forEach(s -> dbAccesses.add(new CreditNoteRequestDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(CreditNoteRequest.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(CreditNoteRequest.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIdHelper(Invoice invoice) {
        return this.getMax("idHelper", "invoice", invoice) + 1;
    }

    public String getNextCreditNoteRequestID(int idHelper, String invoice) {
        return new IDGeneratorDA().getToAppendString(CreditNoteRequest.class.getSimpleName(), invoice, idHelper);
    }

    public List<CreditNoteRequest> getCreditNoteRequests(String columName, Object value) {
        return super.find(CreditNoteRequest.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(CreditNoteRequest.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                CreditNoteRequestDA creditNoteRequestDA = new CreditNoteRequestDA((CreditNoteRequest) e[0]);
                creditNoteRequestDA.revisionEntity = (AppRevisionEntity) e[1];
                creditNoteRequestDA.oRevisionType = (RevisionType) e[2];
                creditNoteRequestDA.initRevProprties();
                creditNoteRequestDA.searchColumns.addAll(creditNoteRequestDA.getRevSearchColumns());
                dBAccesses.add(creditNoteRequestDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    private boolean isValid() throws Exception {
        try {
            if (!creditNoteRequest.getRequestStatus().equals(RequestStatus.Pending)) {
                throw new Exception("The credit note request with ID: " + creditNoteRequest.getCreditNoteRequestID() + " "
                        + "is " + creditNoteRequest.getRequestStatus().name() + " and can't be edited");
            }

            return isAmountValid();

        } catch (Exception e) {
            throw e;
        }
    }

    public boolean isAmountValid() throws Exception {
        try {
            Invoice toSaveInvoice = new InvoiceDA().getInvoice(this.invoice.getInvoiceID());
            double invoiceBalance = toSaveInvoice.getAmount();

            for (CreditNoteRequestDetailsDA crd : this.getCreditNoteRequestDetailsDAs()) {
                crd.validate();
            }
            double toReduceAmount = this.getCreditNoteRequestDetailsDAs()
                    .parallelStream()
                    .mapToDouble((p) -> p.getAmount())
                    .sum();

            if (invoiceBalance < toReduceAmount) {
                throw new Exception("The invoice balance: " + formatNumber(invoiceBalance) + ""
                        + " can't be less than " + formatNumber(toReduceAmount));
            }

            return true;

        } catch (Exception e) {
            throw e;
        }
    }
    
   
    
     public List<CreditNoteRequest> getPendingCreditNoteRequests(){
        return this.getCreditNoteRequests("requestStatus", RequestStatus.Pending);
    }
     public List<CreditNoteRequest> getApprovedCreditNoteRequests(){
        return this.getCreditNoteRequests("requestStatus", RequestStatus.Approved);
    }

}
