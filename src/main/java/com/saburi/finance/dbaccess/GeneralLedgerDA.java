/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.dbaccess;

import com.saburi.common.dbaccess.DBAccess;
import com.saburi.finance.entities.GeneralLedger;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import com.saburi.finance.entities.ChartAccount;
import com.saburi.common.entities.Company;
import com.saburi.finance.entities.FinancialPeriod;
import com.saburi.finance.entities.JournalEntry;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.finance.entities.JournalEntryDetail;
import java.time.LocalDate;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.Root;
import static com.saburi.common.utils.Utilities.formatDate;
import com.saburi.finance.utils.FinanceEnums.AccountTypes;
import static com.saburi.common.utils.Utilities.formatNumber;

public class GeneralLedgerDA extends DBAccess {

    private GeneralLedger generalLedger = new GeneralLedger();
    private final SimpleIntegerProperty ledgerID = new SimpleIntegerProperty(this, "ledgerID");
    private final SimpleStringProperty journalEntryDetailDisplay = new SimpleStringProperty(this, "journalEntryDetailDisplay");
    private final SimpleObjectProperty journalEntryDetailID = new SimpleObjectProperty(this, "journalEntryDetailID");
    private JournalEntryDetail journalEntryDetail;
    private final SimpleObjectProperty postingDate = new SimpleObjectProperty(this, "postingDate");
    private final SimpleStringProperty postingDateDisplay = new SimpleStringProperty(this, "postingDateDisplay");
    private final SimpleStringProperty accountID = new SimpleStringProperty(this, "accountID");
    private final SimpleStringProperty accountName = new SimpleStringProperty(this, "accountName");
    private final SimpleObjectProperty accountType = new SimpleObjectProperty(this, "accountType");
    private final SimpleStringProperty description = new SimpleStringProperty(this, "description");
    private final SimpleDoubleProperty amount = new SimpleDoubleProperty(this, "amount");
    private final SimpleStringProperty amountDisplay = new SimpleStringProperty(this, "amountDisplay");
    private final SimpleDoubleProperty debit = new SimpleDoubleProperty(this, "debit");
    private final SimpleStringProperty debitDisplay = new SimpleStringProperty(this, "debitDisplay");
    private final SimpleDoubleProperty credit = new SimpleDoubleProperty(this, "credit");
    private final SimpleStringProperty creditDisplay = new SimpleStringProperty(this, "creditDisplay");
    private final SimpleDoubleProperty balance = new SimpleDoubleProperty(this, "balance");
    private final SimpleStringProperty balanceDisplay = new SimpleStringProperty(this, "balanceDisplay");

    public GeneralLedgerDA() {
        createSearchColumns();
    }

    public GeneralLedgerDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public GeneralLedgerDA(GeneralLedger generalLedger) {
        this.generalLedger = generalLedger;
        initialseProprties();
        createSearchColumns();
    }

    public GeneralLedgerDA(String persistenceUnit, GeneralLedger generalLedger) {
        super(persistenceUnit);
        this.generalLedger = generalLedger;
        initialseProprties();
        createSearchColumns();
    }

    public GeneralLedgerDA(JournalEntryDetail journalEntryDetail, LocalDate postingDate, String accountID, String accountName, AccountTypes accountType, String description, double amount, double balance) {
        this.generalLedger = new GeneralLedger(journalEntryDetail, postingDate, accountID, accountName, accountType, description, amount, balance);
        initialseProprties();
        createSearchColumns();
    }

    public GeneralLedgerDA(String persistenceUnit, JournalEntryDetail journalEntryDetail, LocalDate postingDate, String accountID, String accountName, AccountTypes accountType, String description, double amount, double balance) {
        super(persistenceUnit);
        this.generalLedger = new GeneralLedger(journalEntryDetail, postingDate, accountID, accountName, accountType, description, amount, balance);
        initialseProprties();
        createSearchColumns();
    }

    public int getLedgerID() {
        return ledgerID.get();
    }

    public JournalEntryDetail getJournalEntryDetail() {
        return journalEntryDetail;
    }

    public Object getJournalEntryDetailID() {
        return journalEntryDetailID.get();
    }

    public String getJournalEntryDetailDisplay() {
        return journalEntryDetailDisplay.get();
    }

    public JournalEntryDetailDA getJournalEntryDetailDA() {
        return this.journalEntryDetail != null ? new JournalEntryDetailDA(this.journalEntryDetail) : null;
    }

    public void setJournalEntryDetail(JournalEntryDetail journalEntryDetail) {
        generalLedger.setJournalEntryDetail(journalEntryDetail);
        this.journalEntryDetail = journalEntryDetail;
        this.journalEntryDetailID.set(journalEntryDetail.getId());
        this.journalEntryDetailDisplay.set(journalEntryDetail.getDisplayKey());
    }

    public Object getPostingDate() {
        return postingDate.get();
    }

    public String getPostingDateDisplay() {
        return postingDateDisplay.get();
    }

    public void setPostingDate(LocalDate postingDate) {
        generalLedger.setPostingDate(postingDate);
        this.postingDate.set(postingDate);
    }

    public String getAccountID() {
        return accountID.get();
    }

    public void setAccountID(String accountID) {
        generalLedger.setAccountID(accountID);
        this.accountID.set(accountID);
    }

    public String getAccountName() {
        return accountName.get();
    }

    public void setAccountName(String accountName) {
        generalLedger.setAccountName(accountName);
        this.accountName.set(accountName);
    }

    public Object getAccountType() {
        return accountType.get();
    }

    public void setAccountType(AccountTypes accountType) {
        generalLedger.setAccountType(accountType);
        this.accountType.set(accountType);
    }

    public String getDescription() {
        return description.get();
    }

    public void setDescription(String description) {
        generalLedger.setDescription(description);
        this.description.set(description);
    }

    public double getAmount() {
        return amount.get();
    }

    public String getAmountDisplay() {
        return amountDisplay.get();
    }

    public void setAmount(double amount) {
        generalLedger.setAmount(amount);
        this.amount.set(amount);
        this.amountDisplay.set(formatNumber(amount));
    }

    public double getDebit() {
        return debit.get();
    }

    public String getDebitDisplay() {
        return debitDisplay.get();
    }

    public void setDebit(double debit) {
        generalLedger.setDebit(debit);
        this.debit.set(debit);
        this.debitDisplay.set(formatNumber(debit));
    }

    public double getCredit() {
        return credit.get();
    }

    public String getCreditDisplay() {
        return creditDisplay.get();
    }

    public void setCredit(double credit) {
        generalLedger.setCredit(credit);
        this.credit.set(credit);
        this.creditDisplay.set(formatNumber(credit));
    }

    public double getBalance() {
        return balance.get();
    }

    public String getBalanceDisplay() {
        return balanceDisplay.get();
    }

    public void setBalance(double balance) {
        generalLedger.setBalance(balance);
        this.balance.set(balance);
        this.balanceDisplay.set(formatNumber(balance));
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof GeneralLedgerDA)) {
            return false;
        }

        GeneralLedgerDA generalLedgerDA = (GeneralLedgerDA) o;

        if (generalLedgerDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(generalLedgerDA.getId());
    }

    @Override
    public int hashCode() {
        return generalLedger.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = generalLedger;
        this.ledgerID.set(generalLedger.getLedgerID());
        this.journalEntryDetail = generalLedger.getJournalEntryDetail();
        if (this.journalEntryDetail != null) {
            this.journalEntryDetailID.set(journalEntryDetail.getId());
            this.journalEntryDetailDisplay.set(journalEntryDetail.getDisplayKey());
        }
        this.postingDate.set(generalLedger.getPostingDate());
        this.postingDateDisplay.set(formatDate(generalLedger.getPostingDate()));
        this.accountID.set(generalLedger.getAccountID());
        this.accountName.set(generalLedger.getAccountName());
        this.accountType.set(generalLedger.getAccountType());
        this.description.set(generalLedger.getDescription());
        this.amount.set(generalLedger.getAmount());
        this.amountDisplay.set(formatNumber(generalLedger.getAmount()));
        this.debit.set(generalLedger.getDebit());
        this.debitDisplay.set(formatNumber(generalLedger.getDebit()));
        this.credit.set(generalLedger.getCredit());
        this.creditDisplay.set(formatNumber(generalLedger.getCredit()));
        this.balance.set(generalLedger.getBalance());
        this.balanceDisplay.set(formatNumber(generalLedger.getBalance()));
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("ledgerID", "Ledger ID", this.ledgerID.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("journalEntryDetailID", "Journal Entry Detail ID", this.journalEntryDetailID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("journalEntryDetailDisplay", "Journal Entry Detail", this.journalEntryDetailDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("postingDate", "Posting Date", this.postingDate.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("accountID", "Account ID", this.accountID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("accountName", "Account Name", this.accountName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("accountType", "Account Type", this.accountType.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("description", "Description", this.description.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("amount", "Amount", this.amount.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("debit", "Debit", this.debit.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("credit", "Credit", this.credit.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("balance", "Balance", this.balance.get(), SearchDataTypes.NUMBER));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.generalLedger.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.generalLedger.getDisplayKey();
    }

    public static List<GeneralLedgerDA> getGeneralLedgerDAs(List<GeneralLedger> generalLedgers) {
        List<GeneralLedgerDA> list = new ArrayList<>();
        generalLedgers.forEach((generalLedger) -> {
            list.add(new GeneralLedgerDA(generalLedger));
        });
        return list;
    }

    public static List<GeneralLedger> getGeneralLedgerList(List<GeneralLedgerDA> generalLedgerDAs) {
        List<GeneralLedger> generalLedgers = new ArrayList<>();
        generalLedgerDAs.forEach(a -> generalLedgers.add(a.generalLedger));
        return generalLedgers;
    }

    public boolean save() throws Exception {
        return super.persist(this.generalLedger);

    }

    public boolean update() throws Exception {
        return super.merge(this.generalLedger);

    }

    public boolean delete() {
        return super.remove(this.generalLedger);

    }

    public GeneralLedger getGeneralLedger(String ledgerID) {
        return (GeneralLedger) super.find(GeneralLedger.class, ledgerID);
    }

    public GeneralLedger getGeneralLedger() {
        return this.generalLedger;
    }

    public List<GeneralLedger> getGeneralLedgers() {
        return super.find(GeneralLedger.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(GeneralLedger.class).forEach(o -> list.add(new GeneralLedgerDA((GeneralLedger) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public GeneralLedgerDA get(String ledgerID) throws Exception {
        GeneralLedger oGeneralLedger = getGeneralLedger(ledgerID);
        if (oGeneralLedger == null) {
            throw new Exception("No Record with id: " + ledgerID);
        }
        return new GeneralLedgerDA(oGeneralLedger);
    }

    public List<GeneralLedgerDA> get(String columName, Object value) {
        List<GeneralLedgerDA> list = new ArrayList<>();
        super.selectQuery(GeneralLedger.class, columName, value).forEach(da -> list.add(new GeneralLedgerDA((GeneralLedger) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<GeneralLedgerDA> toDaList(List<GeneralLedger> generalLedgers) {
        List<GeneralLedgerDA> generalLedgerDAs = new ArrayList<>();
        generalLedgers.forEach(s -> generalLedgerDAs.add(new GeneralLedgerDA(s)));
        return generalLedgerDAs;
    }

    public List<DBAccess> toDBAccessList(List<GeneralLedger> generalLedgers) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        generalLedgers.forEach(s -> dbAccesses.add(new GeneralLedgerDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(GeneralLedger.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(GeneralLedger.class, columnName, comparatorColumn, comparatorVaue);
    }

    public List<GeneralLedger> getGeneralLedgers(String columName, Object value) {
        return super.find(GeneralLedger.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(GeneralLedger.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                GeneralLedgerDA generalLedgerDA = new GeneralLedgerDA((GeneralLedger) e[0]);
                generalLedgerDA.revisionEntity = (AppRevisionEntity) e[1];
                generalLedgerDA.oRevisionType = (RevisionType) e[2];
                generalLedgerDA.initRevProprties();
                generalLedgerDA.searchColumns.addAll(generalLedgerDA.getRevSearchColumns());
                dBAccesses.add(generalLedgerDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    public double getAccountBalance(ChartAccount chartAccount, Company company) {

        try {
            AccountTypes acType = chartAccount.getAccountCategory().getAccountType();
            entityManager = entityManagerFactory.createEntityManager();
            CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
            CriteriaQuery<Double> criteriaQuery = criteriaBuilder.createQuery(Double.class);
            Root<GeneralLedger> root = criteriaQuery.from(GeneralLedger.class);
            Join<GeneralLedger, JournalEntryDetail> joinJED = root.join("journalEntryDetail");
            Join<JournalEntryDetail, JournalEntry> joinJE = joinJED.join("journalEntry");
            Join<JournalEntry, FinancialPeriod> joinJEFP = joinJE.join("financialPeriod");

            if (acType.equals(AccountTypes.Asset) || acType.equals(AccountTypes.Expense)) {
                criteriaQuery.select(criteriaBuilder.sum(criteriaBuilder.diff(root.get("debit"), root.get("credit"))));
            } else {
                criteriaQuery.select(criteriaBuilder.sum(criteriaBuilder.diff(root.get("credit"), root.get("debit"))));
            }
            criteriaQuery.where(criteriaBuilder.equal(root.get("accountID"), chartAccount.getAccountID()),
                    criteriaBuilder.equal(joinJEFP.get("company"), company));
           Double result = entityManager.createQuery(criteriaQuery).getSingleResult();
            return result==null?0:result;
        } catch (Exception e) {
            throw e;
        } finally {
            entityManager.close();
        }

    }

    public double getAccountBalance(ChartAccount chartAccount) {

        try {
            AccountTypes acType = chartAccount.getAccountCategory().getAccountType();
            entityManager = entityManagerFactory.createEntityManager();
            CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
            CriteriaQuery<Double> criteriaQuery = criteriaBuilder.createQuery(Double.class);
            Root<GeneralLedger> root = criteriaQuery.from(GeneralLedger.class);

            if (acType.equals(AccountTypes.Asset) || acType.equals(AccountTypes.Expense)) {
                criteriaQuery.select(criteriaBuilder.sum(criteriaBuilder.diff(root.get("debit"), root.get("credit"))));
            } else {
                criteriaQuery.select(criteriaBuilder.sum(criteriaBuilder.diff(root.get("credit"), root.get("debit"))));
            }
            criteriaQuery.where(criteriaBuilder.equal(root.get("accountID"), chartAccount.getAccountID()));
          Double result = entityManager.createQuery(criteriaQuery).getSingleResult();
            return result==null?0:result;
        } catch (Exception e) {
            throw e;
        } finally {
            entityManager.close();
        }

    }

}
