/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.dbaccess;

import com.saburi.common.dbaccess.DBAccess;
import com.saburi.common.dbaccess.IDGeneratorDA;
import com.saburi.common.dbaccess.LookupDataDA;
import com.saburi.finance.entities.Item;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import com.saburi.finance.entities.Customer;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.finance.entities.ItemCategory;
import static com.saburi.common.utils.Utilities.formatNumber;
import com.saburi.common.entities.LookupData;
import com.saburi.finance.entities.MeasureGroup;
import com.saburi.finance.entities.ItemPriceGroup;
import com.saburi.finance.entities.MeasureRelation;
import java.util.Optional;
import com.saburi.finance.utils.FinanceEnums.UnitMeasureUsages;

public class ItemDA extends DBAccess {

    private Item item = new Item();
    private final SimpleIntegerProperty idHelper = new SimpleIntegerProperty(this, "idHelper");
    private final SimpleStringProperty itemCategoryDisplay = new SimpleStringProperty(this, "itemCategoryDisplay");
    private final SimpleObjectProperty itemCategoryID = new SimpleObjectProperty(this, "itemCategoryID");
    private ItemCategory itemCategory;
    private final SimpleStringProperty itemID = new SimpleStringProperty(this, "itemID");
    private final SimpleStringProperty itemName = new SimpleStringProperty(this, "itemName");
    private final SimpleObjectProperty itemCategoryGroup = new SimpleObjectProperty(this, "itemCategoryGroup");
    private final SimpleDoubleProperty unitCost = new SimpleDoubleProperty(this, "unitCost");
    private final SimpleStringProperty unitCostDisplay = new SimpleStringProperty(this, "unitCostDisplay");
    private final SimpleDoubleProperty unitPrice = new SimpleDoubleProperty(this, "unitPrice");
    private final SimpleStringProperty unitPriceDisplay = new SimpleStringProperty(this, "unitPriceDisplay");
    private final SimpleStringProperty itemGroupDisplay = new SimpleStringProperty(this, "itemGroupDisplay");
    private final SimpleObjectProperty itemGroupID = new SimpleObjectProperty(this, "itemGroupID");
    private LookupData itemGroup;
    private final SimpleStringProperty vATItemGroupDisplay = new SimpleStringProperty(this, "vATItemGroupDisplay");
    private final SimpleObjectProperty vATItemGroupID = new SimpleObjectProperty(this, "vATItemGroupID");
    private LookupData vATItemGroup;
    private final SimpleStringProperty inventoryGroupDisplay = new SimpleStringProperty(this, "inventoryGroupDisplay");
    private final SimpleObjectProperty inventoryGroupID = new SimpleObjectProperty(this, "inventoryGroupID");
    private LookupData inventoryGroup;
    private final SimpleStringProperty measureGroupDisplay = new SimpleStringProperty(this, "measureGroupDisplay");
    private final SimpleObjectProperty measureGroupID = new SimpleObjectProperty(this, "measureGroupID");
    private MeasureGroup measureGroup;
    private List<ItemPriceGroup> itemPriceGroups = new ArrayList<>();

    public ItemDA() {
        createSearchColumns();
    }

    public ItemDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public ItemDA(Item item) {
        this.item = item;
        initialseProprties();
        createSearchColumns();
    }

    public ItemDA(String persistenceUnit, Item item) {
        super(persistenceUnit);
        this.item = item;
        initialseProprties();
        createSearchColumns();
    }

    public ItemDA(ItemCategory itemCategory, String itemID, String itemName, double unitCost, double unitPrice, LookupData itemGroup, LookupData vATItemGroup, LookupData inventoryGroup, MeasureGroup measureGroup) {
        this.item = new Item(getNextIdHelper(itemCategory), itemCategory, itemID, itemName, unitCost, unitPrice, itemGroup, vATItemGroup, inventoryGroup, measureGroup);
        initialseProprties();
        createSearchColumns();
    }

    public ItemDA(String persistenceUnit, ItemCategory itemCategory, String itemID, String itemName, double unitCost, double unitPrice, LookupData itemGroup, LookupData vATItemGroup, LookupData inventoryGroup, MeasureGroup measureGroup) {
        super(persistenceUnit);
        this.item = new Item(getNextIdHelper(itemCategory), itemCategory, itemID, itemName, unitCost, unitPrice, itemGroup, vATItemGroup, inventoryGroup, measureGroup);
        initialseProprties();
        createSearchColumns();
    }

    public int getIdHelper() {
        return idHelper.get();
    }

    public void setIdHelper(int idHelper) {
        item.setIdHelper(idHelper);
        this.idHelper.set(idHelper);
    }

    public ItemCategory getItemCategory() {
        return itemCategory;
    }

    public Object getItemCategoryID() {
        return itemCategoryID.get();
    }

    public String getItemCategoryDisplay() {
        return itemCategoryDisplay.get();
    }

    public ItemCategoryDA getItemCategoryDA() {
        return this.itemCategory != null ? new ItemCategoryDA(this.itemCategory) : null;
    }

    public void setItemCategory(ItemCategory itemCategory) {
        item.setItemCategory(itemCategory);
        this.itemCategory = itemCategory;
        this.itemCategoryID.set(itemCategory.getId());
        this.itemCategoryDisplay.set(itemCategory.getDisplayKey());
        this.itemCategoryGroup.set(itemCategory.getItemCategoryGroup());
    }

    public String getItemID() {
        return itemID.get();
    }

    public void setItemID(String itemID) {
        item.setItemID(itemID);
        this.itemID.set(itemID);
    }

    public String getItemName() {
        return itemName.get();
    }

    public void setItemName(String itemName) {
        item.setItemName(itemName);
        this.itemName.set(itemName);
    }

    public Object getItemCategoryGroup() {
        return itemCategoryGroup.get();
    }

    public double getUnitCost() {
        return unitCost.get();
    }

    public String getUnitCostDisplay() {
        return unitCostDisplay.get();
    }

    public void setUnitCost(double unitCost) {
        item.setUnitCost(unitCost);
        this.unitCost.set(unitCost);
        this.unitCostDisplay.set(formatNumber(unitCost));
    }

    public double getUnitPrice() {
        return unitPrice.get();
    }

    public String getUnitPriceDisplay() {
        return unitPriceDisplay.get();
    }

    public void setUnitPrice(double unitPrice) {
        item.setUnitPrice(unitPrice);
        this.unitPrice.set(unitPrice);
        this.unitPriceDisplay.set(formatNumber(unitPrice));
    }

    public LookupData getItemGroup() {
        return itemGroup;
    }

    public Object getItemGroupID() {
        return itemGroupID.get();
    }

    public String getItemGroupDisplay() {
        return itemGroupDisplay.get();
    }

    public LookupDataDA getItemGroupDA() {
        return this.itemGroup != null ? new LookupDataDA(this.itemGroup) : null;
    }

    public void setItemGroup(LookupData itemGroup) {
        item.setItemGroup(itemGroup);
        this.itemGroup = itemGroup;
        this.itemGroupID.set(itemGroup.getId());
        this.itemGroupDisplay.set(itemGroup.getDisplayKey());
    }

    public LookupData getVATItemGroup() {
        return vATItemGroup;
    }

    public Object getVATItemGroupID() {
        return vATItemGroupID.get();
    }

    public String getVATItemGroupDisplay() {
        return vATItemGroupDisplay.get();
    }

    public LookupDataDA getVATItemGroupDA() {
        return this.vATItemGroup != null ? new LookupDataDA(this.vATItemGroup) : null;
    }

    public void setVATItemGroup(LookupData vATItemGroup) {
        item.setVATItemGroup(vATItemGroup);
        this.vATItemGroup = vATItemGroup;
        this.vATItemGroupID.set(vATItemGroup.getId());
        this.vATItemGroupDisplay.set(vATItemGroup.getDisplayKey());
    }

    public LookupData getInventoryGroup() {
        return inventoryGroup;
    }

    public Object getInventoryGroupID() {
        return inventoryGroupID.get();
    }

    public String getInventoryGroupDisplay() {
        return inventoryGroupDisplay.get();
    }

    public LookupDataDA getInventoryGroupDA() {
        return this.inventoryGroup != null ? new LookupDataDA(this.inventoryGroup) : null;
    }

    public void setInventoryGroup(LookupData inventoryGroup) {
        item.setInventoryGroup(inventoryGroup);
        this.inventoryGroup = inventoryGroup;
        this.inventoryGroupID.set(inventoryGroup.getId());
        this.inventoryGroupDisplay.set(inventoryGroup.getDisplayKey());
    }

    public MeasureGroup getMeasureGroup() {
        return measureGroup;
    }

    public Object getMeasureGroupID() {
        return measureGroupID.get();
    }

    public String getMeasureGroupDisplay() {
        return measureGroupDisplay.get();
    }

    public MeasureGroupDA getMeasureGroupDA() {
        return this.measureGroup != null ? new MeasureGroupDA(this.measureGroup) : null;
    }

    public void setMeasureGroup(MeasureGroup measureGroup) {
        item.setMeasureGroup(measureGroup);
        this.measureGroup = measureGroup;
        this.measureGroupID.set(measureGroup.getId());
        this.measureGroupDisplay.set(measureGroup.getDisplayKey());
    }

    public List<ItemPriceGroup> getItemPriceGroups() {
        return itemPriceGroups;
    }

    public List<ItemPriceGroupDA> getItemPriceGroupsDAs() {
        return ItemPriceGroupDA.getItemPriceGroupDAs(item.getItemPriceGroups());
    }

    public void setItemPriceGroups(List<ItemPriceGroup> itemPriceGroups) {
        item.setItemPriceGroups(itemPriceGroups);
        this.itemPriceGroups = itemPriceGroups;
    }

    public void setItemPriceGroupsDAs(List<ItemPriceGroupDA> itemPriceGroupDAs) {
        this.item.setItemPriceGroups(ItemPriceGroupDA.getItemPriceGroupList(itemPriceGroupDAs));

    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof ItemDA)) {
            return false;
        }

        ItemDA itemDA = (ItemDA) o;

        if (itemDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(itemDA.getId());
    }

    @Override
    public int hashCode() {
        return item.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = item;
        this.idHelper.set(item.getIdHelper());
        this.itemCategory = item.getItemCategory();
        if (this.itemCategory != null) {
            this.itemCategoryID.set(itemCategory.getId());
            this.itemCategoryDisplay.set(itemCategory.getDisplayKey());
            this.itemCategoryGroup.set(itemCategory.getItemCategoryGroup());
        }
        this.itemID.set(item.getItemID());
        this.itemName.set(item.getItemName());

        this.unitCost.set(item.getUnitCost());
        this.unitCostDisplay.set(formatNumber(item.getUnitCost()));
        this.unitPrice.set(item.getUnitPrice());
        this.unitPriceDisplay.set(formatNumber(item.getUnitPrice()));
        this.itemGroup = item.getItemGroup();
        if (this.itemGroup != null) {
            this.itemGroupID.set(itemGroup.getId());
            this.itemGroupDisplay.set(itemGroup.getDisplayKey());
        }
        this.vATItemGroup = item.getVATItemGroup();
        if (this.vATItemGroup != null) {
            this.vATItemGroupID.set(vATItemGroup.getId());
            this.vATItemGroupDisplay.set(vATItemGroup.getDisplayKey());
        }
        this.inventoryGroup = item.getInventoryGroup();
        if (this.inventoryGroup != null) {
            this.inventoryGroupID.set(inventoryGroup.getId());
            this.inventoryGroupDisplay.set(inventoryGroup.getDisplayKey());
        }
        this.measureGroup = item.getMeasureGroup();
        if (this.measureGroup != null) {
            this.measureGroupID.set(measureGroup.getId());
            this.measureGroupDisplay.set(measureGroup.getDisplayKey());
        }
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("itemCategoryID", "Item Category ID", this.itemCategoryID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("itemCategoryDisplay", "Item Category", this.itemCategoryDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("itemID", "Item ID", this.itemID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("itemName", "Item Name", this.itemName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("itemCategoryGroup", "Category Group", this.itemCategoryGroup.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("unitCost", "Unit Cost", this.unitCost.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("unitPrice", "Unit Price", this.unitPrice.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("itemGroupID", "Item Group ID", this.itemGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("itemGroupDisplay", "Item Group", this.itemGroupDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("vATItemGroupID", "VAT Item Group ID", this.vATItemGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("vATItemGroupDisplay", "VAT Item Group", this.vATItemGroupDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("inventoryGroupID", "Inventory Group ID", this.inventoryGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("inventoryGroupDisplay", "Inventory Group", this.inventoryGroupDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("measureGroupID", "Measure Group ID", this.measureGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("measureGroupDisplay", "Measure Group", this.measureGroupDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.item.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.item.getDisplayKey();
    }

    public static List<ItemDA> getItemDAs(List<Item> items) {
        List<ItemDA> list = new ArrayList<>();
        items.forEach((item) -> {
            list.add(new ItemDA(item));
        });
        return list;
    }

    public static List<Item> getItemList(List<ItemDA> itemDAs) {
        List<Item> items = new ArrayList<>();
        itemDAs.forEach(a -> items.add(a.item));
        return items;
    }

    public boolean save() throws Exception {
        return super.persist(this.item);

    }

    public boolean update() throws Exception {
        return super.merge(this.item);

    }

    public boolean delete() {
        return super.remove(this.item);

    }

    public Item getItem(String itemID) {
        return (Item) super.findJoin(Item.class, itemID, "itemPriceGroups");
    }

    public Item getItem() {
        return this.item;
    }

    public List<Item> getItems() {
        return super.find(Item.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(Item.class).forEach(o -> list.add(new ItemDA((Item) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public ItemDA get(String itemID) throws Exception {
        Item oItem = getItem(itemID);
        if (oItem == null) {
            throw new Exception("No Record with id: " + itemID);
        }
        return new ItemDA(oItem);
    }

    public List<ItemDA> get(String columName, Object value) {
        List<ItemDA> list = new ArrayList<>();
        super.selectQuery(Item.class, columName, value).forEach(da -> list.add(new ItemDA((Item) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<ItemDA> toDaList(List<Item> items) {
        List<ItemDA> itemDAs = new ArrayList<>();
        items.forEach(s -> itemDAs.add(new ItemDA(s)));
        return itemDAs;
    }

    public List<DBAccess> toDBAccessList(List<Item> items) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        items.forEach(s -> dbAccesses.add(new ItemDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(Item.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(Item.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIdHelper(ItemCategory itemCategory) {
        return this.getMax("idHelper", "itemCategory", itemCategory) + 1;
    }

    public String getNextItemID(int idHelper, String itemCategory) {
        return new IDGeneratorDA().getToAppendString(Item.class.getSimpleName(), itemCategory, idHelper);
    }

    public List<Item> getItems(String columName, Object value) {
        return super.find(Item.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(Item.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                ItemDA itemDA = new ItemDA((Item) e[0]);
                itemDA.revisionEntity = (AppRevisionEntity) e[1];
                itemDA.oRevisionType = (RevisionType) e[2];
                itemDA.initRevProprties();
                itemDA.searchColumns.addAll(itemDA.getRevSearchColumns());
                dBAccesses.add(itemDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    public double getUnitPrice(Customer customer) {
        if (customer == null) {
            return this.getUnitPrice();
        } else if (customer.getPriceGroup() == null) {
            return this.getUnitPrice();
        } else {
            ItemPriceGroup itemPriceGroup = new ItemPriceGroupDA().getItemPriceGroup(this.getItem(), customer.getPriceGroup());
            if (exists(itemPriceGroup)) {
                return itemPriceGroup.getUnitPrice();
            } else {
                return this.getUnitPrice();
            }
        }
    }

    public double getDiscount(Customer customer) {
        if (customer == null) {
            return 0;
        }
        if (customer.getPriceGroup() == null) {
            return 0;
        } else {
            ItemPriceGroup itemPriceGroup = new ItemPriceGroupDA().getItemPriceGroup(this.getItem(), customer.getPriceGroup());
            if (exists(itemPriceGroup)) {
                return itemPriceGroup.getDiscount();
            } else {
                return 0;
            }
        }
    }

    public double getUnitPrice(CustomerDA customerDA) {
        if (customerDA == null) {
            return this.getUnitPrice();
        } else if (customerDA.getDBEntity() == null) {
            return this.getUnitPrice();
        } else if (customerDA.getPriceGroup() == null) {
            return this.getUnitPrice();
        } else {
            ItemPriceGroup itemPriceGroup = new ItemPriceGroupDA().getItemPriceGroup(this.getItem(), customerDA.getPriceGroup());
            if (exists(itemPriceGroup)) {
                return itemPriceGroup.getUnitPrice();
            } else {
                return this.getUnitPrice();
            }
        }
    }

    public double getDiscount(CustomerDA customerDA) {
        if (customerDA == null) {
            return 0;
        } else if (customerDA.getDBEntity() == null) {
            return 0;
        }
        if (customerDA.getPriceGroup() == null) {
            return 0;
        } else {
            ItemPriceGroup itemPriceGroup = new ItemPriceGroupDA().getItemPriceGroup(this.getItem(), customerDA.getPriceGroup());
            if (exists(itemPriceGroup)) {
                return itemPriceGroup.getDiscount();
            } else {
                return 0;
            }
        }
    }

    public MeasureRelation getMeasureRelation(UnitMeasureUsages unitMeasureUsage) {
        List<MeasureRelation> measureRelations = new MeasureGroupDA().getMeasureGroup(item.getMeasureGroup().getMeasureGroupID())
                .getMeasureRelations();

        Optional<MeasureRelation> invoiceMeasureRelation = measureRelations.stream()
                .filter((p) -> p.getDefaultUsage() != null)
                .filter((p) -> p.getDefaultUsage().equals(unitMeasureUsage))
                .findFirst();
        if (invoiceMeasureRelation.isEmpty()) {

            return new MeasureRelation(measureGroup, measureGroup.getBaseUnitMeasure(), 1, null);
        } else {
            return invoiceMeasureRelation.get();
        }
    }

}
