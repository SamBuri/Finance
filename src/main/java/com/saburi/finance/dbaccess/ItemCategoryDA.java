/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.dbaccess;

import com.saburi.common.dbaccess.DBAccess;
import com.saburi.common.dbaccess.IDGeneratorDA;
import com.saburi.finance.entities.ItemCategory;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.finance.utils.FinanceEnums.ItemCategoryGroups;

public class ItemCategoryDA extends DBAccess {

    private ItemCategory itemCategory = new ItemCategory();
    private final SimpleIntegerProperty idHelper = new SimpleIntegerProperty(this, "idHelper");
    private final SimpleObjectProperty itemCategoryGroup = new SimpleObjectProperty(this, "itemCategoryGroup");
    private final SimpleStringProperty itemCategoryID = new SimpleStringProperty(this, "itemCategoryID");
    private final SimpleStringProperty itemCategoryName = new SimpleStringProperty(this, "itemCategoryName");
    private final SimpleBooleanProperty hidden = new SimpleBooleanProperty(this, "hidden");

    public ItemCategoryDA() {
        createSearchColumns();
    }

    public ItemCategoryDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public ItemCategoryDA(ItemCategory itemCategory) {
        this.itemCategory = itemCategory;
        initialseProprties();
        createSearchColumns();
    }

    public ItemCategoryDA(String persistenceUnit, ItemCategory itemCategory) {
        super(persistenceUnit);
        this.itemCategory = itemCategory;
        initialseProprties();
        createSearchColumns();
    }

    public ItemCategoryDA(ItemCategoryGroups itemGroup, String itemCategoryID, String itemCategoryName, boolean hidden) {
        this.itemCategory = new ItemCategory(getNextIdHelper(itemGroup), itemGroup, itemCategoryID, itemCategoryName, hidden);
        initialseProprties();
        createSearchColumns();
    }

    public ItemCategoryDA(String persistenceUnit, ItemCategoryGroups itemGroup, String itemCategoryID, String itemCategoryName, boolean hidden) {
        super(persistenceUnit);
        this.itemCategory = new ItemCategory(getNextIdHelper(itemGroup), itemGroup, itemCategoryID, itemCategoryName, hidden);
        initialseProprties();
        createSearchColumns();
    }

    public int getIdHelper() {
        return idHelper.get();
    }

    public void setIdHelper(int idHelper) {
        itemCategory.setIdHelper(idHelper);
        this.idHelper.set(idHelper);
    }

    public Object getItemGroup() {
        return itemCategoryGroup.get();
    }

    public void setItemGroup(ItemCategoryGroups itemCategoryGroup) {
        itemCategory.setItemCategoryGroup(itemCategoryGroup);
        this.itemCategoryGroup.set(this.itemCategoryGroup);
    }

    public String getItemCategoryID() {
        return itemCategoryID.get();
    }

    public void setItemCategoryID(String itemCategoryID) {
        itemCategory.setItemCategoryID(itemCategoryID);
        this.itemCategoryID.set(itemCategoryID);
    }

    public String getItemCategoryName() {
        return itemCategoryName.get();
    }

    public void setItemCategoryName(String itemCategoryName) {
        itemCategory.setItemCategoryName(itemCategoryName);
        this.itemCategoryName.set(itemCategoryName);
    }

    public boolean isHidden() {
        return hidden.get();
    }

    public void setHidden(boolean hidden) {
        itemCategory.setHidden(hidden);
        this.hidden.set(hidden);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof ItemCategoryDA)) {
            return false;
        }

        ItemCategoryDA itemCategoryDA = (ItemCategoryDA) o;

        if (itemCategoryDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(itemCategoryDA.getId());
    }

    @Override
    public int hashCode() {
        return itemCategory.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = itemCategory;
        this.idHelper.set(itemCategory.getIdHelper());
        this.itemCategoryGroup.set(itemCategory.getItemCategoryGroup());
        this.itemCategoryID.set(itemCategory.getItemCategoryID());
        this.itemCategoryName.set(itemCategory.getItemCategoryName());
        this.hidden.set(itemCategory.isHidden());
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("itemGroup", "Item Group", this.itemCategoryGroup.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("itemCategoryID", "Item Category ID", this.itemCategoryID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("itemCategoryName", "Item Category Name", this.itemCategoryName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("hidden", "Hidden", this.hidden.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.itemCategory.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.itemCategory.getDisplayKey();
    }

    public static List<ItemCategoryDA> getItemCategoryDAs(List<ItemCategory> itemCategorys) {
        List<ItemCategoryDA> list = new ArrayList<>();
        itemCategorys.forEach((itemCategory) -> {
            list.add(new ItemCategoryDA(itemCategory));
        });
        return list;
    }

    public static List<ItemCategory> getItemCategoryList(List<ItemCategoryDA> itemCategoryDAs) {
        List<ItemCategory> itemCategorys = new ArrayList<>();
        itemCategoryDAs.forEach(a -> itemCategorys.add(a.itemCategory));
        return itemCategorys;
    }

    public boolean save() throws Exception {
        return super.persist(this.itemCategory);

    }

    public boolean update() throws Exception {
        return super.merge(this.itemCategory);

    }

    public boolean delete() {
        return super.remove(this.itemCategory);

    }

    public ItemCategory getItemCategory(String itemCategoryID) {
        return (ItemCategory) super.find(ItemCategory.class, itemCategoryID);
    }

    public ItemCategory getItemCategory() {
        return this.itemCategory;
    }

    public List<ItemCategory> getItemCategorys() {
        return super.find(ItemCategory.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(ItemCategory.class).forEach(o -> list.add(new ItemCategoryDA((ItemCategory) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public ItemCategoryDA get(String itemCategoryID) throws Exception {
        ItemCategory oItemCategory = getItemCategory(itemCategoryID);
        if (oItemCategory == null) {
            throw new Exception("No Record with id: " + itemCategoryID);
        }
        return new ItemCategoryDA(oItemCategory);
    }

    public List<ItemCategoryDA> get(String columName, Object value) {
        List<ItemCategoryDA> list = new ArrayList<>();
        super.selectQuery(ItemCategory.class, columName, value).forEach(da -> list.add(new ItemCategoryDA((ItemCategory) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<ItemCategoryDA> toDaList(List<ItemCategory> itemCategorys) {
        List<ItemCategoryDA> itemCategoryDAs = new ArrayList<>();
        itemCategorys.forEach(s -> itemCategoryDAs.add(new ItemCategoryDA(s)));
        return itemCategoryDAs;
    }

    public List<DBAccess> toDBAccessList(List<ItemCategory> itemCategorys) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        itemCategorys.forEach(s -> dbAccesses.add(new ItemCategoryDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(ItemCategory.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(ItemCategory.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIdHelper(Object itemCategoryGroup) {
        return this.getMax("idHelper", "itemCategoryGroup", itemCategoryGroup) + 1;
    }

    public String getNextItemCategoryID(int idHelper, ItemCategoryGroups itemGroup) {
        return new IDGeneratorDA().getToAppendString(ItemCategory.class.getSimpleName(), (itemGroup.ordinal() + 1), idHelper);
    }

    public List<ItemCategory> getItemCategorys(String columName, Object value) {
        return super.find(ItemCategory.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(ItemCategory.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                ItemCategoryDA itemCategoryDA = new ItemCategoryDA((ItemCategory) e[0]);
                itemCategoryDA.revisionEntity = (AppRevisionEntity) e[1];
                itemCategoryDA.oRevisionType = (RevisionType) e[2];
                itemCategoryDA.initRevProprties();
                itemCategoryDA.searchColumns.addAll(itemCategoryDA.getRevSearchColumns());
                dBAccesses.add(itemCategoryDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

}
