/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.dbaccess;

import com.saburi.common.dbaccess.DBAccess;
import com.saburi.finance.entities.CreditNoteRequestDetails;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.finance.entities.CreditNoteRequest;
import com.saburi.finance.entities.Customer;
import com.saburi.finance.entities.Invoice;
import com.saburi.finance.entities.InvoiceDetails;
import static com.saburi.common.utils.Utilities.formatDate;
import static com.saburi.common.utils.Utilities.formatNumber;

public class CreditNoteRequestDetailsDA extends DBAccess {

    private CreditNoteRequestDetails creditNoteRequestDetails = new CreditNoteRequestDetails();
    private final SimpleIntegerProperty creditNoteDetailID = new SimpleIntegerProperty(this, "creditNoteDetailID");
    private final SimpleStringProperty creditNoteDisplay = new SimpleStringProperty(this, "creditNoteDisplay");
    private final SimpleObjectProperty creditNoteID = new SimpleObjectProperty(this, "creditNoteID");
    private CreditNoteRequest creditNoteRequest;
    private final SimpleStringProperty invoiceDetailDisplay = new SimpleStringProperty(this, "invoiceDetailDisplay");
    private final SimpleObjectProperty invoiceDetailID = new SimpleObjectProperty(this, "invoiceDetailID");
    private final SimpleStringProperty invoiceID = new SimpleStringProperty(this, "invoiceID");
    private final SimpleStringProperty billToID = new SimpleStringProperty(this, "billToID");
    private final SimpleStringProperty billToName = new SimpleStringProperty(this, "billToName");
    private final SimpleObjectProperty invoiceDate = new SimpleObjectProperty(this, "invoiceDate");
    private final SimpleStringProperty invoiceDateDisplay = new SimpleStringProperty(this, "invoiceDateDisplay");
    private final SimpleStringProperty sellToID = new SimpleStringProperty(this, "billToID");
    private final SimpleStringProperty sellToName = new SimpleStringProperty(this, "billToName");
    private InvoiceDetails invoiceDetail;
    private final SimpleStringProperty itemID = new SimpleStringProperty(this, "itemID");
    private final SimpleStringProperty itemName = new SimpleStringProperty(this, "itemName");
    private final SimpleIntegerProperty baseQuantity = new SimpleIntegerProperty(this, "baseQuantity");
    private final SimpleStringProperty unitMeasure = new SimpleStringProperty(this, "unitMeasure");
    private final SimpleIntegerProperty measureSize = new SimpleIntegerProperty(this, "measureSize");
    private final SimpleIntegerProperty quantity = new SimpleIntegerProperty(this, "quantity");
    private final SimpleDoubleProperty unitPrice = new SimpleDoubleProperty(this, "unitPrice");
    private final SimpleStringProperty unitPriceDisplay = new SimpleStringProperty(this, "unitPriceDisplay");
    private final SimpleDoubleProperty amount = new SimpleDoubleProperty(this, "amount");
    private final SimpleStringProperty amountDisplay = new SimpleStringProperty(this, "amountDisplay");
    private final SimpleStringProperty notes = new SimpleStringProperty(this, "notes");
    private final SimpleObjectProperty requestStatus = new SimpleObjectProperty(this, "requestStatus");
    private final SimpleIntegerProperty invoiceQuantity = new SimpleIntegerProperty(this, "invoiceQuantity");
    private final SimpleDoubleProperty invoiceAmount = new SimpleDoubleProperty(this, "invoiceAmount");
    private final SimpleStringProperty invoiceAmountDisplay = new SimpleStringProperty(this, "invoiceAmountDisplay");

    public CreditNoteRequestDetailsDA() {
        createSearchColumns();
    }

    public CreditNoteRequestDetailsDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public CreditNoteRequestDetailsDA(CreditNoteRequestDetails creditNoteRequestDetails) {
        this.creditNoteRequestDetails = creditNoteRequestDetails;
        initialseProprties();
        createSearchColumns();
    }

    public CreditNoteRequestDetailsDA(String persistenceUnit, CreditNoteRequestDetails creditNoteRequestDetails) {
        super(persistenceUnit);
        this.creditNoteRequestDetails = creditNoteRequestDetails;
        initialseProprties();
        createSearchColumns();
    }

    public CreditNoteRequestDetailsDA(int creditNoteDetailID, CreditNoteRequest creditNote, InvoiceDetails invoiceDetail, int baseQuantity, String unitMeasure, int measureSize, int quantity, double unitPrice, double amount, String notes) {
        this.creditNoteRequestDetails = new CreditNoteRequestDetails(creditNoteDetailID, creditNote, invoiceDetail, baseQuantity, unitMeasure, measureSize, quantity, unitPrice, amount, notes);
        initialseProprties();
        createSearchColumns();
    }

    public CreditNoteRequestDetailsDA(String persistenceUnit, int creditNoteDetailID, CreditNoteRequest creditNote, InvoiceDetails invoiceDetail, int baseQuantity, String unitMeasure, int measureSize, int quantity, double unitPrice, double amount, String notes) {
        super(persistenceUnit);
        this.creditNoteRequestDetails = new CreditNoteRequestDetails(creditNoteDetailID, creditNote, invoiceDetail, baseQuantity, unitMeasure, measureSize, quantity, unitPrice, amount, notes);
        initialseProprties();
        createSearchColumns();
    }

    public int getCreditNoteDetailID() {
        return creditNoteDetailID.get();
    }

    public String getItemID() {
        return itemID.get();
    }

    public String getItemName() {
        return itemName.get();
    }

    public void setCreditNoteDetailID(int creditNoteDetailID) {
        creditNoteRequestDetails.setCreditNoteDetailID(creditNoteDetailID);
        this.creditNoteDetailID.set(creditNoteDetailID);
    }

    public CreditNoteRequest getCreditNoteRequest() {
        return creditNoteRequest;
    }

    public Object getCreditNoteID() {
        return creditNoteID.get();
    }

    public String getCreditNoteDisplay() {
        return creditNoteDisplay.get();
    }

    public CreditNoteRequestDA getCreditNoteRequestDA() {
        return this.creditNoteRequest != null ? new CreditNoteRequestDA(this.creditNoteRequest) : null;
    }

    public void setCreditNoteRequest(CreditNoteRequest creditNote) {
        creditNoteRequestDetails.setCreditNoteRequest(creditNote);
        this.creditNoteRequest = creditNote;
        this.creditNoteID.set(creditNote.getId());
        this.creditNoteDisplay.set(creditNote.getDisplayKey());
    }

    public InvoiceDetails getInvoiceDetails() {
        return invoiceDetail;
    }

    public Object getInvoiceDetailID() {
        return invoiceDetailID.get();
    }

    public String getInvoiceDetailDisplay() {
        return invoiceDetailDisplay.get();
    }

    public InvoiceDetailsDA getInvoiceDetailsDA() {
        return this.invoiceDetail != null ? new InvoiceDetailsDA(this.invoiceDetail) : null;
    }

    public void setInvoiceDetails(InvoiceDetails invoiceDetail) {
        creditNoteRequestDetails.setInvoiceDetails(invoiceDetail);
        this.invoiceDetail = invoiceDetail;
        this.invoiceDetailID.set(invoiceDetail.getId());
        this.invoiceDetailDisplay.set(invoiceDetail.getDisplayKey());
        this.itemID.set(invoiceDetail.getItem().getItemID());
        this.itemName.set(invoiceDetail.getItem().getItemName());
        this.invoiceQuantity.set(invoiceDetail.getQuantity());
        this.invoiceAmount.set(invoiceDetail.getAmount());
        this.invoiceAmountDisplay.set(formatNumber(invoiceAmount.get()));
        this.setUnitPrice(invoiceDetail.getUnitPrice());
        this.setBaseQuantity(1);
        this.setUnitMeasure(invoiceDetail.getUnitMeasure());
        this.setMeasureSize(invoiceDetail.getMeasureSize());
    }

    public int getBaseQuantity() {
        return baseQuantity.get();
    }

    public void setBaseQuantity(int baseQuantity) {
        creditNoteRequestDetails.setBaseQuantity(baseQuantity);
        this.baseQuantity.set(baseQuantity);
        setQuantity();
    }

    public String getUnitMeasure() {
        return unitMeasure.get();
    }

    public void setUnitMeasure(String unitMeasure) {
        creditNoteRequestDetails.setUnitMeasure(unitMeasure);
        this.unitMeasure.set(unitMeasure);
    }

    public int getMeasureSize() {
        return measureSize.get();
    }

    public void setMeasureSize(int measureSize) {
        creditNoteRequestDetails.setMeasureSize(measureSize);
        this.measureSize.set(measureSize);
        setQuantity();
    }

    public int getQuantity() {
        return quantity.get();
    }

    private void setQuantity() {
        int calQuantity = this.baseQuantity.get() * this.measureSize.get();
        creditNoteRequestDetails.setQuantity(calQuantity);
        this.quantity.set(calQuantity);
        this.setAmount();
    }

    public double getUnitPrice() {
        return unitPrice.get();
    }

    public String getUnitPriceDisplay() {
        return unitPriceDisplay.get();
    }

    public void setUnitPrice(double unitPrice) {
        creditNoteRequestDetails.setUnitPrice(unitPrice);
        this.unitPrice.set(unitPrice);
        this.unitPriceDisplay.set(formatNumber(unitPrice));
        setAmount();
    }

    public double getAmount() {
        return amount.get();
    }

    public String getAmountDisplay() {
        return amountDisplay.get();
    }

    private void setAmount() {
        double amountCalc = (this.quantity.get() * this.unitPrice.get());
        this.amount.set(amountCalc);
        this.amountDisplay.set(formatNumber(amountCalc));
        creditNoteRequestDetails.setAmount(amountCalc);

    }

    public String getNotes() {
        return notes.get();
    }

    public void setNotes(String notes) {
        creditNoteRequestDetails.setNotes(notes);
        this.notes.set(notes);
    }

    public int getInvoiceQuantity() {
        return invoiceQuantity.get();
    }

    public double getInvoiceAmount() {
        return invoiceAmount.get();
    }

    public String getInvoiceAmountDisplay() {
        return invoiceAmountDisplay.get();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof CreditNoteRequestDetailsDA)) {
            return false;
        }

        CreditNoteRequestDetailsDA creditNoteRequestDetailsDA = (CreditNoteRequestDetailsDA) o;

        if (creditNoteRequestDetailsDA.getCreditNoteRequestDetails() == null || this.getCreditNoteRequestDetails() == null) {
            return false;
        }
        return this.getCreditNoteRequestDetails().equals(creditNoteRequestDetailsDA.getCreditNoteRequestDetails());
    }

    @Override
    public int hashCode() {
        return creditNoteRequestDetails.hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = creditNoteRequestDetails;
        this.creditNoteDetailID.set(creditNoteRequestDetails.getCreditNoteDetailID());
        this.creditNoteRequest = creditNoteRequestDetails.getCreditNoteRequest();
        if (this.creditNoteRequest != null) {
            this.creditNoteID.set(creditNoteRequest.getId());
            this.creditNoteDisplay.set(creditNoteRequest.getDisplayKey());
            this.requestStatus.set(creditNoteRequest.getRequestStatus());
            Invoice invoice = creditNoteRequest.getInvoice();
            if (invoice != null) {
                this.invoiceID.set(invoice.getInvoiceID());
                this.billToID.set(invoice.getBillTo().getCustomerID());
                this.billToName.set(invoice.getBillTo().getCustomerName());
                this.invoiceDate.set(invoice.getInvoiceDate());
                this.invoiceDateDisplay.set(formatDate(invoice.getInvoiceDate()));
            }

        }
        this.invoiceDetail = creditNoteRequestDetails.getInvoiceDetails();
        if (this.invoiceDetail != null) {

            this.invoiceDetailID.set(invoiceDetail.getId());
            this.invoiceDetailDisplay.set(invoiceDetail.getDisplayKey());
            this.itemID.set(this.invoiceDetail.getItem().getItemID());
            this.itemName.set(this.invoiceDetail.getItem().getItemName());
            this.invoiceQuantity.set(invoiceDetail.getQuantity());
            this.invoiceAmount.set(invoiceDetail.getAmount());
            this.invoiceAmountDisplay.set(formatNumber(invoiceAmount.get()));
            Customer sellTo = invoiceDetail.getSellTo();
            if (sellTo != null) {
                this.sellToID.set(sellTo.getCustomerID());
                this.sellToName.set(sellTo.getDisplayKey());
            }
        }
        this.baseQuantity.set(creditNoteRequestDetails.getBaseQuantity());
        this.unitMeasure.set(creditNoteRequestDetails.getUnitMeasure());
        this.measureSize.set(creditNoteRequestDetails.getMeasureSize());
        this.quantity.set(creditNoteRequestDetails.getQuantity());
        this.unitPrice.set(creditNoteRequestDetails.getUnitPrice());
        this.unitPriceDisplay.set(formatNumber(creditNoteRequestDetails.getUnitPrice()));
        this.amount.set(creditNoteRequestDetails.getAmount());
        this.amountDisplay.set(formatNumber(creditNoteRequestDetails.getAmount()));
        this.notes.set(creditNoteRequestDetails.getNotes());
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("invoiceID", "Invoice ID", this.invoiceID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("billToID", "Bill To Customer ID", this.billToID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("billToName", "Bill To Customer Name", this.billToName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("invoiceDate", "Invoice Date", this.invoiceDateDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("sellToID", "Sell To ID", this.sellToID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("sellToDisplay", "Sell To", this.sellToName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("creditNoteDetailID", "CreditNote Detail ID", this.creditNoteDetailID.get(), SearchDataTypes.NUMBER, false));
        this.searchColumns.add(new SearchColumn("creditNoteID", "Credit Note Request ID", this.creditNoteID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("creditNoteDisplay", "Credit Note Request", this.creditNoteDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("ItemID", "Item ID", this.itemID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("ItemName", "Item Name", this.itemName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("baseQuantity", "Base Quantity", this.baseQuantity.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("unitMeasure", "Unit Measure", this.unitMeasure.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("measureSize", "Measure Size", this.measureSize.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("quantity", "Quantity", this.quantity.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("unitPrice", "Unit Price", this.unitPrice.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("amount", "Amount", this.amount.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("requestStatus", "RequestStatus", this.requestStatus.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("notes", "Notes", this.notes.get(), SearchDataTypes.STRING));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.creditNoteRequestDetails.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.creditNoteRequestDetails.getDisplayKey();
    }

    public static List<CreditNoteRequestDetailsDA> getCreditNoteRequestDetailsDAs(List<CreditNoteRequestDetails> creditNoteRequestDetailss) {
        List<CreditNoteRequestDetailsDA> list = new ArrayList<>();
        creditNoteRequestDetailss.forEach((creditNoteRequestDetails) -> {
            list.add(new CreditNoteRequestDetailsDA(creditNoteRequestDetails));
        });
        return list;
    }

    public static List<CreditNoteRequestDetails> getCreditNoteRequestDetailsList(List<CreditNoteRequestDetailsDA> creditNoteRequestDetailsDAs) {
        List<CreditNoteRequestDetails> creditNoteRequestDetailss = new ArrayList<>();
        creditNoteRequestDetailsDAs.forEach(a -> creditNoteRequestDetailss.add(a.creditNoteRequestDetails));
        return creditNoteRequestDetailss;
    }

    public boolean save() throws Exception {
        if (validate()) {
            return super.persist(this.creditNoteRequestDetails);
        }
        return false;
    }

    public boolean update() throws Exception {
        return super.merge(this.creditNoteRequestDetails);

    }

    public boolean delete() {
        return super.remove(this.creditNoteRequestDetails);

    }

    public CreditNoteRequestDetails getCreditNoteRequestDetails(int creditNoteDetailID) {
        return (CreditNoteRequestDetails) super.find(CreditNoteRequestDetails.class, creditNoteDetailID);
    }

    public CreditNoteRequestDetails getCreditNoteRequestDetails() {
        return this.creditNoteRequestDetails;
    }

    public List<CreditNoteRequestDetails> getCreditNoteRequestDetailss() {
        return super.find(CreditNoteRequestDetails.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(CreditNoteRequestDetails.class).forEach(o -> list.add(new CreditNoteRequestDetailsDA((CreditNoteRequestDetails) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public CreditNoteRequestDetailsDA get(int creditNoteDetailID) throws Exception {
        CreditNoteRequestDetails oCreditNoteRequestDetails = getCreditNoteRequestDetails(creditNoteDetailID);
        if (oCreditNoteRequestDetails == null) {
            throw new Exception("No Record with id: " + creditNoteDetailID);
        }
        return new CreditNoteRequestDetailsDA(oCreditNoteRequestDetails);
    }

    public List<CreditNoteRequestDetailsDA> get(String columName, Object value) {
        List<CreditNoteRequestDetailsDA> list = new ArrayList<>();
        super.selectQuery(CreditNoteRequestDetails.class, columName, value).forEach(da -> list.add(new CreditNoteRequestDetailsDA((CreditNoteRequestDetails) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<CreditNoteRequestDetailsDA> toDaList(List<CreditNoteRequestDetails> creditNoteRequestDetailss) {
        List<CreditNoteRequestDetailsDA> creditNoteRequestDetailsDAs = new ArrayList<>();
        creditNoteRequestDetailss.forEach(s -> creditNoteRequestDetailsDAs.add(new CreditNoteRequestDetailsDA(s)));
        return creditNoteRequestDetailsDAs;
    }

    public List<DBAccess> toDBAccessList(List<CreditNoteRequestDetails> creditNoteRequestDetailss) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        creditNoteRequestDetailss.forEach(s -> dbAccesses.add(new CreditNoteRequestDetailsDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(CreditNoteRequestDetails.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(CreditNoteRequestDetails.class, columnName, comparatorColumn, comparatorVaue);
    }

    public List<CreditNoteRequestDetails> getCreditNoteRequestDetailss(String columName, Object value) {
        return super.find(CreditNoteRequestDetails.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(CreditNoteRequestDetails.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                CreditNoteRequestDetailsDA creditNoteRequestDetailsDA = new CreditNoteRequestDetailsDA((CreditNoteRequestDetails) e[0]);
                creditNoteRequestDetailsDA.revisionEntity = (AppRevisionEntity) e[1];
                creditNoteRequestDetailsDA.oRevisionType = (RevisionType) e[2];
                creditNoteRequestDetailsDA.initRevProprties();
                creditNoteRequestDetailsDA.searchColumns.addAll(creditNoteRequestDetailsDA.getRevSearchColumns());
                dBAccesses.add(creditNoteRequestDetailsDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    public boolean validate() throws Exception {
        InvoiceDetails invoiceDetails = new InvoiceDetailsDA().getInvoiceDetails(invoiceDetail.getInvoiceDetailID());
        int quantityBalance = invoiceDetails.getQuantity();
        double amountBalance = invoiceDetails.getAmount();
        if (quantityBalance < getQuantity()) {
            throw new Exception("The Invoice quantity " + quantityBalance + " can't be less than " + getQuantity());
        }
        if (amountBalance < getAmount()) {
            throw new Exception("The Invoice Amount " + amountBalance + " can't be less than " + getAmountDisplay());
        }
        this.invoiceDetail.setQuantity(quantityBalance - getBaseQuantity());
        this.invoiceDetail.setAmount(amountBalance - getAmount());
        return true;
    }

}
