/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.dbaccess;

import com.saburi.common.dbaccess.DBAccess;
import com.saburi.finance.entities.RefundReceiptInvoice;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import com.saburi.finance.entities.CreditNote;
import com.saburi.finance.entities.Receipt;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.finance.entities.Refund;
import com.saburi.finance.entities.ReceiptInvoice;
import static com.saburi.common.utils.Utilities.formatNumber;
import java.util.Objects;

public class RefundReceiptInvoiceDA extends DBAccess {

    private RefundReceiptInvoice refundReceiptInvoice = new RefundReceiptInvoice();
    private final SimpleIntegerProperty refundReceiptInvoiceID = new SimpleIntegerProperty(this, "refundReceiptInvoiceID");
    private final SimpleStringProperty refundDisplay = new SimpleStringProperty(this, "refundDisplay");
    private final SimpleObjectProperty refundID = new SimpleObjectProperty(this, "refundID");
    private Refund refund;
    private final SimpleStringProperty receiptInvoiceDisplay = new SimpleStringProperty(this, "receiptInvoiceDisplay");
    private final SimpleObjectProperty receiptInvoiceID = new SimpleObjectProperty(this, "receiptInvoiceID");
    private ReceiptInvoice receiptInvoice;
    private final SimpleDoubleProperty amount = new SimpleDoubleProperty(this, "amount");
    private final SimpleStringProperty amountDisplay = new SimpleStringProperty(this, "amountDisplay");
    private final SimpleStringProperty receiptDisplay = new SimpleStringProperty(this, "receiptDisplay");
    private final SimpleObjectProperty receiptID = new SimpleObjectProperty(this, "receiptID");
    private Receipt receipt;
    private final SimpleDoubleProperty amountPaid = new SimpleDoubleProperty(this, "amountPaid");
    private final SimpleStringProperty amountPaidDisplay = new SimpleStringProperty(this, "amountPaidDisplay");

    public RefundReceiptInvoiceDA() {
        createSearchColumns();
    }

    public RefundReceiptInvoiceDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public RefundReceiptInvoiceDA(RefundReceiptInvoice refundReceiptInvoice) {
        this.refundReceiptInvoice = refundReceiptInvoice;
        initialseProprties();
        createSearchColumns();
    }

    public RefundReceiptInvoiceDA(String persistenceUnit, RefundReceiptInvoice refundReceiptInvoice) {
        super(persistenceUnit);
        this.refundReceiptInvoice = refundReceiptInvoice;
        initialseProprties();
        createSearchColumns();
    }

    public RefundReceiptInvoiceDA(Refund refund, ReceiptInvoice receiptInvoice, double amount) {
        this.refundReceiptInvoice = new RefundReceiptInvoice(refund, receiptInvoice, amount);
        initialseProprties();
        createSearchColumns();
    }

    public RefundReceiptInvoiceDA(String persistenceUnit, Refund refund, ReceiptInvoice receiptInvoice, double amount) {
        super(persistenceUnit);
        this.refundReceiptInvoice = new RefundReceiptInvoice(refund, receiptInvoice, amount);
        initialseProprties();
        createSearchColumns();
    }

    public int getRefundReceiptInvoiceID() {
        return refundReceiptInvoiceID.get();
    }

    public void setRefundReceiptInvoiceID(int refundReceiptInvoiceID) {
        refundReceiptInvoice.setRefundReceiptInvoiceID(refundReceiptInvoiceID);
        this.refundReceiptInvoiceID.set(refundReceiptInvoiceID);
    }

    public Refund getRefund() {
        return refund;
    }

    public Object getRefundID() {
        return refundID.get();
    }

    public String getRefundDisplay() {
        return refundDisplay.get();
    }

    public RefundDA getRefundDA() {
        return this.refund != null ? new RefundDA(this.refund) : null;
    }

    public void setRefund(Refund refund) {
        refundReceiptInvoice.setRefund(refund);
        this.refund = refund;
        this.refundID.set(refund.getId());
        this.refundDisplay.set(refund.getDisplayKey());
    }

    public ReceiptInvoice getReceiptInvoice() {
        return receiptInvoice;
    }

    public Object getReceiptInvoiceID() {
        return receiptInvoiceID.get();
    }

    public String getReceiptInvoiceDisplay() {
        return receiptInvoiceDisplay.get();
    }

    public ReceiptInvoiceDA getReceiptInvoiceDA() {
        return this.receiptInvoice != null ? new ReceiptInvoiceDA(this.receiptInvoice) : null;
    }

    public void setReceiptInvoice(ReceiptInvoice receiptInvoice) {
        refundReceiptInvoice.setReceiptInvoice(receiptInvoice);
        this.receiptInvoice = receiptInvoice;
        this.receiptInvoiceID.set(receiptInvoice.getId());
        this.receiptInvoiceDisplay.set(receiptInvoice.getDisplayKey());
    }

    public double getAmount() {
        return amount.get();
    }

    public String getAmountDisplay() {
        return amountDisplay.get();
    }

    public void setAmount(double amount) {
        refundReceiptInvoice.setAmount(amount);
        this.amount.set(amount);
        this.amountDisplay.set(formatNumber(amount));
    }

    public Receipt getReceipt() {
        return receipt;
    }

    public Object getReceiptID() {
        return receiptID.get();
    }

    public String getReceiptDisplay() {
        return receiptDisplay.get();
    }

    public ReceiptDA getReceiptDA() {
        return this.receipt != null ? new ReceiptDA(this.receipt) : null;
    }

    public double getAmountPaid() {
        return amountPaid.get();
    }

    public String getAmountPaidDisplay() {
        return amountPaidDisplay.get();
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 79 * hash + Objects.hashCode(this.refund);
        hash = 79 * hash + Objects.hashCode(this.receiptInvoice);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final RefundReceiptInvoiceDA other = (RefundReceiptInvoiceDA) obj;
        if (!Objects.equals(this.refund, other.refund)) {
            return false;
        }
        if (!Objects.equals(this.receiptInvoice, other.receiptInvoice)) {
            return false;
        }
        return true;
    }

    private void initialseProprties() {
        this.dBEntity = refundReceiptInvoice;
        this.refundReceiptInvoiceID.set(refundReceiptInvoice.getRefundReceiptInvoiceID());
        this.refund = refundReceiptInvoice.getRefund();
        if (this.refund != null) {
            this.refundID.set(refund.getId());
            this.refundDisplay.set(refund.getDisplayKey());
        }
        this.receiptInvoice = refundReceiptInvoice.getReceiptInvoice();
        if (this.receiptInvoice != null) {
            this.receiptInvoiceID.set(receiptInvoice.getId());
            this.receiptInvoiceDisplay.set(receiptInvoice.getDisplayKey());
            this.receipt = receiptInvoice.getReceipt();
            if (this.receipt != null) {
                this.receiptID.set(receipt.getId());
                this.receiptDisplay.set(receipt.getDisplayKey());
                this.amountPaid.set(receiptInvoice.getAmount() - receiptInvoice.getAmountRefunded());
                this.amountPaidDisplay.set(formatNumber(amountPaid.get()));
            }
        }
        this.amount.set(refundReceiptInvoice.getAmount());
        this.amountDisplay.set(formatNumber(refundReceiptInvoice.getAmount()));
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("refundReceiptInvoiceID", "RefundReceiptInvoiceID", this.refundReceiptInvoiceID.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("refundID", "Refund ID", this.refundID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("refundDisplay", "Refund", this.refundDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("receiptInvoiceID", "Receipt Invoice ID", this.receiptInvoiceID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("receiptInvoiceDisplay", "Receipt Invoice", this.receiptInvoiceDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("amount", "Amount", this.amount.get(),this.amountDisplay.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("receiptID", "Receipt ID", this.receiptID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("receiptID", "Receipt ID", this.receiptID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("receiptDisplay", "Receipt", this.receiptDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("amountPaid", "Amount Paid", this.amountPaid.get(), this.amountPaidDisplay.get(), SearchDataTypes.NUMBER));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.refundReceiptInvoice.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.refundReceiptInvoice.getDisplayKey();
    }

    public static List<RefundReceiptInvoiceDA> getRefundReceiptInvoiceDAs(List<RefundReceiptInvoice> refundReceiptInvoices) {
        List<RefundReceiptInvoiceDA> list = new ArrayList<>();
        refundReceiptInvoices.forEach((refundReceiptInvoice) -> {
            list.add(new RefundReceiptInvoiceDA(refundReceiptInvoice));
        });
        return list;
    }

    public static List<RefundReceiptInvoice> getRefundReceiptInvoiceList(List<RefundReceiptInvoiceDA> refundReceiptInvoiceDAs) {
        List<RefundReceiptInvoice> refundReceiptInvoices = new ArrayList<>();
        refundReceiptInvoiceDAs.forEach(a -> refundReceiptInvoices.add(a.refundReceiptInvoice));
        return refundReceiptInvoices;
    }

    public boolean save() throws Exception {
        return super.persist(this.refundReceiptInvoice);

    }

    public boolean update() throws Exception {
        return super.merge(this.refundReceiptInvoice);

    }

    public boolean delete() {
        return super.remove(this.refundReceiptInvoice);

    }

    public RefundReceiptInvoice getRefundReceiptInvoice(int refundReceiptInvoiceID) {
        return (RefundReceiptInvoice) super.find(RefundReceiptInvoice.class, refundReceiptInvoiceID);
    }

    public RefundReceiptInvoice getRefundReceiptInvoice() {
        return this.refundReceiptInvoice;
    }

    public List<RefundReceiptInvoice> getRefundReceiptInvoices() {
        return super.find(RefundReceiptInvoice.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(RefundReceiptInvoice.class).forEach(o -> list.add(new RefundReceiptInvoiceDA((RefundReceiptInvoice) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public RefundReceiptInvoiceDA get(int refundReceiptInvoiceID) throws Exception {
        RefundReceiptInvoice oRefundReceiptInvoice = getRefundReceiptInvoice(refundReceiptInvoiceID);
        if (oRefundReceiptInvoice == null) {
            throw new Exception("No Record with id: " + refundReceiptInvoiceID);
        }
        return new RefundReceiptInvoiceDA(oRefundReceiptInvoice);
    }

    public List<RefundReceiptInvoiceDA> get(String columName, Object value) {
        List<RefundReceiptInvoiceDA> list = new ArrayList<>();
        super.selectQuery(RefundReceiptInvoice.class, columName, value).forEach(da -> list.add(new RefundReceiptInvoiceDA((RefundReceiptInvoice) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<RefundReceiptInvoiceDA> toDaList(List<RefundReceiptInvoice> refundReceiptInvoices) {
        List<RefundReceiptInvoiceDA> refundReceiptInvoiceDAs = new ArrayList<>();
        refundReceiptInvoices.forEach(s -> refundReceiptInvoiceDAs.add(new RefundReceiptInvoiceDA(s)));
        return refundReceiptInvoiceDAs;
    }

    public List<DBAccess> toDBAccessList(List<RefundReceiptInvoice> refundReceiptInvoices) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        refundReceiptInvoices.forEach(s -> dbAccesses.add(new RefundReceiptInvoiceDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(RefundReceiptInvoice.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(RefundReceiptInvoice.class, columnName, comparatorColumn, comparatorVaue);
    }

    public List<RefundReceiptInvoice> getRefundReceiptInvoices(String columName, Object value) {
        return super.find(RefundReceiptInvoice.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(RefundReceiptInvoice.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                RefundReceiptInvoiceDA refundReceiptInvoiceDA = new RefundReceiptInvoiceDA((RefundReceiptInvoice) e[0]);
                refundReceiptInvoiceDA.revisionEntity = (AppRevisionEntity) e[1];
                refundReceiptInvoiceDA.oRevisionType = (RevisionType) e[2];
                refundReceiptInvoiceDA.initRevProprties();
                refundReceiptInvoiceDA.searchColumns.addAll(refundReceiptInvoiceDA.getRevSearchColumns());
                dBAccesses.add(refundReceiptInvoiceDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    public static List<RefundReceiptInvoiceDA> getToRefundReceiptDAs(CreditNote creditNote) {
        List<ReceiptInvoice> receiptInvoices = new ReceiptInvoiceDA().getReceiptInvoices(creditNote.getCreditNoteApproval().getCreditNoteRequest().getInvoice());
        List<RefundReceiptInvoiceDA> refundReceiptInvoiceDAs = new ArrayList<>();

        double toRefundAmount = creditNote.getToRefundAmount();
        for (ReceiptInvoice receiptInvoice : receiptInvoices) {
            double paidAmount = receiptInvoice.getAmount() - receiptInvoice.getAmountRefunded();
            double refundAmount;
            if (toRefundAmount == 0) {
                refundAmount = 0;
            } else {
                if (paidAmount >= toRefundAmount) {
                    refundAmount = toRefundAmount;
                    toRefundAmount = 0;
                } else {
                    refundAmount = toRefundAmount - paidAmount;
                    toRefundAmount = toRefundAmount - paidAmount;
                }
            }

            RefundReceiptInvoiceDA refundReceiptInvoiceDA = new RefundReceiptInvoiceDA(null, receiptInvoice, refundAmount);
            refundReceiptInvoiceDAs.add(refundReceiptInvoiceDA);
        }
        return refundReceiptInvoiceDAs;
    }

}
