/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.dbaccess;

import com.saburi.common.dbaccess.DBAccess;
import com.saburi.common.dbaccess.IDGeneratorDA;
import com.saburi.finance.entities.CustomerLedger;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import com.saburi.common.entities.Company;
import com.saburi.finance.entities.Customer;
import com.saburi.finance.entities.FinancialPeriod;
import com.saburi.finance.entities.JournalEntry;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import java.time.LocalDate;
import static com.saburi.common.utils.Utilities.formatDate;
import com.saburi.finance.entities.JournalEntryDetail;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.Root;
import com.saburi.finance.utils.FinanceEnums.DocumentTypes;
import static com.saburi.common.utils.Utilities.formatNumber;

public class CustomerLedgerDA extends DBAccess {

    private CustomerLedger customerLedger = new CustomerLedger();
    private final SimpleIntegerProperty ledgerID = new SimpleIntegerProperty(this, "ledgerID");
    private final SimpleStringProperty journalEntryDetailDisplay = new SimpleStringProperty(this, "journalEntryDetailDisplay");
    private final SimpleObjectProperty journalEntryDetailID = new SimpleObjectProperty(this, "journalEntryDetailID");
    private JournalEntryDetail journalEntryDetail;
    private final SimpleStringProperty customerID = new SimpleStringProperty(this, "customerID");
    private final SimpleStringProperty customerName = new SimpleStringProperty(this, "customerName");
    private final SimpleObjectProperty postingDate = new SimpleObjectProperty(this, "postingDate");
    private final SimpleStringProperty postingDateDisplay = new SimpleStringProperty(this, "postingDateDisplay");
    private final SimpleObjectProperty documentType = new SimpleObjectProperty(this, "documentType");
    private final SimpleStringProperty description = new SimpleStringProperty(this, "description");
    private final SimpleStringProperty documentNo = new SimpleStringProperty(this, "documentNo");
    private final SimpleStringProperty referenceNo = new SimpleStringProperty(this, "referenceNo");
    private final SimpleDoubleProperty amount = new SimpleDoubleProperty(this, "amount");
    private final SimpleStringProperty amountDisplay = new SimpleStringProperty(this, "amountDisplay");
    private final SimpleDoubleProperty debit = new SimpleDoubleProperty(this, "debit");
    private final SimpleStringProperty debitDisplay = new SimpleStringProperty(this, "debitDisplay");
    private final SimpleDoubleProperty credit = new SimpleDoubleProperty(this, "credit");
    private final SimpleStringProperty creditDisplay = new SimpleStringProperty(this, "creditDisplay");
    private final SimpleDoubleProperty balance = new SimpleDoubleProperty(this, "balance");
    private final SimpleStringProperty balanceDisplay = new SimpleStringProperty(this, "balanceDisplay");

    public CustomerLedgerDA() {
        createSearchColumns();
    }

    public CustomerLedgerDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public CustomerLedgerDA(CustomerLedger customerLedger) {
        this.customerLedger = customerLedger;
        initialseProprties();
        createSearchColumns();
    }

    public CustomerLedgerDA(String persistenceUnit, CustomerLedger customerLedger) {
        super(persistenceUnit);
        this.customerLedger = customerLedger;
        initialseProprties();
        createSearchColumns();
    }

    public CustomerLedgerDA(JournalEntryDetail journalEntryDetail, String customerID, String customerName, LocalDate postingDate, DocumentTypes documentType, String description, String documentNo, String referenceNo, double amount, double balance) {
        this.customerLedger = new CustomerLedger(journalEntryDetail, customerID, customerName, postingDate, documentType, description, documentNo, referenceNo, amount, balance);
        initialseProprties();
        createSearchColumns();
    }

    public CustomerLedgerDA(String persistenceUnit, JournalEntryDetail journalEntryDetail, String customerID, String customerName, LocalDate postingDate, DocumentTypes documentType, String description, String documentNo, String referenceNo, double amount, double balance) {
        super(persistenceUnit);
        this.customerLedger = new CustomerLedger(journalEntryDetail, customerID, customerName, postingDate, documentType, description, documentNo, referenceNo, amount, balance);
        initialseProprties();
        createSearchColumns();
    }

    public int getLedgerID() {
        return ledgerID.get();
    }

    public void setLedgerID(int ledgerID) {
        customerLedger.setLedgerID(ledgerID);
        this.ledgerID.set(ledgerID);
    }

    public JournalEntryDetail getJournalEntryDetail() {
        return journalEntryDetail;
    }

    public Object getJournalEntryDetailID() {
        return journalEntryDetailID.get();
    }

    public String getJournalEntryDetailDisplay() {
        return journalEntryDetailDisplay.get();
    }

    public JournalEntryDetailDA getJournalEntryDetailDA() {
        return this.journalEntryDetail != null ? new JournalEntryDetailDA(this.journalEntryDetail) : null;
    }

    public void setJournalEntryDetail(JournalEntryDetail journalEntryDetail) {
        customerLedger.setJournalEntryDetail(journalEntryDetail);
        this.journalEntryDetail = journalEntryDetail;
        this.journalEntryDetailID.set(journalEntryDetail.getId());
        this.journalEntryDetailDisplay.set(journalEntryDetail.getDisplayKey());
    }

    public String getCustomerID() {
        return customerID.get();
    }

    public void setCustomerID(String customerID) {
        customerLedger.setCustomerID(customerID);
        this.customerID.set(customerID);
    }

    public String getCustomerName() {
        return customerName.get();
    }

    public void setCustomerName(String customerName) {
        customerLedger.setCustomerName(customerName);
        this.customerName.set(customerName);
    }

    public Object getPostingDate() {
        return postingDate.get();
    }

    public String getPostingDateDisplay() {
        return postingDateDisplay.get();
    }

    public void setPostingDate(LocalDate postingDate) {
        customerLedger.setPostingDate(postingDate);
        this.postingDate.set(postingDate);
    }

    public Object getDocumentType() {
        return documentType.get();
    }

    public void setDocumentType(DocumentTypes documentType) {
        customerLedger.setDocumentType(documentType);
        this.documentType.set(documentType);
    }

    public String getDescription() {
        return description.get();
    }

    public void setDescription(String description) {
        customerLedger.setDescription(description);
        this.description.set(description);
    }

    public String getDocumentNo() {
        return documentNo.get();
    }

    public void setDocumentNo(String documentNo) {
        customerLedger.setDocumentNo(documentNo);
        this.documentNo.set(documentNo);
    }

    public String getReferenceNo() {
        return referenceNo.get();
    }

    public void setReferenceNo(String referenceNo) {
        customerLedger.setReferenceNo(referenceNo);
        this.referenceNo.set(referenceNo);
    }

    public double getAmount() {
        return amount.get();
    }

    public String getAmountDisplay() {
        return amountDisplay.get();
    }

    public void setAmount(double amount) {
        customerLedger.setAmount(amount);
        this.amount.set(amount);
        this.amountDisplay.set(formatNumber(amount));
    }

    public double getDebit() {
        return debit.get();
    }

    public String getDebitDisplay() {
        return debitDisplay.get();
    }

    public void setDebit(double debit) {
        customerLedger.setDebit(debit);
        this.debit.set(debit);
        this.debitDisplay.set(formatNumber(debit));
    }

    public double getCredit() {
        return credit.get();
    }

    public String getCreditDisplay() {
        return creditDisplay.get();
    }

    public void setCredit(double credit) {
        customerLedger.setCredit(credit);
        this.credit.set(credit);
        this.creditDisplay.set(formatNumber(credit));
    }

    public double getBalance() {
        return balance.get();
    }

    public String getBalanceDisplay() {
        return balanceDisplay.get();
    }

    public void setBalance(double balance) {
        customerLedger.setBalance(balance);
        this.balance.set(balance);
        this.balanceDisplay.set(formatNumber(balance));
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof CustomerLedgerDA)) {
            return false;
        }

        CustomerLedgerDA customerLedgerDA = (CustomerLedgerDA) o;

        if (customerLedgerDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(customerLedgerDA.getId());
    }

    @Override
    public int hashCode() {
        return customerLedger.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = customerLedger;
        this.ledgerID.set(customerLedger.getLedgerID());
        this.journalEntryDetail = customerLedger.getJournalEntryDetail();
        if (this.journalEntryDetail != null) {
            this.journalEntryDetailID.set(journalEntryDetail.getId());
            this.journalEntryDetailDisplay.set(journalEntryDetail.getDisplayKey());
        }
        this.customerID.set(customerLedger.getCustomerID());
        this.customerName.set(customerLedger.getCustomerName());
        this.postingDate.set(customerLedger.getPostingDate());
        this.postingDateDisplay.set(formatDate(customerLedger.getPostingDate()));
        this.documentType.set(customerLedger.getDocumentType());
        this.description.set(customerLedger.getDescription());
        this.documentNo.set(customerLedger.getDocumentNo());
        this.referenceNo.set(customerLedger.getReferenceNo());
        this.amount.set(customerLedger.getAmount());
        this.amountDisplay.set(formatNumber(customerLedger.getAmount()));
        this.debit.set(customerLedger.getDebit());
        this.debitDisplay.set(formatNumber(customerLedger.getDebit()));
        this.credit.set(customerLedger.getCredit());
        this.creditDisplay.set(formatNumber(customerLedger.getCredit()));
        this.balance.set(customerLedger.getBalance());
        this.balanceDisplay.set(formatNumber(customerLedger.getBalance()));
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("journalEntryDetailID", "Journal Entry Detail ID", this.journalEntryDetailID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("journalEntryDetailDisplay", "Journal Entry Detail", this.journalEntryDetailDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("customerID", "Customer ID", this.customerID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("customerName", "Customer Name", this.customerName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("postingDate", "Posting Date", this.postingDate.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("documentType", "Document Type", this.documentType.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("description", "Description", this.description.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("documentNo", "Document No", this.documentNo.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("referenceNo", "Reference No", this.referenceNo.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("amountDisplay", "Amount", this.amountDisplay.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("debitDisplay", "Debit", this.debitDisplay.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("creditDisplay", "Credit", this.creditDisplay.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("balanceDisplay", "Balance", this.balanceDisplay.get(), SearchDataTypes.NUMBER));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.customerLedger.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.customerLedger.getDisplayKey();
    }

    public static List<CustomerLedgerDA> getCustomerLedgerDAs(List<CustomerLedger> customerLedgers) {
        List<CustomerLedgerDA> list = new ArrayList<>();
        customerLedgers.forEach((customerLedger) -> {
            list.add(new CustomerLedgerDA(customerLedger));
        });
        return list;
    }

    public static List<CustomerLedger> getCustomerLedgerList(List<CustomerLedgerDA> customerLedgerDAs) {
        List<CustomerLedger> customerLedgers = new ArrayList<>();
        customerLedgerDAs.forEach(a -> customerLedgers.add(a.customerLedger));
        return customerLedgers;
    }

    public boolean save() throws Exception {
        return super.persist(this.customerLedger);

    }

    public boolean update() throws Exception {
        return super.merge(this.customerLedger);

    }

    public boolean delete() {
        return super.remove(this.customerLedger);

    }

    public CustomerLedger getCustomerLedger(String ledgerID) {
        return (CustomerLedger) super.find(CustomerLedger.class, ledgerID);
    }

    public CustomerLedger getCustomerLedger() {
        return this.customerLedger;
    }

    public List<CustomerLedger> getCustomerLedgers() {
        return super.find(CustomerLedger.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(CustomerLedger.class).forEach(o -> list.add(new CustomerLedgerDA((CustomerLedger) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public CustomerLedgerDA get(String ledgerID) throws Exception {
        CustomerLedger oCustomerLedger = getCustomerLedger(ledgerID);
        if (oCustomerLedger == null) {
            throw new Exception("No Record with id: " + ledgerID);
        }
        return new CustomerLedgerDA(oCustomerLedger);
    }

    public List<CustomerLedgerDA> get(String columName, Object value) {
        List<CustomerLedgerDA> list = new ArrayList<>();
        super.selectQuery(CustomerLedger.class, columName, value).forEach(da -> list.add(new CustomerLedgerDA((CustomerLedger) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<CustomerLedgerDA> toDaList(List<CustomerLedger> customerLedgers) {
        List<CustomerLedgerDA> customerLedgerDAs = new ArrayList<>();
        customerLedgers.forEach(s -> customerLedgerDAs.add(new CustomerLedgerDA(s)));
        return customerLedgerDAs;
    }

    public List<DBAccess> toDBAccessList(List<CustomerLedger> customerLedgers) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        customerLedgers.forEach(s -> dbAccesses.add(new CustomerLedgerDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(CustomerLedger.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(CustomerLedger.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextLedgerID() {
        return this.getMax("ledgerID") + 1;
    }

    public String getNextLedgerID(int ledgerID) {
        return new IDGeneratorDA().getToAppendString(CustomerLedger.class.getSimpleName(), ledgerID);
    }

    public List<CustomerLedger> getCustomerLedgers(String columName, Object value) {
        return super.find(CustomerLedger.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(CustomerLedger.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                CustomerLedgerDA customerLedgerDA = new CustomerLedgerDA((CustomerLedger) e[0]);
                customerLedgerDA.revisionEntity = (AppRevisionEntity) e[1];
                customerLedgerDA.oRevisionType = (RevisionType) e[2];
                customerLedgerDA.initRevProprties();
                customerLedgerDA.searchColumns.addAll(customerLedgerDA.getRevSearchColumns());
                dBAccesses.add(customerLedgerDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    public double getAccountBalance(Customer customer, Company company) {

        try {
            entityManager = entityManagerFactory.createEntityManager();
            CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
            CriteriaQuery<Double> criteriaQuery = criteriaBuilder.createQuery(Double.class);
            Root<CustomerLedger> root = criteriaQuery.from(CustomerLedger.class);
            Join<CustomerLedger, JournalEntryDetail> joinJED = root.join("journalEntryDetail");
            Join<JournalEntryDetail, JournalEntry> joinJE = joinJED.join("journalEntry");
            Join<JournalEntry, FinancialPeriod> joinJEFP = joinJE.join("financialPeriod");
            criteriaQuery.select(criteriaBuilder.sum(criteriaBuilder.diff(root.get("debit"), root.get("credit"))));
            criteriaQuery.where(criteriaBuilder.equal(root.get("customerID"), customer.getCustomerID()),
                    criteriaBuilder.equal(joinJEFP.get("company"), company));
            Double result = entityManager.createQuery(criteriaQuery).getSingleResult();
            return result == null ? 0 : result;
        } catch (Exception e) {
            throw e;
        } finally {
            entityManager.close();
        }

    }

    public double getAccountBalance(Customer customer) {

        try {
            entityManager = entityManagerFactory.createEntityManager();
            CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
            CriteriaQuery<Double> criteriaQuery = criteriaBuilder.createQuery(Double.class);
            Root<CustomerLedger> root = criteriaQuery.from(CustomerLedger.class);
            criteriaQuery.select(criteriaBuilder.sum(criteriaBuilder.diff(root.get("debit"), root.get("credit"))));
            criteriaQuery.where(criteriaBuilder.equal(root.get("customerID"), customer.getCustomerID()));
            Double result = entityManager.createQuery(criteriaQuery).getSingleResult();
            return result == null ? 0 : result;
        } catch (Exception e) {
            throw e;
        } finally {
            entityManager.close();
        }

    }

}
