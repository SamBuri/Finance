/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.dbaccess;

import com.saburi.common.dbaccess.DBAccess;
import com.saburi.common.dbaccess.IDGeneratorDA;
import com.saburi.finance.entities.ChartAccount;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.finance.utils.FinanceEnums.AccountTypes;
import com.saburi.finance.entities.AccountCategory;
import com.saburi.finance.utils.FinanceEnums.AccountActions;
import com.saburi.finance.utils.FinanceEnums.AccountReports;
import static com.saburi.common.utils.Utilities.formatNumber;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.Root;

public class ChartAccountDA extends DBAccess {

    private ChartAccount chartAccount = new ChartAccount();
    private final SimpleIntegerProperty idHelper = new SimpleIntegerProperty(this, "idHelper");
    private AccountCategory parentCategory;
    private final SimpleStringProperty parentCategoryDisplay = new SimpleStringProperty(this, "parentCategoryDisplay");
    private final SimpleObjectProperty parentCategoryID = new SimpleObjectProperty(this, "parentCategoryID");
    private final SimpleObjectProperty accountType = new SimpleObjectProperty(this, "accountType");
    private final SimpleStringProperty accountCategoryDisplay = new SimpleStringProperty(this, "accountCategoryDisplay");
    private final SimpleObjectProperty accountCategoryID = new SimpleObjectProperty(this, "accountCategoryID");
    private AccountCategory accountCategory;
    private final SimpleStringProperty accountID = new SimpleStringProperty(this, "accountID");
    private final SimpleStringProperty accountName = new SimpleStringProperty(this, "accountName");
    private final SimpleObjectProperty accountAction = new SimpleObjectProperty(this, "accountAction");
    private final SimpleObjectProperty accountReport = new SimpleObjectProperty(this, "accountReport");
    private final SimpleBooleanProperty contra = new SimpleBooleanProperty(this, "contra");
    private final SimpleBooleanProperty controlAccount = new SimpleBooleanProperty(this, "controlAccount");
    private final SimpleDoubleProperty openingBalance = new SimpleDoubleProperty(this, "openingBalance");
    private final SimpleStringProperty openingBalanceDisplay = new SimpleStringProperty(this, "openingBalanceDisplay");
    private final SimpleDoubleProperty closingBalance = new SimpleDoubleProperty(this, "closingBalance");
    private final SimpleStringProperty closingBalanceDisplay = new SimpleStringProperty(this, "closingBalanceDisplay");
    private final SimpleBooleanProperty readOnly = new SimpleBooleanProperty(this, "readOnly");
    private final SimpleBooleanProperty hidden = new SimpleBooleanProperty(this, "hidden");

    public ChartAccountDA() {
        createSearchColumns();
    }

    public ChartAccountDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public ChartAccountDA(ChartAccount chartAccount) {
        this.chartAccount = chartAccount;
        initialseProprties();
        createSearchColumns();
    }

    public ChartAccountDA(String persistenceUnit, ChartAccount chartAccount) {
        super(persistenceUnit);
        this.chartAccount = chartAccount;
        initialseProprties();
        createSearchColumns();
    }

    public ChartAccountDA(AccountCategory accountCategory, String accountID, String accountName, AccountActions accountAction, AccountReports accountReport, boolean contra, boolean controlAccount, double openingBalance, double closingBalance, boolean readOnly, boolean hidden) {
        this.chartAccount = new ChartAccount(getNextIdHelper(accountCategory), accountCategory, accountID, accountName, accountAction, accountReport, contra, controlAccount, openingBalance, closingBalance, readOnly, hidden);
        initialseProprties();
        createSearchColumns();
    }

    public ChartAccountDA(AccountCategory accountCategory, String accountID, String accountName, AccountActions accountAction, AccountReports accountReport, boolean contra, boolean controlAccount, boolean readOnly, boolean hidden) {
        this.chartAccount = new ChartAccount(getNextIdHelper(accountCategory), accountCategory, accountID, accountName, accountAction, accountReport, contra, controlAccount, readOnly, hidden);
        initialseProprties();
        createSearchColumns();
    }

    public ChartAccountDA(String persistenceUnit, AccountCategory accountCategory, String accountID, String accountName, AccountActions accountAction, AccountReports accountReport, boolean contra, boolean controlAccount, double openingBalance, double closingBalance, boolean readOnly, boolean hidden) {
        super(persistenceUnit);
        this.chartAccount = new ChartAccount(getNextIdHelper(accountCategory), accountCategory, accountID, accountName, accountAction, accountReport, contra, controlAccount, openingBalance, closingBalance, readOnly, hidden);
        initialseProprties();
        createSearchColumns();
    }

    public int getIdHelper() {
        return idHelper.get();
    }

    public void setIdHelper(int idHelper) {
        chartAccount.setIdHelper(idHelper);
        this.idHelper.set(idHelper);
    }

    public Object getAccountType() {
        return accountType.get();
    }

    public AccountCategory getAccountCategory() {
        return accountCategory;
    }

    public Object getAccountCategoryID() {
        return accountCategoryID.get();
    }

    public String getAccountCategoryDisplay() {
        return accountCategoryDisplay.get();
    }

    public AccountCategoryDA getAccountCategoryDA() {
        return this.accountCategory != null ? new AccountCategoryDA(this.accountCategory) : null;
    }

    public void setAccountCategory(AccountCategory accountCategory) {
        chartAccount.setAccountCategory(accountCategory);
        this.accountCategory = accountCategory;
        this.accountCategoryID.set(accountCategory.getId());
        this.accountCategoryDisplay.set(accountCategory.getDisplayKey());
    }

    public String getAccountID() {
        return accountID.get();
    }

    public void setAccountID(String accountID) {
        chartAccount.setAccountID(accountID);
        this.accountID.set(accountID);
    }

    public String getAccountName() {
        return accountName.get();
    }

    public void setAccountName(String accountName) {
        chartAccount.setAccountName(accountName);
        this.accountName.set(accountName);
    }

    public Object getAccountAction() {
        return accountAction.get();
    }

    public void setAccountAction(AccountActions accountAction) {
        chartAccount.setAccountAction(accountAction);
        this.accountAction.set(accountAction);
    }

    public Object getAccountReport() {
        return accountReport.get();
    }

    public void setAccountReport(AccountReports accountReport) {
        chartAccount.setAccountReport(accountReport);
        this.accountReport.set(accountReport);
    }

    public boolean isContra() {
        return contra.get();
    }

    public void setContra(boolean contra) {
        chartAccount.setContra(contra);
        this.contra.set(contra);
    }

    public boolean isControlAccount() {
        return controlAccount.get();
    }

    public void setControlAccount(boolean controlAccount) {
        chartAccount.setControlAccount(controlAccount);
        this.controlAccount.set(controlAccount);
    }

    public double getOpeningBalance() {
        return openingBalance.get();
    }

    public String getOpeningBalanceDisplay() {
        return openingBalanceDisplay.get();
    }

    public void setOpeningBalance(double openingBalance) {
        chartAccount.setOpeningBalance(openingBalance);
        this.openingBalance.set(openingBalance);
        this.openingBalanceDisplay.set(formatNumber(openingBalance));
    }

    public double getClosingBalance() {
        return closingBalance.get();
    }

    public String getClosingBalanceDisplay() {
        return closingBalanceDisplay.get();
    }

    public void setClosingBalance(double closingBalance) {
        chartAccount.setClosingBalance(closingBalance);
        this.closingBalance.set(closingBalance);
        this.closingBalanceDisplay.set(formatNumber(closingBalance));
    }

    public boolean isReadOnly() {
        return readOnly.get();
    }

    public void setReadOnly(boolean readOnly) {
        chartAccount.setReadOnly(readOnly);
        this.readOnly.set(readOnly);
    }

    public boolean isHidden() {
        return hidden.get();
    }

    public void setHidden(boolean hidden) {
        chartAccount.setHidden(hidden);
        this.hidden.set(hidden);
    }

    public AccountCategory getParentCategory() {
        return parentCategory;
    }

    public Object getParentCategoryID() {
        return parentCategoryID.get();
    }

    public String getParentCategoryDisplay() {
        return parentCategoryDisplay.get();
    }

    public AccountCategoryDA getParentCategoryDA() {
        return this.parentCategory != null ? new AccountCategoryDA(this.parentCategory) : null;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof ChartAccountDA)) {
            return false;
        }

        ChartAccountDA chartAccountDA = (ChartAccountDA) o;

        if (chartAccountDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(chartAccountDA.getId());
    }

    @Override
    public int hashCode() {
        return chartAccount.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = chartAccount;
        this.idHelper.set(chartAccount.getIdHelper());

        this.accountCategory = chartAccount.getAccountCategory();
        if (this.accountCategory != null) {
            this.accountType.set(accountCategory.getAccountType());
            this.accountCategoryID.set(accountCategory.getId());
            this.accountCategoryDisplay.set(accountCategory.getDisplayKey());
            this.parentCategory = accountCategory.getParentCategory();
            if (this.parentCategory != null) {
                this.parentCategoryID.set(parentCategory.getId());
                this.parentCategoryDisplay.set(parentCategory.getDisplayKey());
            }
        }
        this.accountID.set(chartAccount.getAccountID());
        this.accountName.set(chartAccount.getAccountName());
        this.accountAction.set(chartAccount.getAccountAction());
        this.accountReport.set(chartAccount.getAccountReport());
        this.contra.set(chartAccount.isContra());
        this.controlAccount.set(chartAccount.isControlAccount());
        this.openingBalance.set(chartAccount.getOpeningBalance());
        this.openingBalanceDisplay.set(formatNumber(chartAccount.getOpeningBalance()));
        this.closingBalance.set(chartAccount.getClosingBalance());
        this.closingBalanceDisplay.set(formatNumber(chartAccount.getClosingBalance()));
        this.readOnly.set(chartAccount.isReadOnly());
        this.hidden.set(chartAccount.isHidden());
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("accountType", "Account Type", this.accountType.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("parentCategoryID", "Parent Category ID", this.parentCategoryID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("parentCategoryDisplay", "Parent Category", this.parentCategoryDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("accountCategoryID", "Account Category ID", this.accountCategoryID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("accountCategoryDisplay", "Account Category", this.accountCategoryDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("accountID", "Account ID", this.accountID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("accountName", "Account Name", this.accountName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("accountAction", "Account Action", this.accountAction.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("accountReport", "Account Report", this.accountReport.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("contra", "Contra", this.contra.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.add(new SearchColumn("controlAccount", "Control Account", this.controlAccount.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.add(new SearchColumn("openingBalance", "Opening Balance", this.openingBalance.get(),openingBalanceDisplay.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("closingBalance", "Closing Balance", this.closingBalance.get(), closingBalanceDisplay.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("readOnly", "Read Only", this.readOnly.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.add(new SearchColumn("hidden", "Hidden", this.hidden.get(), SearchDataTypes.BOOLEAN));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.chartAccount.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.chartAccount.getDisplayKey();
    }

    public static List<ChartAccountDA> getChartAccountDAs(List<ChartAccount> chartAccounts) {
        List<ChartAccountDA> list = new ArrayList<>();
        chartAccounts.forEach((chartAccount) -> {
            list.add(new ChartAccountDA(chartAccount));
        });
        return list;
    }

    public static List<ChartAccount> getChartAccountList(List<ChartAccountDA> chartAccountDAs) {
        List<ChartAccount> chartAccounts = new ArrayList<>();
        chartAccountDAs.forEach(a -> chartAccounts.add(a.chartAccount));
        return chartAccounts;
    }

    public boolean save() throws Exception {
        return super.persist(this.chartAccount);

    }

    public boolean update() throws Exception {
        return super.merge(this.chartAccount);

    }

    public boolean delete() {
        return super.remove(this.chartAccount);

    }

    public ChartAccount getChartAccount(String accountID) {
        return (ChartAccount) super.find(ChartAccount.class, accountID);
    }

    public ChartAccount getChartAccount() {
        return this.chartAccount;
    }

    public List<ChartAccount> getChartAccounts() {
        return super.find(ChartAccount.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(ChartAccount.class).forEach(o -> list.add(new ChartAccountDA((ChartAccount) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public ChartAccountDA get(String accountID) throws Exception {
        ChartAccount oChartAccount = getChartAccount(accountID);
        if (oChartAccount == null) {
            throw new Exception("No Record with id: " + accountID);
        }
        return new ChartAccountDA(oChartAccount);
    }

    public List<ChartAccountDA> get(String columName, Object value) {
        List<ChartAccountDA> list = new ArrayList<>();
        super.selectQuery(ChartAccount.class, columName, value).forEach(da -> list.add(new ChartAccountDA((ChartAccount) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<ChartAccountDA> toDaList(List<ChartAccount> chartAccounts) {
        List<ChartAccountDA> chartAccountDAs = new ArrayList<>();
        chartAccounts.forEach(s -> chartAccountDAs.add(new ChartAccountDA(s)));
        return chartAccountDAs;
    }

    public List<DBAccess> toDBAccessList(List<ChartAccount> chartAccounts) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        chartAccounts.forEach(s -> dbAccesses.add(new ChartAccountDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(ChartAccount.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(ChartAccount.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIdHelper(AccountCategory accountCategory) {
        return this.getMax("idHelper", "accountCategory", accountCategory) + 1;
    }

    public String getNextAccountID(int idHelper, String accountCategory) {
        return new IDGeneratorDA().getToAppendString(ChartAccount.class.getSimpleName(), accountCategory, idHelper);
    }

    public List<ChartAccount> getChartAccounts(String columName, Object value) {
        return super.find(ChartAccount.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(ChartAccount.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                ChartAccountDA chartAccountDA = new ChartAccountDA((ChartAccount) e[0]);
                chartAccountDA.revisionEntity = (AppRevisionEntity) e[1];
                chartAccountDA.oRevisionType = (RevisionType) e[2];
                chartAccountDA.initRevProprties();
                chartAccountDA.searchColumns.addAll(chartAccountDA.getRevSearchColumns());
                dBAccesses.add(chartAccountDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    public List<ChartAccount> getChartAccounts(AccountTypes accountType) {

        try {
            entityManager = entityManagerFactory.createEntityManager();
            CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
            CriteriaQuery<ChartAccount> criteriaQuery = criteriaBuilder.createQuery(ChartAccount.class);
            Root<ChartAccount> root = criteriaQuery.from(ChartAccount.class);
            Join<ChartAccount, AccountCategory> join = root.join("accountCategory");
            criteriaQuery.where(criteriaBuilder.equal(join.get("accountType"), accountType));
            criteriaQuery.orderBy(criteriaBuilder.desc(root.get("accountName")));

            return entityManager.createQuery(criteriaQuery).getResultList();
        } catch (Exception e) {
            throw e;
        } finally {
            entityManager.close();
        }

    }

    public List<ChartAccount> getChartAccounts(AccountTypes accountType, boolean contra) {

        try {
            entityManager = entityManagerFactory.createEntityManager();
            CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
            CriteriaQuery<ChartAccount> criteriaQuery = criteriaBuilder.createQuery(ChartAccount.class);
            Root<ChartAccount> root = criteriaQuery.from(ChartAccount.class);
            Join<ChartAccount, AccountCategory> join = root.join("accountCategory");
            criteriaQuery.where(criteriaBuilder.and(criteriaBuilder.equal(join.get("accountType"), accountType),
                    criteriaBuilder.equal(root.get("contra"), contra)));
            criteriaQuery.orderBy(criteriaBuilder.desc(root.get("accountName")));

            return entityManager.createQuery(criteriaQuery).getResultList();
        } catch (Exception e) {
            throw e;
        } finally {
            entityManager.close();
        }

    }

    public List<ChartAccountDA> getChartAccountDAs(AccountTypes accountType) {
        return getChartAccountDAs(getChartAccounts(accountType));
    }
    
    public List<ChartAccountDA> getChartAccountDAs(AccountTypes accountType, boolean contra) {
        return getChartAccountDAs(getChartAccounts(accountType, contra));
    }

}
