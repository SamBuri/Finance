/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.dbaccess;

import com.saburi.common.dbaccess.DBAccess;
import com.saburi.common.dbaccess.LookupDataDA;
import com.saburi.finance.entities.JournalEntryDetail;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import com.saburi.finance.entities.BankAccount;
import com.saburi.finance.entities.BankLedger;
import com.saburi.finance.entities.ChartAccount;
import com.saburi.finance.entities.Customer;
import com.saburi.finance.entities.CustomerLedger;
import com.saburi.common.entities.DBEntity;
import com.saburi.finance.entities.GeneralLedger;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.finance.utils.FinanceEnums.AccountGroups;
import com.saburi.finance.entities.JournalEntry;
import com.saburi.common.entities.LookupData;
import com.saburi.finance.entities.Vendor;
import com.saburi.finance.entities.VendorLedger;
import java.time.LocalDate;
import com.saburi.finance.utils.FinanceEnums.AccountTypes;
import com.saburi.finance.utils.FinanceEnums.AccountActions;
import com.saburi.finance.utils.FinanceEnums.DocumentTypes;
import static com.saburi.common.utils.Utilities.formatNumber;

public class JournalEntryDetailDA extends DBAccess {

    private JournalEntryDetail journalEntryDetail = new JournalEntryDetail();
    private final SimpleStringProperty journalEntryDetailID = new SimpleStringProperty(this, "journalEntryDetailID");
    private final SimpleObjectProperty accountGroup = new SimpleObjectProperty(this, "accountGroup");
    private final SimpleStringProperty journalEntryDisplay = new SimpleStringProperty(this, "journalEntryDisplay");
    private final SimpleObjectProperty journalEntryID = new SimpleObjectProperty(this, "journalEntryID");
    private JournalEntry journalEntry;
    private final SimpleStringProperty accountID = new SimpleStringProperty(this, "accountID");
    private final SimpleStringProperty accountName = new SimpleStringProperty(this, "accountName");
    private final SimpleObjectProperty accountType = new SimpleObjectProperty(this, "accountType");
    private final SimpleObjectProperty accountAction = new SimpleObjectProperty(this, "accountAction");
    private final SimpleIntegerProperty quantity = new SimpleIntegerProperty(this, "quantity");
    private final SimpleDoubleProperty unitPrice = new SimpleDoubleProperty(this, "unitPrice");
    private final SimpleStringProperty unitPriceDisplay = new SimpleStringProperty(this, "unitPriceDisplay");
    private final SimpleDoubleProperty amount = new SimpleDoubleProperty(this, "amount");
    private final SimpleStringProperty amountDisplay = new SimpleStringProperty(this, "amountDisplay");
    private final SimpleStringProperty notes = new SimpleStringProperty(this, "notes");
    private final SimpleStringProperty locationDisplay = new SimpleStringProperty(this, "locationDisplay");
    private final SimpleObjectProperty locationID = new SimpleObjectProperty(this, "locationID");
    private LookupData location;

    public JournalEntryDetailDA() {
        createSearchColumns();
    }

    public JournalEntryDetailDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public JournalEntryDetailDA(JournalEntryDetail journalEntryDetail) {
        this.journalEntryDetail = journalEntryDetail;
        initialseProprties();
        createSearchColumns();
    }

    public JournalEntryDetailDA(String persistenceUnit, JournalEntryDetail journalEntryDetail) {
        super(persistenceUnit);
        this.journalEntryDetail = journalEntryDetail;
        initialseProprties();
        createSearchColumns();
    }

    public JournalEntryDetailDA(AccountGroups accountGroup, JournalEntry journalEntry, String accountID, String accountName, AccountTypes accountType, AccountActions accountAction, int quantity, double unitPrice, double amount, String notes, LookupData location) {
        this.journalEntryDetail = new JournalEntryDetail(accountGroup, journalEntry, accountID, accountName, accountType, accountAction, quantity, unitPrice, amount, notes, location);
        initialseProprties();
        createSearchColumns();
    }

    public JournalEntryDetailDA(String persistenceUnit, AccountGroups accountGroup, JournalEntry journalEntry, String accountID, String accountName, AccountTypes accountType, AccountActions accountAction, int quantity, double unitPrice, double amount, String notes, LookupData location) {
        super(persistenceUnit);
        this.journalEntryDetail = new JournalEntryDetail(accountGroup, journalEntry, accountID, accountName, accountType, accountAction, quantity, unitPrice, amount, notes, location);
        initialseProprties();
        createSearchColumns();
    }

    public String getJournalEntryDetailID() {
        return journalEntryDetailID.get();
    }

    public Object getAccountGroup() {
        return accountGroup.get();
    }

    public void setAccountGroup(AccountGroups accountGroup) {
        journalEntryDetail.setAccountGroup(accountGroup);
        this.accountGroup.set(accountGroup);
    }

    public JournalEntry getJournalEntry() {
        return journalEntry;
    }

    public Object getJournalEntryID() {
        return journalEntryID.get();
    }

    public String getJournalEntryDisplay() {
        return journalEntryDisplay.get();
    }

    public JournalEntryDA getJournalEntryDA() {
        return this.journalEntry != null ? new JournalEntryDA(this.journalEntry) : null;
    }

    public void setJournalEntry(JournalEntry journalEntry) {
        journalEntryDetail.setJournalEntry(journalEntry);
        this.journalEntry = journalEntry;
        this.journalEntryID.set(journalEntry.getId());
        this.journalEntryDisplay.set(journalEntry.getDisplayKey());
    }

    public String getAccountID() {
        return accountID.get();
    }

    public void setAccountID(String accountID) {
        journalEntryDetail.setAccountID(accountID);
        this.accountID.set(accountID);
    }

    public String getAccountName() {
        return accountName.get();
    }

    public void setAccountName(String accountName) {
        journalEntryDetail.setAccountName(accountName);
        this.accountName.set(accountName);
    }

    public Object getAccountType() {
        return accountType.get();
    }

    public void setAccountType(AccountTypes accountType) {
        journalEntryDetail.setAccountType(accountType);
        this.accountType.set(accountType);
    }

    public Object getAccountAction() {
        return accountAction.get();
    }

    public void setAccountAction(AccountActions accountAction) {
        journalEntryDetail.setAccountAction(accountAction);
        this.accountAction.set(accountAction);
    }

    public int getQuantity() {
        return quantity.get();
    }

    public void setQuantity(int quantity) {
        journalEntryDetail.setQuantity(quantity);
        this.quantity.set(quantity);
    }

    public double getUnitPrice() {
        return unitPrice.get();
    }

    public String getUnitPriceDisplay() {
        return unitPriceDisplay.get();
    }

    public void setUnitPrice(double unitPrice) {
        journalEntryDetail.setUnitPrice(unitPrice);
        this.unitPrice.set(unitPrice);
        this.unitPriceDisplay.set(formatNumber(unitPrice));
    }

    public double getAmount() {
        return amount.get();
    }

    public String getAmountDisplay() {
        return amountDisplay.get();
    }

    public void setAmount(double amount) {
        journalEntryDetail.setAmount(amount);
        this.amount.set(amount);
        this.amountDisplay.set(formatNumber(amount));
    }

    public String getNotes() {
        return notes.get();
    }

    public void setNotes(String notes) {
        journalEntryDetail.setNotes(notes);
        this.notes.set(notes);
    }

    public LookupData getLocation() {
        return location;
    }

    public Object getLocationID() {
        return locationID.get();
    }

    public String getLocationDisplay() {
        return locationDisplay.get();
    }

    public LookupDataDA getLocationDA() {
        return this.location != null ? new LookupDataDA(this.location) : null;
    }

    public void setLocation(LookupData location) {
        journalEntryDetail.setLocation(location);
        this.location = location;
        this.locationID.set(location.getId());
        this.locationDisplay.set(location.getDisplayKey());
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof JournalEntryDetailDA)) {
            return false;
        }

        JournalEntryDetailDA journalEntryDetailDA = (JournalEntryDetailDA) o;

        if (journalEntryDetailDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(journalEntryDetailDA.getId());
    }

    @Override
    public int hashCode() {
        return journalEntryDetail.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = journalEntryDetail;
        this.journalEntryDetailID.set(journalEntryDetail.getJournalEntryDetailID());
        this.accountGroup.set(journalEntryDetail.getAccountGroup());
        this.journalEntry = journalEntryDetail.getJournalEntry();
        if (this.journalEntry != null) {
            this.journalEntryID.set(journalEntry.getId());
            this.journalEntryDisplay.set(journalEntry.getDisplayKey());
        }
        this.accountID.set(journalEntryDetail.getAccountID());
        this.accountName.set(journalEntryDetail.getAccountName());
        this.accountType.set(journalEntryDetail.getAccountType());
        this.accountAction.set(journalEntryDetail.getAccountAction());
        this.quantity.set(journalEntryDetail.getQuantity());
        this.unitPrice.set(journalEntryDetail.getUnitPrice());
        this.unitPriceDisplay.set(formatNumber(journalEntryDetail.getUnitPrice()));
        this.amount.set(journalEntryDetail.getAmount());
        this.amountDisplay.set(formatNumber(journalEntryDetail.getAmount()));
        this.notes.set(journalEntryDetail.getNotes());
        this.location = journalEntryDetail.getLocation();
        if (this.location != null) {
            this.locationID.set(location.getId());
            this.locationDisplay.set(location.getDisplayKey());
        }
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("journalEntryDetailID", "Journal Entry Detail ID", this.journalEntryDetailID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("accountGroup", "Account Group", this.accountGroup.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("journalEntryID", "Journal Entry ID", this.journalEntryID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("journalEntryDisplay", "Journal Entry", this.journalEntryDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("accountID", "Account ID", this.accountID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("accountName", "Account Name", this.accountName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("accountType", "Account Type", this.accountType.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("accountAction", "Account Action", this.accountAction.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("quantity", "Quantity", this.quantity.get(),SearchDataTypes.NUMBER, false));
        this.searchColumns.add(new SearchColumn("unitPrice", "Unit Price", this.unitPrice.get(),this.unitPriceDisplay.get(),  SearchDataTypes.NUMBER, false));
        this.searchColumns.add(new SearchColumn("amount", "Amount", this.amount.get(),this.amountDisplay.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("notes", "Notes", this.notes.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("locationID", "Location ID", this.locationID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("locationDisplay", "Location", this.locationDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.journalEntryDetail.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.journalEntryDetail.getDisplayKey();
    }

    public static List<JournalEntryDetailDA> getJournalEntryDetailDAs(List<JournalEntryDetail> journalEntryDetails) {
        List<JournalEntryDetailDA> list = new ArrayList<>();
        journalEntryDetails.forEach((journalEntryDetail) -> {
            list.add(new JournalEntryDetailDA(journalEntryDetail));
        });
        return list;
    }

    public static List<JournalEntryDetail> getJournalEntryDetailList(List<JournalEntryDetailDA> journalEntryDetailDAs) {
        List<JournalEntryDetail> journalEntryDetails = new ArrayList<>();
        journalEntryDetailDAs.forEach(a -> journalEntryDetails.add(a.journalEntryDetail));
        return journalEntryDetails;
    }

    public boolean save() throws Exception {
        return super.persist(this.journalEntryDetail);

    }

    public boolean update() throws Exception {
        return super.merge(this.journalEntryDetail);

    }

    public boolean delete() {
        return super.remove(this.journalEntryDetail);

    }

    public JournalEntryDetail getJournalEntryDetail(String journalEntryDetailID) {
        return (JournalEntryDetail) super.find(JournalEntryDetail.class, journalEntryDetailID);
    }

    public JournalEntryDetail getJournalEntryDetail() {
        return this.journalEntryDetail;
    }

    public List<JournalEntryDetail> getJournalEntryDetails() {
        return super.find(JournalEntryDetail.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(JournalEntryDetail.class).forEach(o -> list.add(new JournalEntryDetailDA((JournalEntryDetail) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public JournalEntryDetailDA get(String journalEntryDetailID) throws Exception {
        JournalEntryDetail oJournalEntryDetail = getJournalEntryDetail(journalEntryDetailID);
        if (oJournalEntryDetail == null) {
            throw new Exception("No Record with id: " + journalEntryDetailID);
        }
        return new JournalEntryDetailDA(oJournalEntryDetail);
    }

    public List<JournalEntryDetailDA> get(String columName, Object value) {
        List<JournalEntryDetailDA> list = new ArrayList<>();
        super.selectQuery(JournalEntryDetail.class, columName, value).forEach(da -> list.add(new JournalEntryDetailDA((JournalEntryDetail) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<JournalEntryDetailDA> toDaList(List<JournalEntryDetail> journalEntryDetails) {
        List<JournalEntryDetailDA> journalEntryDetailDAs = new ArrayList<>();
        journalEntryDetails.forEach(s -> journalEntryDetailDAs.add(new JournalEntryDetailDA(s)));
        return journalEntryDetailDAs;
    }

    public List<DBAccess> toDBAccessList(List<JournalEntryDetail> journalEntryDetails) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        journalEntryDetails.forEach(s -> dbAccesses.add(new JournalEntryDetailDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(JournalEntryDetail.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(JournalEntryDetail.class, columnName, comparatorColumn, comparatorVaue);
    }

    public List<JournalEntryDetail> getJournalEntryDetails(String columName, Object value) {
        return super.find(JournalEntryDetail.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(JournalEntryDetail.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                JournalEntryDetailDA journalEntryDetailDA = new JournalEntryDetailDA((JournalEntryDetail) e[0]);
                journalEntryDetailDA.revisionEntity = (AppRevisionEntity) e[1];
                journalEntryDetailDA.oRevisionType = (RevisionType) e[2];
                journalEntryDetailDA.initRevProprties();
                journalEntryDetailDA.searchColumns.addAll(journalEntryDetailDA.getRevSearchColumns());
                dBAccesses.add(journalEntryDetailDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    public List<List<DBEntity>> makeLedgerEntries() {
        try {
            List<List<DBEntity>> allEnties = new ArrayList<>();
            List<DBEntity> toSaveEntities = new ArrayList<>();
            List<DBEntity> toUpdateEntities = new ArrayList<>();
            AccountGroups aGroup = this.journalEntryDetail.getAccountGroup();
            double entryAmount = this.getAmount();
            double exchangeRate = this.getJournalEntry().getExchangeRate();
            double toPostAmount = entryAmount * exchangeRate;
            LocalDate postingDate = this.journalEntry.getEntryDate();
            DocumentTypes documentType = this.journalEntry.getDocumentType();
            String documentNo = this.journalEntry.getDocumentNo();
            String description = this.journalEntryDetail.getNotes();
            String referenceNo = this.journalEntry.getReferenceNo();
            AccountActions toPostaccountAction = (AccountActions) this.getAccountAction();
            double subsidiaryBalance;
            ChartAccount cAccount;
            switch (aGroup) {
                case COA:
                    cAccount = new ChartAccountDA().getChartAccount(this.getAccountID());
                    break;
                case Bank:
                    BankAccount bankAccount = new BankAccountDA().getBankAccount(getAccountID());
                    cAccount = bankAccount.getPostingAccount();
                    subsidiaryBalance = new BankLedgerDA().getAccountBalance(bankAccount);
                    if (toPostaccountAction.equals(AccountActions.Debit)) {

                        subsidiaryBalance += toPostAmount;
                    } else {
                        subsidiaryBalance -= toPostAmount;
                    }
                    bankAccount.setBalance(subsidiaryBalance);
                    toUpdateEntities.add(bankAccount);

                    toSaveEntities.add(new BankLedger(this.journalEntryDetail, getAccountID(), bankAccount.getDisplayKey(), postingDate, documentType, description, documentNo, referenceNo, toPostAmount, subsidiaryBalance));
                    
                    break;
                case Customer:
                    Customer customer = new CustomerDA().getCustomer(getAccountID());
                    cAccount = customer.getCustomerPostingGroup().getReceivableAccount();
                    subsidiaryBalance = new CustomerLedgerDA().getAccountBalance(customer);
                    if (toPostaccountAction.equals(AccountActions.Debit)) {

                        subsidiaryBalance += toPostAmount;
                    } else {
                        subsidiaryBalance -= toPostAmount;
                    }
                    customer.setBalance(subsidiaryBalance);
                    toUpdateEntities.add(customer);
                    toSaveEntities.add(new CustomerLedger(this.journalEntryDetail, getAccountID(), customer.getDisplayKey(), postingDate, documentType, description, documentNo, referenceNo, toPostAmount, subsidiaryBalance));
                    break;
                case Vender:
                    Vendor vendor = new VendorDA().getVendor(this.getAccountID());
                    cAccount = vendor.getVendorPostingGroup().getPayableAccount();
                    subsidiaryBalance = new VendorLedgerDA().getAccountBalance(vendor);
                    if (toPostaccountAction.equals(AccountActions.Credit)) {

                        subsidiaryBalance += toPostAmount;
                    } else {
                        subsidiaryBalance -= toPostAmount;
                    }
                    vendor.setBalance(subsidiaryBalance);
                    toUpdateEntities.add(vendor);
                    toSaveEntities.add(new VendorLedger(this.journalEntryDetail, this.getAccountID(), vendor.getDisplayKey(), postingDate, documentType, description, documentNo, referenceNo, toPostAmount, subsidiaryBalance));
                    break;
                default:
                    return null;
            }
            AccountTypes aType = cAccount.getAccountCategory().getAccountType();
            boolean isContra = cAccount.isContra();

            double balanceValue = new GeneralLedgerDA().getAccountBalance(cAccount);

            if (toPostaccountAction.equals(AccountActions.Debit)) {
                if (aType.equals(AccountTypes.Asset) || aType.equals(AccountTypes.Expense)) {
                    if (isContra) {
                        balanceValue -= toPostAmount;
                    } else {
                        balanceValue += toPostAmount;
                    }
                } else {
                    if (isContra) {
                        balanceValue += toPostAmount;
                    } else {
                        balanceValue -= toPostAmount;
                    }

                }
            } else if (toPostaccountAction.equals(AccountActions.Credit)) {
                if (aType.equals(AccountTypes.Asset) || aType.equals(AccountTypes.Expense)) {
                    if (isContra) {
                        balanceValue += toPostAmount;
                    } else {
                        balanceValue -= toPostAmount;
                    }
                } else {
                    if (isContra) {
                        balanceValue -= toPostAmount;
                    } else {
                        balanceValue += toPostAmount;
                    }

                }
            }
            cAccount.setClosingBalance(balanceValue); 
                    toUpdateEntities.add(cAccount);
            toSaveEntities.add(new GeneralLedger(journalEntryDetail, postingDate, cAccount.getAccountID(), cAccount.getAccountName(), aType, description, toPostAmount, balanceValue));
           allEnties.add(toSaveEntities);
           allEnties.add(toUpdateEntities);
            return allEnties;
        } catch (Exception e) {
            throw e;
        }

    }

}
