/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.dbaccess;

import com.saburi.finance.entities.ItemPriceGroup;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.common.dbaccess.DBAccess;
import static com.saburi.common.utils.Utilities.formatInteger;
import com.saburi.finance.entities.Item;
import com.saburi.common.entities.LookupData;
import com.saburi.common.dbaccess.LookupDataDA;
import static com.saburi.common.utils.Utilities.formatNumber;

public class ItemPriceGroupDA extends DBAccess {

    private ItemPriceGroup itemPriceGroup = new ItemPriceGroup();
    private final SimpleIntegerProperty itemPriceGroupID = new SimpleIntegerProperty(this, "itemPriceGroupID");
    private final SimpleStringProperty itemPriceGroupIDDisplay = new SimpleStringProperty(this, "itemPriceGroupIDDisplay");
    private final SimpleStringProperty itemDisplay = new SimpleStringProperty(this, "itemDisplay");
    private final SimpleObjectProperty itemID = new SimpleObjectProperty(this, "itemID");
    private Item item;
    private final SimpleStringProperty priceGroupDisplay = new SimpleStringProperty(this, "priceGroupDisplay");
    private final SimpleObjectProperty priceGroupID = new SimpleObjectProperty(this, "priceGroupID");
    private LookupData priceGroup;
    private final SimpleDoubleProperty unitPrice = new SimpleDoubleProperty(this, "unitPrice");
    private final SimpleStringProperty unitPriceDisplay = new SimpleStringProperty(this, "unitPriceDisplay");
    private final SimpleDoubleProperty discount = new SimpleDoubleProperty(this, "discount");
    private final SimpleStringProperty discountDisplay = new SimpleStringProperty(this, "discountDisplay");

    public ItemPriceGroupDA() {
        createSearchColumns();
    }

    public ItemPriceGroupDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public ItemPriceGroupDA(ItemPriceGroup itemPriceGroup) {
        this.itemPriceGroup = itemPriceGroup;
        initialseProprties();
        createSearchColumns();
    }

    public ItemPriceGroupDA(String persistenceUnit, ItemPriceGroup itemPriceGroup) {
        super(persistenceUnit);
        this.itemPriceGroup = itemPriceGroup;
        initialseProprties();
        createSearchColumns();
    }

    public ItemPriceGroupDA(int itemPriceGroupID, Item item, LookupData priceGroup, double unitPrice, double discount) {
        this.itemPriceGroup = new ItemPriceGroup(itemPriceGroupID, item, priceGroup, unitPrice, discount);
        initialseProprties();
        createSearchColumns();
    }

    public ItemPriceGroupDA(String persistenceUnit, int itemPriceGroupID, Item item, LookupData priceGroup, double unitPrice, double discount) {
        super(persistenceUnit);
        this.itemPriceGroup = new ItemPriceGroup(itemPriceGroupID, item, priceGroup, unitPrice, discount);
        initialseProprties();
        createSearchColumns();
    }

    public int getItemPriceGroupID() {
        return itemPriceGroupID.get();
    }

    public String getItemPriceGroupIDDisplay() {
        return itemPriceGroupIDDisplay.get();
    }

    public void setItemPriceGroupID(int itemPriceGroupID) {
        itemPriceGroup.setItemPriceGroupID(itemPriceGroupID);
        this.itemPriceGroupID.set(itemPriceGroupID);
        this.itemPriceGroupIDDisplay.set(formatInteger(itemPriceGroupID));
    }

    public Item getItem() {
        return item;
    }

    public Object getItemID() {
        return itemID.get();
    }

    public String getItemDisplay() {
        return itemDisplay.get();
    }

    public ItemDA getItemDA() {
        return this.item != null ? new ItemDA(this.item) : null;
    }

    public void setItem(Item item) {
        itemPriceGroup.setItem(item);
        this.item = item;
        this.itemID.set(item.getId());
        this.itemDisplay.set(item.getDisplayKey());
    }

    public LookupData getPriceGroup() {
        return priceGroup;
    }

    public Object getPriceGroupID() {
        return priceGroupID.get();
    }

    public String getPriceGroupDisplay() {
        return priceGroupDisplay.get();
    }

    public LookupDataDA getPriceGroupDA() {
        return this.priceGroup != null ? new LookupDataDA(this.priceGroup) : null;
    }

    public void setPriceGroup(LookupData priceGroup) {
        itemPriceGroup.setPriceGroup(priceGroup);
        this.priceGroup = priceGroup;
        this.priceGroupID.set(priceGroup.getId());
        this.priceGroupDisplay.set(priceGroup.getDisplayKey());
    }

    public double getUnitPrice() {
        return unitPrice.get();
    }

    public String getUnitPriceDisplay() {
        return unitPriceDisplay.get();
    }

    public void setUnitPrice(double unitPrice) {
        itemPriceGroup.setUnitPrice(unitPrice);
        this.unitPrice.set(unitPrice);
        this.unitPriceDisplay.set(formatNumber(unitPrice));
    }

    public double getDiscount() {
        return discount.get();
    }

    public String getDiscountDisplay() {
        return discountDisplay.get();
    }

    public void setDiscount(double discount) {
        itemPriceGroup.setDiscount(discount);
        this.discount.set(discount);
        this.discountDisplay.set(formatNumber(discount));
    }

    public void setItemPriceGroup(ItemPriceGroup itemPriceGroup) {
        this.itemPriceGroup = itemPriceGroup;
        this.initialseProprties();
        createSearchColumns();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof ItemPriceGroupDA)) {
            return false;
        }

        ItemPriceGroupDA itemPriceGroupDA = (ItemPriceGroupDA) o;

        return this.itemPriceGroup.equals(itemPriceGroupDA.getItemPriceGroup());
    }

    @Override
    public int hashCode() {
        return itemPriceGroup.hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = itemPriceGroup;
        this.itemPriceGroupID.set(itemPriceGroup.getItemPriceGroupID());
        this.itemPriceGroupIDDisplay.set(formatInteger(itemPriceGroup.getItemPriceGroupID()));
        this.item = itemPriceGroup.getItem();
        if (this.item != null) {
            this.itemID.set(item.getId());
            this.itemDisplay.set(item.getDisplayKey());
        }
        this.priceGroup = itemPriceGroup.getPriceGroup();
        if (this.priceGroup != null) {
            this.priceGroupID.set(priceGroup.getId());
            this.priceGroupDisplay.set(priceGroup.getDisplayKey());
        }
        this.unitPrice.set(itemPriceGroup.getUnitPrice());
        this.unitPriceDisplay.set(formatNumber(itemPriceGroup.getUnitPrice()));
        this.discount.set(itemPriceGroup.getDiscount());
        this.discountDisplay.set(formatNumber(itemPriceGroup.getDiscount()));
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("itemPriceGroupID", "Item Price Group ID", this.itemPriceGroupID.get(), itemPriceGroupIDDisplay.get(), SearchDataTypes.INTEGER));
        this.searchColumns.add(new SearchColumn("itemID", "Item ID", this.itemID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("itemDisplay", "Item", this.itemDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("priceGroupID", "Price Group ID", this.priceGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("priceGroupDisplay", "Price Group", this.priceGroupDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("unitPrice", "Unit Price", this.unitPrice.get(), unitPriceDisplay.get(), SearchDataTypes.MONEY));
        this.searchColumns.add(new SearchColumn("discount", "Discount", this.discount.get(), discountDisplay.get(), SearchDataTypes.MONEY));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.itemPriceGroup.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.itemPriceGroup.getDisplayKey();
    }

    public static List<ItemPriceGroupDA> getItemPriceGroupDAs(List<ItemPriceGroup> itemPriceGroups) {
        List<ItemPriceGroupDA> list = new ArrayList<>();
        itemPriceGroups.forEach((itemPriceGroup) -> {
            list.add(new ItemPriceGroupDA(itemPriceGroup));
        });
        return list;
    }

    public static List<ItemPriceGroup> getItemPriceGroupList(List<ItemPriceGroupDA> itemPriceGroupDAs) {
        List<ItemPriceGroup> itemPriceGroups = new ArrayList<>();
        itemPriceGroupDAs.forEach(a -> itemPriceGroups.add(a.itemPriceGroup));
        return itemPriceGroups;
    }

    public boolean save() throws Exception {
        if (!isValid()) {
            return false;
        }
        return super.persist(this.itemPriceGroup);

    }

    public boolean update() throws Exception {
        if (!isValid()) {
            return false;
        }
        return super.merge(this.itemPriceGroup);

    }

    public boolean delete() {
        return super.remove(this.itemPriceGroup);

    }

    public ItemPriceGroup getItemPriceGroup(int itemPriceGroupID) {
        return (ItemPriceGroup) super.find(ItemPriceGroup.class, itemPriceGroupID);
    }

    public ItemPriceGroup getItemPriceGroup() {
        return this.itemPriceGroup;
    }

    public List<ItemPriceGroup> getItemPriceGroups() {
        return super.find(ItemPriceGroup.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(ItemPriceGroup.class).forEach(o -> list.add(new ItemPriceGroupDA((ItemPriceGroup) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public ItemPriceGroupDA get(int itemPriceGroupID) throws Exception {
        ItemPriceGroup oItemPriceGroup = getItemPriceGroup(itemPriceGroupID);
        if (oItemPriceGroup == null) {
            throw new Exception("No Record with id: " + itemPriceGroupID);
        }
        return new ItemPriceGroupDA(oItemPriceGroup);
    }

    public List<ItemPriceGroupDA> get(String columName, Object value) {
        List<ItemPriceGroupDA> list = new ArrayList<>();
        super.selectQuery(ItemPriceGroup.class, columName, value).forEach(da -> list.add(new ItemPriceGroupDA((ItemPriceGroup) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<ItemPriceGroupDA> toDaList(List<ItemPriceGroup> itemPriceGroups) {
        List<ItemPriceGroupDA> itemPriceGroupDAs = new ArrayList<>();
        itemPriceGroups.forEach(s -> itemPriceGroupDAs.add(new ItemPriceGroupDA(s)));
        return itemPriceGroupDAs;
    }

    public List<DBAccess> toDBAccessList(List<ItemPriceGroup> itemPriceGroups) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        itemPriceGroups.forEach(s -> dbAccesses.add(new ItemPriceGroupDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(ItemPriceGroup.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(ItemPriceGroup.class, columnName, comparatorColumn, comparatorVaue);
    }

    public List<ItemPriceGroup> getItemPriceGroups(String columName, Object value) {
        return super.find(ItemPriceGroup.class, columName, value);
    }

    public boolean isValid() throws Exception {
        List<SearchColumn> lSearchColumns = new ArrayList<>();
        lSearchColumns.add(new SearchColumn("item", itemPriceGroup.getItem(), SearchColumn.SearchType.Equal));
        lSearchColumns.add(new SearchColumn("priceGroup", itemPriceGroup.getPriceGroup(), SearchColumn.SearchType.Equal));
        List<ItemPriceGroup> lItemPriceGroup = super.find(ItemPriceGroup.class, lSearchColumns);
        lItemPriceGroup.removeIf((p) -> p.getId().equals(itemPriceGroup.getId()));
        if (lItemPriceGroup.size() > 0) {
            throw new Exception("The record with Item: " + itemPriceGroup.getItem().getDisplayKey() + " and Price Group: " + itemPriceGroup.getPriceGroup().getDisplayKey() + "already exists");
        }
        return true;
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(ItemPriceGroup.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                ItemPriceGroupDA itemPriceGroupDA = new ItemPriceGroupDA((ItemPriceGroup) e[0]);
                itemPriceGroupDA.revisionEntity = (AppRevisionEntity) e[1];
                itemPriceGroupDA.oRevisionType = (RevisionType) e[2];
                itemPriceGroupDA.initRevProprties();
                itemPriceGroupDA.searchColumns.addAll(itemPriceGroupDA.getRevSearchColumns());
                dBAccesses.add(itemPriceGroupDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    public List<ItemPriceGroup> getItemPriceGroups(String column, Object value, String column1, Object value1) {
        return super.find(ItemPriceGroup.class, column, value, column1, value1);
    }

    public List<ItemPriceGroup> getItemPriceGroups(Item item, LookupData priceGroup) {
        return getItemPriceGroups("item", item, "priceGroup", priceGroup);
    }

    public ItemPriceGroup getItemPriceGroup(Item item, LookupData priceGroup) {
        List<ItemPriceGroup> priceGroups = getItemPriceGroups(item, priceGroup);
        return priceGroups.isEmpty() ? null : priceGroups.get(0);
    }

}
