/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.dbaccess;

import com.saburi.common.dbaccess.DBAccess;
import com.saburi.common.dbaccess.IDGeneratorDA;
import com.saburi.common.dbaccess.OptionsDA;
import com.saburi.finance.entities.JournalEntry;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.finance.entities.FinancialPeriod;
import java.time.LocalDate;
import static com.saburi.common.utils.Utilities.formatDate;
import com.saburi.finance.utils.FinanceEnums.DocumentTypes;
import com.saburi.finance.entities.Currency;
import com.saburi.common.entities.DBEntity;
import static com.saburi.common.utils.Utilities.formatNumber;
import com.saburi.finance.utils.FinanceEnums.PostStatus;
import com.saburi.finance.utils.FinanceEnums.JournalTypes;
import com.saburi.common.utils.CommonEnums.EntryModes;
import com.saburi.common.utils.CommonEnums.Rights;
import com.saburi.finance.entities.JournalEntryDetail;
import java.util.Map;
import com.saburi.finance.utils.FinanceEnums;
import com.saburi.finance.utils.FinanceOptionKeys;
import java.util.LinkedHashMap;

public class JournalEntryDA extends DBAccess {

    private JournalEntry journalEntry = new JournalEntry();
    private final SimpleIntegerProperty idHelper = new SimpleIntegerProperty(this, "idHelper");
    private final SimpleStringProperty financialPeriodDisplay = new SimpleStringProperty(this, "financialPeriodDisplay");
    private final SimpleObjectProperty financialPeriodID = new SimpleObjectProperty(this, "financialPeriodID");
    private FinancialPeriod financialPeriod;
    private final SimpleStringProperty journalID = new SimpleStringProperty(this, "journalID");
    private final SimpleObjectProperty entryDate = new SimpleObjectProperty(this, "entryDate");
    private final SimpleStringProperty entryDateDisplay = new SimpleStringProperty(this, "entryDateDisplay");
    private final SimpleStringProperty narration = new SimpleStringProperty(this, "narration");
    private final SimpleObjectProperty documentType = new SimpleObjectProperty(this, "documentType");
    private final SimpleStringProperty documentNo = new SimpleStringProperty(this, "documentNo");
    private final SimpleStringProperty referenceNo = new SimpleStringProperty(this, "referenceNo");
    private final SimpleStringProperty currencyDisplay = new SimpleStringProperty(this, "currencyDisplay");
    private final SimpleObjectProperty currencyID = new SimpleObjectProperty(this, "currencyID");
    private Currency currency;
    private final SimpleDoubleProperty baseAmount = new SimpleDoubleProperty(this, "baseAmount");
    private final SimpleStringProperty baseAmountDisplay = new SimpleStringProperty(this, "baseAmountDisplay");
    private final SimpleDoubleProperty exchangeRate = new SimpleDoubleProperty(this, "exchangeRate");
    private final SimpleStringProperty exchangeRateDisplay = new SimpleStringProperty(this, "exchangeRateDisplay");
    private final SimpleDoubleProperty amount = new SimpleDoubleProperty(this, "amount");
    private final SimpleStringProperty amountDisplay = new SimpleStringProperty(this, "amountDisplay");
    private final SimpleStringProperty amountWords = new SimpleStringProperty(this, "amountWords");
    private final SimpleObjectProperty postStatus = new SimpleObjectProperty(this, "postStatus");
    private final SimpleObjectProperty journalType = new SimpleObjectProperty(this, "journalType");
    private final SimpleObjectProperty entryMode = new SimpleObjectProperty(this, "entryMode");
    private List<JournalEntryDetail> journalEntryDetails = new ArrayList<>();

    public JournalEntryDA() {
        createSearchColumns();
    }

    public JournalEntryDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public JournalEntryDA(JournalEntry journalEntry) {
        this.journalEntry = journalEntry;
        initialseProprties();
        createSearchColumns();
    }

    public JournalEntryDA(String persistenceUnit, JournalEntry journalEntry) {
        super(persistenceUnit);
        this.journalEntry = journalEntry;
        initialseProprties();
        createSearchColumns();
    }

    public JournalEntryDA(FinancialPeriod financialPeriod, String journalID, LocalDate entryDate, String narration, DocumentTypes documentType, String documentNo, String referenceNo, Currency currency, double baseAmount, double exchangeRate, double amount, String amountWords, PostStatus postStatus, JournalTypes journalType, EntryModes entryMode) {
        this.journalEntry = new JournalEntry(getNextIdHelper(financialPeriod), financialPeriod, journalID, entryDate, narration, documentType, documentNo, referenceNo, currency, baseAmount, exchangeRate, amount, amountWords, postStatus, journalType, entryMode);
        initialseProprties();
        createSearchColumns();
    }

    public JournalEntryDA(String persistenceUnit, FinancialPeriod financialPeriod, String journalID, LocalDate entryDate, String narration, DocumentTypes documentType, String documentNo, String referenceNo, Currency currency, double baseAmount, double exchangeRate, double amount, String amountWords, PostStatus postStatus, JournalTypes journalType, EntryModes entryMode) {
        super(persistenceUnit);
        this.journalEntry = new JournalEntry(getNextIdHelper(financialPeriod), financialPeriod, journalID, entryDate, narration, documentType, documentNo, referenceNo, currency, baseAmount, exchangeRate, amount, amountWords, postStatus, journalType, entryMode);
        initialseProprties();
        createSearchColumns();
    }

    public int getIdHelper() {
        return idHelper.get();
    }

    public void setIdHelper(int idHelper) {
        journalEntry.setIdHelper(idHelper);
        this.idHelper.set(idHelper);
    }

    public FinancialPeriod getFinancialPeriod() {
        return financialPeriod;
    }

    public Object getFinancialPeriodID() {
        return financialPeriodID.get();
    }

    public String getFinancialPeriodDisplay() {
        return financialPeriodDisplay.get();
    }

    public FinancialPeriodDA getFinancialPeriodDA() {
        return this.financialPeriod != null ? new FinancialPeriodDA(this.financialPeriod) : null;
    }

    public void setFinancialPeriod(FinancialPeriod financialPeriod) {
        journalEntry.setFinancialPeriod(financialPeriod);
        this.financialPeriod = financialPeriod;
        this.financialPeriodID.set(financialPeriod.getId());
        this.financialPeriodDisplay.set(financialPeriod.getDisplayKey());
    }

    public String getJournalID() {
        return journalID.get();
    }

    public void setJournalID(String journalID) {
        journalEntry.setJournalID(journalID);
        this.journalID.set(journalID);
    }

    public Object getEntryDate() {
        return entryDate.get();
    }

    public String getEntryDateDisplay() {
        return entryDateDisplay.get();
    }

    public void setEntryDate(LocalDate entryDate) {
        journalEntry.setEntryDate(entryDate);
        this.entryDate.set(entryDate);
    }

    public String getNarration() {
        return narration.get();
    }

    public void setNarration(String narration) {
        journalEntry.setNarration(narration);
        this.narration.set(narration);
    }

    public Object getDocumentType() {
        return documentType.get();
    }

    public void setDocumentType(DocumentTypes documentType) {
        journalEntry.setDocumentType(documentType);
        this.documentType.set(documentType);
    }

    public String getDocumentNo() {
        return documentNo.get();
    }

    public void setDocumentNo(String documentNo) {
        journalEntry.setDocumentNo(documentNo);
        this.documentNo.set(documentNo);
    }

    public String getReferenceNo() {
        return referenceNo.get();
    }

    public void setReferenceNo(String referenceNo) {
        journalEntry.setReferenceNo(referenceNo);
        this.referenceNo.set(referenceNo);
    }

    public Currency getCurrency() {
        return currency;
    }

    public Object getCurrencyID() {
        return currencyID.get();
    }

    public String getCurrencyDisplay() {
        return currencyDisplay.get();
    }

    public CurrencyDA getCurrencyDA() {
        return this.currency != null ? new CurrencyDA(this.currency) : null;
    }

    public void setCurrency(Currency currency) {
        journalEntry.setCurrency(currency);
        this.currency = currency;
        this.currencyID.set(currency.getId());
        this.currencyDisplay.set(currency.getDisplayKey());
    }

    public double getBaseAmount() {
        return baseAmount.get();
    }

    public String getBaseAmountDisplay() {
        return baseAmountDisplay.get();
    }

    public void setBaseAmount(double baseAmount) {
        journalEntry.setBaseAmount(baseAmount);
        this.baseAmount.set(baseAmount);
        this.baseAmountDisplay.set(formatNumber(baseAmount));
    }

    public double getExchangeRate() {
        return exchangeRate.get();
    }

    public String getExchangeRateDisplay() {
        return exchangeRateDisplay.get();
    }

    public void setExchangeRate(double exchangeRate) {
        journalEntry.setExchangeRate(exchangeRate);
        this.exchangeRate.set(exchangeRate);
        this.exchangeRateDisplay.set(formatNumber(exchangeRate));
    }

    public double getAmount() {
        return amount.get();
    }

    public String getAmountDisplay() {
        return amountDisplay.get();
    }

    public void setAmount(double amount) {
        journalEntry.setAmount(amount);
        this.amount.set(amount);
        this.amountDisplay.set(formatNumber(amount));
    }

    public String getAmountWords() {
        return amountWords.get();
    }

    public void setAmountWords(String amountWords) {
        journalEntry.setAmountWords(amountWords);
        this.amountWords.set(amountWords);
    }

    public Object getPostStatus() {
        return postStatus.get();
    }

    public void setPostStatus(PostStatus postStatus) {
        journalEntry.setPostStatus(postStatus);
        this.postStatus.set(postStatus);
    }

    public Object getJournalType() {
        return journalType.get();
    }

    public void setJournalType(JournalTypes journalType) {
        journalEntry.setJournalType(journalType);
        this.journalType.set(journalType);
    }

    public Object getEntryMode() {
        return entryMode.get();
    }

    public void setEntryMode(EntryModes entryMode) {
        journalEntry.setEntryMode(entryMode);
        this.entryMode.set(entryMode);
    }

    public List<JournalEntryDetail> getJournalEntryDetails() {
        return journalEntryDetails;
    }

    public List<JournalEntryDetailDA> getJournalEntryDetailsDAs() {
        return JournalEntryDetailDA.getJournalEntryDetailDAs(journalEntry.getJournalEntryDetails());
    }

    public void setJournalEntryDetails(List<JournalEntryDetail> journalEntryDetails) {
        journalEntry.setJournalEntryDetails(journalEntryDetails);
        this.journalEntryDetails = journalEntryDetails;
    }

    public void setJournalEntryDetailsDAs(List<JournalEntryDetailDA> journalEntryDetailDAs) {
        this.journalEntry.setJournalEntryDetails(JournalEntryDetailDA.getJournalEntryDetailList(journalEntryDetailDAs));

    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof JournalEntryDA)) {
            return false;
        }

        JournalEntryDA journalEntryDA = (JournalEntryDA) o;

        if (journalEntryDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(journalEntryDA.getId());
    }

    @Override
    public int hashCode() {
        return journalEntry.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = journalEntry;
        this.idHelper.set(journalEntry.getIdHelper());
        this.financialPeriod = journalEntry.getFinancialPeriod();
        if (this.financialPeriod != null) {
            this.financialPeriodID.set(financialPeriod.getId());
            this.financialPeriodDisplay.set(financialPeriod.getDisplayKey());
        }
        this.journalID.set(journalEntry.getJournalID());
        this.entryDate.set(journalEntry.getEntryDate());
        this.entryDateDisplay.set(formatDate(journalEntry.getEntryDate()));
        this.narration.set(journalEntry.getNarration());
        this.documentType.set(journalEntry.getDocumentType());
        this.documentNo.set(journalEntry.getDocumentNo());
        this.referenceNo.set(journalEntry.getReferenceNo());
        this.currency = journalEntry.getCurrency();
        if (this.currency != null) {
            this.currencyID.set(currency.getId());
            this.currencyDisplay.set(currency.getDisplayKey());
        }
        this.baseAmount.set(journalEntry.getBaseAmount());
        this.baseAmountDisplay.set(formatNumber(journalEntry.getBaseAmount()));
        this.exchangeRate.set(journalEntry.getExchangeRate());
        this.exchangeRateDisplay.set(formatNumber(journalEntry.getExchangeRate()));
        this.amount.set(journalEntry.getAmount());
        this.amountDisplay.set(formatNumber(journalEntry.getAmount()));
        this.amountWords.set(journalEntry.getAmountWords());
        this.postStatus.set(journalEntry.getPostStatus());
        this.journalType.set(journalEntry.getJournalType());
        this.entryMode.set(journalEntry.getEntryMode());
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("financialPeriodID", "Financial Period ID", this.financialPeriodID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("financialPeriodDisplay", "Financial Period", this.financialPeriodDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("journalID", "Journal ID", this.journalID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("entryDate", "Entry Date", this.entryDate.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("narration", "Narration", this.narration.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("documentType", "Document Type", this.documentType.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("documentNo", "Document No", this.documentNo.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("referenceNo", "Reference No", this.referenceNo.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("currencyID", "Currency ID", this.currencyID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("currencyDisplay", "Currency", this.currencyDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("baseAmount", "Base Amount", this.baseAmount.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("exchangeRate", "Exchange Rate", this.exchangeRate.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("amount", "Amount", this.amount.get(), SearchDataTypes.NUMBER));
        this.searchColumns.add(new SearchColumn("amountWords", "Amount Words", this.amountWords.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("postStatus", "Post Status", this.postStatus.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("journalType", "Journal Type", this.journalType.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("entryMode", "Entry Mode", this.entryMode.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.journalEntry.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.journalEntry.getDisplayKey();
    }

    public static List<JournalEntryDA> getJournalEntryDAs(List<JournalEntry> journalEntrys) {
        List<JournalEntryDA> list = new ArrayList<>();
        journalEntrys.forEach((journalEntry) -> {
            list.add(new JournalEntryDA(journalEntry));
        });
        return list;
    }

    public static List<JournalEntry> getJournalEntryList(List<JournalEntryDA> journalEntryDAs) {
        List<JournalEntry> journalEntrys = new ArrayList<>();
        journalEntryDAs.forEach(a -> journalEntrys.add(a.journalEntry));
        return journalEntrys;
    }

    public boolean save() throws Exception {
        if (isValid()) {

            super.persist(this.journalEntry);
            if (OptionsDA.getBooleanOptionValue(FinanceOptionKeys.ENABLE_AUTO_GENERAL_LEDGER_POSTING)) {
                this.post();
            }
            return true;
        }
        return false;
    }

    public boolean update() throws Exception {
        if (!isValid()) {
            return false;
        }
        return super.merge(this.journalEntry);

    }

    public boolean delete() {
        return super.remove(this.journalEntry);

    }

    public JournalEntry getJournalEntry(String journalID) {
        return (JournalEntry) super.findJoin(JournalEntry.class, journalID, "journalEntryDetails");
    }

    public JournalEntry getJournalEntry() {
        return this.journalEntry;
    }

    public List<JournalEntry> getJournalEntrys() {
        return super.find(JournalEntry.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(JournalEntry.class).forEach(o -> list.add(new JournalEntryDA((JournalEntry) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public JournalEntryDA get(String journalID) throws Exception {
        JournalEntry oJournalEntry = getJournalEntry(journalID);
        if (oJournalEntry == null) {
            throw new Exception("No Record with id: " + journalID);
        }
        return new JournalEntryDA(oJournalEntry);
    }

    public List<JournalEntryDA> get(String columName, Object value) {
        List<JournalEntryDA> list = new ArrayList<>();
        super.selectQuery(JournalEntry.class, columName, value).forEach(da -> list.add(new JournalEntryDA((JournalEntry) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<JournalEntryDA> toDaList(List<JournalEntry> journalEntrys) {
        List<JournalEntryDA> journalEntryDAs = new ArrayList<>();
        journalEntrys.forEach(s -> journalEntryDAs.add(new JournalEntryDA(s)));
        return journalEntryDAs;
    }

    public List<DBAccess> toDBAccessList(List<JournalEntry> journalEntrys) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        journalEntrys.forEach(s -> dbAccesses.add(new JournalEntryDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(JournalEntry.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(JournalEntry.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIdHelper(FinancialPeriod financialPeriod) {
        return this.getMax("idHelper", "financialPeriod", financialPeriod) + 1;
    }

    public String getNextJournalID(int idHelper, String financialPeriod) {
        return new IDGeneratorDA().getToAppendString(JournalEntry.class.getSimpleName(), financialPeriod, idHelper);
    }

    public List<JournalEntry> getJournalEntrys(String columName, Object value) {
        return super.find(JournalEntry.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(JournalEntry.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                JournalEntryDA journalEntryDA = new JournalEntryDA((JournalEntry) e[0]);
                journalEntryDA.revisionEntity = (AppRevisionEntity) e[1];
                journalEntryDA.oRevisionType = (RevisionType) e[2];
                journalEntryDA.initRevProprties();
                journalEntryDA.searchColumns.addAll(journalEntryDA.getRevSearchColumns());
                dBAccesses.add(journalEntryDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    public boolean isValid() throws Exception {
        if (this.getPostStatus().equals(PostStatus.Posted)) {
            throw new Exception("The Journal Entry: " + journalEntry.getDisplayKey() + " is already posted. You can't continue");
        }
        return true;
    }

    public void post() throws Exception {
        try {
            if (!isValid()) {
                return;
            }
            List<DBEntity> toSaveEntities = new ArrayList<>();
            List<DBEntity> toUpdateEntities = new ArrayList<>();
            this.journalEntry = getJournalEntry(this.journalEntry.getJournalID());
            JournalEntryDetailDA.getJournalEntryDetailDAs(this.journalEntry.getJournalEntryDetails()).forEach((t) -> {
                toSaveEntities.addAll(t.makeLedgerEntries().get(0));
                toUpdateEntities.addAll(t.makeLedgerEntries().get(1));
            });
            this.setPostStatus(PostStatus.Posted);
            Map<List<? extends DBEntity>, Rights> map = new LinkedHashMap<>();
//            List<DBEntity> journalEntries = new ArrayList<>();
//            journalEntries.add(this.journalEntry);
            toUpdateEntities.add(this.journalEntry);
            map.put(toSaveEntities, Rights.Create);
            map.put(toUpdateEntities, Rights.Update);
            processBatchList(map);
        } catch (Exception e) {
            throw e;
        }
    }

}
