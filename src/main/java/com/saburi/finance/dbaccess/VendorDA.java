/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.finance.dbaccess;

import com.saburi.common.dbaccess.DBAccess;
import com.saburi.common.dbaccess.IDGeneratorDA;
import com.saburi.common.dbaccess.LookupDataDA;
import com.saburi.finance.entities.Vendor;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.common.entities.LookupData;
import com.saburi.finance.entities.VendorPostingGroup;
import static com.saburi.common.utils.Utilities.formatNumber;

public class VendorDA extends DBAccess {

    private Vendor vendor = new Vendor();
    private final SimpleIntegerProperty idHelper = new SimpleIntegerProperty(this, "idHelper");
    private final SimpleStringProperty vendorID = new SimpleStringProperty(this, "vendorID");
    private final SimpleStringProperty vendorName = new SimpleStringProperty(this, "vendorName");
    private final SimpleStringProperty vendorCategoryDisplay = new SimpleStringProperty(this, "vendorCategoryDisplay");
    private final SimpleObjectProperty vendorCategoryID = new SimpleObjectProperty(this, "vendorCategoryID");
    private LookupData vendorCategory;
    private final SimpleStringProperty phoneNo = new SimpleStringProperty(this, "phoneNo");
    private final SimpleStringProperty email = new SimpleStringProperty(this, "email");
    private final SimpleStringProperty address = new SimpleStringProperty(this, "address");
    private final SimpleStringProperty priceGroupDisplay = new SimpleStringProperty(this, "priceGroupDisplay");
    private final SimpleObjectProperty priceGroupID = new SimpleObjectProperty(this, "priceGroupID");
    private LookupData priceGroup;
    private final SimpleStringProperty vendorPostingGroupDisplay = new SimpleStringProperty(this, "vendorPostingGroupDisplay");
    private final SimpleObjectProperty vendorPostingGroupID = new SimpleObjectProperty(this, "vendorPostingGroupID");
    private VendorPostingGroup vendorPostingGroup;
    private final SimpleStringProperty businessGroupDisplay = new SimpleStringProperty(this, "businessGroupDisplay");
    private final SimpleObjectProperty businessGroupID = new SimpleObjectProperty(this, "businessGroupID");
    private LookupData businessGroup;
    private final SimpleStringProperty vATBusinessGroupDisplay = new SimpleStringProperty(this, "vATBusinessGroupDisplay");
    private final SimpleObjectProperty vATBusinessGroupID = new SimpleObjectProperty(this, "vATBusinessGroupID");
    private LookupData vATBusinessGroup;
    private final SimpleDoubleProperty balance = new SimpleDoubleProperty(this, "balance");
    private final SimpleStringProperty balanceDisplay = new SimpleStringProperty(this, "balanceDisplay");

    public VendorDA() {
        createSearchColumns();
    }

    public VendorDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public VendorDA(Vendor vendor) {
        this.vendor = vendor;
        initialseProprties();
        createSearchColumns();
    }

    public VendorDA(String persistenceUnit, Vendor vendor) {
        super(persistenceUnit);
        this.vendor = vendor;
        initialseProprties();
        createSearchColumns();
    }

    public VendorDA(String vendorID, String vendorName, LookupData vendorCategory, String phoneNo, String email, String address, LookupData priceGroup, VendorPostingGroup vendorPostingGroup, LookupData businessGroup, LookupData vATBusinessGroup) {
        this.vendor = new Vendor(getNextIdHelper(), vendorID, vendorName, vendorCategory, phoneNo, email, address, priceGroup, vendorPostingGroup, businessGroup, vATBusinessGroup);
        initialseProprties();
        createSearchColumns();
    }

    public VendorDA(String persistenceUnit, String vendorID, String vendorName, LookupData vendorCategory, String phoneNo, String email, String address, LookupData priceGroup, VendorPostingGroup vendorPostingGroup, LookupData businessGroup, LookupData vATBusinessGroup) {
        super(persistenceUnit);
        this.vendor = new Vendor(getNextIdHelper(), vendorID, vendorName, vendorCategory, phoneNo, email, address, priceGroup, vendorPostingGroup, businessGroup, vATBusinessGroup);
        initialseProprties();
        createSearchColumns();
    }

    public int getIdHelper() {
        return idHelper.get();
    }

    public void setIdHelper(int idHelper) {
        vendor.setIdHelper(idHelper);
        this.idHelper.set(idHelper);
    }

    public String getVendorID() {
        return vendorID.get();
    }

    public void setVendorID(String vendorID) {
        vendor.setVendorID(vendorID);
        this.vendorID.set(vendorID);
    }

    public String getVendorName() {
        return vendorName.get();
    }

    public void setVendorName(String vendorName) {
        vendor.setVendorName(vendorName);
        this.vendorName.set(vendorName);
    }

    public LookupData getVendorCategory() {
        return vendorCategory;
    }

    public Object getVendorCategoryID() {
        return vendorCategoryID.get();
    }

    public String getVendorCategoryDisplay() {
        return vendorCategoryDisplay.get();
    }

    public LookupDataDA getVendorCategoryDA() {
        return this.vendorCategory != null ? new LookupDataDA(this.vendorCategory) : null;
    }

    public void setVendorCategory(LookupData vendorCategory) {
        vendor.setVendorCategory(vendorCategory);
        this.vendorCategory = vendorCategory;
        this.vendorCategoryID.set(vendorCategory.getId());
        this.vendorCategoryDisplay.set(vendorCategory.getDisplayKey());
    }

    public String getPhoneNo() {
        return phoneNo.get();
    }

    public void setPhoneNo(String phoneNo) {
        vendor.setPhoneNo(phoneNo);
        this.phoneNo.set(phoneNo);
    }

    public String getEmail() {
        return email.get();
    }

    public void setEmail(String email) {
        vendor.setEmail(email);
        this.email.set(email);
    }

    public String getAddress() {
        return address.get();
    }

    public void setAddress(String address) {
        vendor.setAddress(address);
        this.address.set(address);
    }

    public LookupData getPriceGroup() {
        return priceGroup;
    }

    public Object getPriceGroupID() {
        return priceGroupID.get();
    }

    public String getPriceGroupDisplay() {
        return priceGroupDisplay.get();
    }

    public LookupDataDA getPriceGroupDA() {
        return this.priceGroup != null ? new LookupDataDA(this.priceGroup) : null;
    }

    public void setPriceGroup(LookupData priceGroup) {
        vendor.setPriceGroup(priceGroup);
        this.priceGroup = priceGroup;
        this.priceGroupID.set(priceGroup.getId());
        this.priceGroupDisplay.set(priceGroup.getDisplayKey());
    }

    public VendorPostingGroup getVendorPostingGroup() {
        return vendorPostingGroup;
    }

    public Object getVendorPostingGroupID() {
        return vendorPostingGroupID.get();
    }

    public String getVendorPostingGroupDisplay() {
        return vendorPostingGroupDisplay.get();
    }

    public VendorPostingGroupDA getVendorPostingGroupDA() {
        return this.vendorPostingGroup != null ? new VendorPostingGroupDA(this.vendorPostingGroup) : null;
    }

    public void setVendorPostingGroup(VendorPostingGroup vendorPostingGroup) {
        vendor.setVendorPostingGroup(vendorPostingGroup);
        this.vendorPostingGroup = vendorPostingGroup;
        this.vendorPostingGroupID.set(vendorPostingGroup.getId());
        this.vendorPostingGroupDisplay.set(vendorPostingGroup.getDisplayKey());
    }

    public LookupData getBusinessGroup() {
        return businessGroup;
    }

    public Object getBusinessGroupID() {
        return businessGroupID.get();
    }

    public String getBusinessGroupDisplay() {
        return businessGroupDisplay.get();
    }

    public LookupDataDA getBusinessGroupDA() {
        return this.businessGroup != null ? new LookupDataDA(this.businessGroup) : null;
    }

    public void setBusinessGroup(LookupData businessGroup) {
        vendor.setBusinessGroup(businessGroup);
        this.businessGroup = businessGroup;
        this.businessGroupID.set(businessGroup.getId());
        this.businessGroupDisplay.set(businessGroup.getDisplayKey());
    }

    public LookupData getVATBusinessGroup() {
        return vATBusinessGroup;
    }

    public Object getVATBusinessGroupID() {
        return vATBusinessGroupID.get();
    }

    public String getVATBusinessGroupDisplay() {
        return vATBusinessGroupDisplay.get();
    }

    public LookupDataDA getVATBusinessGroupDA() {
        return this.vATBusinessGroup != null ? new LookupDataDA(this.vATBusinessGroup) : null;
    }

    public void setVATBusinessGroup(LookupData vATBusinessGroup) {
        vendor.setVATBusinessGroup(vATBusinessGroup);
        this.vATBusinessGroup = vATBusinessGroup;
        this.vATBusinessGroupID.set(vATBusinessGroup.getId());
        this.vATBusinessGroupDisplay.set(vATBusinessGroup.getDisplayKey());
    }

    public double getBalance() {
        return balance.get();
    }

    public String getBalanceDisplay() {
        return balanceDisplay.get();
    }

    public void setBalance(double balance) {
        vendor.setBalance(balance);
        this.balance.set(balance);
        this.balanceDisplay.set(formatNumber(balance));
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof VendorDA)) {
            return false;
        }

        VendorDA vendorDA = (VendorDA) o;

        if (vendorDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(vendorDA.getId());
    }

    @Override
    public int hashCode() {
        return vendor.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = vendor;
        this.idHelper.set(vendor.getIdHelper());
        this.vendorID.set(vendor.getVendorID());
        this.vendorName.set(vendor.getVendorName());
        this.vendorCategory = vendor.getVendorCategory();
        if (this.vendorCategory != null) {
            this.vendorCategoryID.set(vendorCategory.getId());
            this.vendorCategoryDisplay.set(vendorCategory.getDisplayKey());
        }
        this.phoneNo.set(vendor.getPhoneNo());
        this.email.set(vendor.getEmail());
        this.address.set(vendor.getAddress());
        this.priceGroup = vendor.getPriceGroup();
        if (this.priceGroup != null) {
            this.priceGroupID.set(priceGroup.getId());
            this.priceGroupDisplay.set(priceGroup.getDisplayKey());
        }
        this.vendorPostingGroup = vendor.getVendorPostingGroup();
        if (this.vendorPostingGroup != null) {
            this.vendorPostingGroupID.set(vendorPostingGroup.getId());
            this.vendorPostingGroupDisplay.set(vendorPostingGroup.getDisplayKey());
        }
        this.businessGroup = vendor.getBusinessGroup();
        if (this.businessGroup != null) {
            this.businessGroupID.set(businessGroup.getId());
            this.businessGroupDisplay.set(businessGroup.getDisplayKey());
        }
        this.vATBusinessGroup = vendor.getVATBusinessGroup();
        if (this.vATBusinessGroup != null) {
            this.vATBusinessGroupID.set(vATBusinessGroup.getId());
            this.vATBusinessGroupDisplay.set(vATBusinessGroup.getDisplayKey());
        }
        this.balance.set(vendor.getBalance());
        this.balanceDisplay.set(formatNumber(vendor.getBalance()));
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("vendorID", "Vendor ID", this.vendorID.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("vendorName", "Vendor Name", this.vendorName.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("vendorCategoryID", "Vendor Category ID", this.vendorCategoryID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("vendorCategoryDisplay", "Vendor Category", this.vendorCategoryDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("phoneNo", "PhoneNo", this.phoneNo.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("email", "Email", this.email.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("address", "Address", this.address.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("priceGroupID", "Price Group ID", this.priceGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("priceGroupDisplay", "Price Group", this.priceGroupDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("vendorPostingGroupID", "Vendor Posting Group ID", this.vendorPostingGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("vendorPostingGroupDisplay", "Vendor Posting Group", this.vendorPostingGroupDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("businessGroupID", "Business Group ID", this.businessGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("businessGroupDisplay", "Business Group", this.businessGroupDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("vATBusinessGroupID", "VAT Business Group ID", this.vATBusinessGroupID.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal, false));
        this.searchColumns.add(new SearchColumn("vATBusinessGroupDisplay", "VAT Business Group", this.vATBusinessGroupDisplay.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("balance", "Balance", this.balance.get(), SearchDataTypes.NUMBER));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.vendor.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.vendor.getDisplayKey();
    }

    public static List<VendorDA> getVendorDAs(List<Vendor> vendors) {
        List<VendorDA> list = new ArrayList<>();
        vendors.forEach((vendor) -> {
            list.add(new VendorDA(vendor));
        });
        return list;
    }

    public static List<Vendor> getVendorList(List<VendorDA> vendorDAs) {
        List<Vendor> vendors = new ArrayList<>();
        vendorDAs.forEach(a -> vendors.add(a.vendor));
        return vendors;
    }

    public boolean save() throws Exception {
        return super.persist(this.vendor);

    }

    public boolean update() throws Exception {
        return super.merge(this.vendor);

    }

    public boolean delete() {
        return super.remove(this.vendor);

    }

    public Vendor getVendor(String vendorID) {
        return (Vendor) super.find(Vendor.class, vendorID);
    }

    public Vendor getVendor() {
        return this.vendor;
    }

    public List<Vendor> getVendors() {
        return super.find(Vendor.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(Vendor.class).forEach(o -> list.add(new VendorDA((Vendor) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public VendorDA get(String vendorID) throws Exception {
        Vendor oVendor = getVendor(vendorID);
        if (oVendor == null) {
            throw new Exception("No Record with id: " + vendorID);
        }
        return new VendorDA(oVendor);
    }

    public List<VendorDA> get(String columName, Object value) {
        List<VendorDA> list = new ArrayList<>();
        super.selectQuery(Vendor.class, columName, value).forEach(da -> list.add(new VendorDA((Vendor) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<VendorDA> toDaList(List<Vendor> vendors) {
        List<VendorDA> vendorDAs = new ArrayList<>();
        vendors.forEach(s -> vendorDAs.add(new VendorDA(s)));
        return vendorDAs;
    }

    public List<DBAccess> toDBAccessList(List<Vendor> vendors) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        vendors.forEach(s -> dbAccesses.add(new VendorDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(Vendor.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(Vendor.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIdHelper() {
        return this.getMax("idHelper") + 1;
    }

    public String getNextVendorID(int idHelper) {
        return new IDGeneratorDA().getToAppendString(Vendor.class.getSimpleName(), idHelper);
    }

    public List<Vendor> getVendors(String columName, Object value) {
        return super.find(Vendor.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(Vendor.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                VendorDA vendorDA = new VendorDA((Vendor) e[0]);
                vendorDA.revisionEntity = (AppRevisionEntity) e[1];
                vendorDA.oRevisionType = (RevisionType) e[2];
                vendorDA.initRevProprties();
                vendorDA.searchColumns.addAll(vendorDA.getRevSearchColumns());
                dBAccesses.add(vendorDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }
    
    


}
